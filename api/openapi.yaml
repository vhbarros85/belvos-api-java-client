openapi: 3.0.2
info:
  contact:
    email: support@belvo.com
    name: Need help?
    url: https://developers.belvo.com
  description: |
    # Introduction

    Belvo is an open banking API for Latin America that allows companies to access banking and fiscal information in a secure as well as agile way.

    Through our API, you can access:


    - **Bank and Gig information** such as account information, real-time
    balance, historical transactions, and account owner identification.

    - **Fiscal information** such as received and sent invoices and tax returns.


    <img src="https://files.readme.io/acf27d3-belvo_pipes.png"
    alt="fiscal-endpoints">


    In this API reference you'll find all the information you need about each

    endpoint and resource.


    <div style="background-color:#f4f6f8; border-left: 6px solid
    #4CAF50;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right:
    25px">

    <strong>Tip: </strong> Make sure that you also check out our Developer
    Portal for guides on <a
    href="https://developers.belvo.com/docs/get-started-in-5-minutes"
    target="_blank">how to get started</a>, using our <a
    href="https://developers.belvo.com/docs/test-in-sandbox"
    target="_blank">Sandbox environment</a>, as well as how to <a
    href="https://developers.belvo.com/docs/connect-widget"
    target="_blank">integrate the widget</a> or use our <a
    href="https://developers.belvo.com/docs/quickstart-application"
    target="_blank">quickstart application</a>.

    </div>


    ## Environment

    We currently offer three environments: sandbox, development, and
    production.


    When using our SDKs, make sure to use the **Alias** (and not the Base URL).


    | Environment | Purpose | Access |
    |-----------|-------|-------|
    | **Sandbox** | The [Sandbox environment](https://developers.belvo.com/docs/test-in-sandbox) is dedicated for your testing and development phases. In this environment, you can create links without real credentials and you can pull test data from all endpoints. **⚠️The sandbox environment is refreshed frequently and your test data can be updated or deleted.** | Base URL (cURL): https://sandbox.belvo.com/ <br><br>Alias (SDKs): sandbox|
    |**Development**|The Development environment is dedicated for testing with real credentials and institutions with real-world institutions. You can create up to 25 links for free in this environment.| Base URL (cURL): https://development.belvo.com/ <br><br>Alias (SDKs): development |
    | **Production** | The Production environment is dedicated for live applications with real connections to institutions. In this environment, you
    will need real credentials to create links and you will pull real data from the institutions.| Base URL (cURL): https://api.belvo.com/ <br><br>Alias
    (SDKs): production|


    For each environment, you'll need to [generate separate API
    keys](https://developers.belvo.com/docs/get-your-belvo-api-keys).


    ## Response codes


    We use the following HTTP status code in the response depending on the
    success or failure:


    | Status Code | Description |
    |-----------|-------|
    | `200` | ✅ **Success** - The content is available in the response body. |
    | `201` | ✅ **Success** - The content was created successfully on Belvo. |
    | `204` | ✅ **Success** - No content to return. |
    | `400` | ❌ **Bad Request Error** - Request returned an error, detail in content.|
    | `401` | ❌ **Unauthorized** - The Belvo credentials provided are not valid.|
    | `404` | ❌ **Not Found** - The resource you try to access cannot be found.|
    | `405` | ❌ **Method Not Allowed** - The HTTP method you are using is not accepted for this resource.|
    | `408` | ❌ **Request Timeout** - The request timed out and was terminated by the server.|
    | `428` | ❌ **MFA Token Required** - MFA token was required by the institution to connect. |
    | `500` | ❌ **Internal Server Error** - The detail of the error is available in the response body.|


    ## Error handling


    ### Error messages


    Belvo API errors are returned in JSON format. For example, an error might
    look like this:


    ```json

    [
        {
          "request_id": "a6e1c493d7a29d91aed4338e6fcf077d",
          "message": "This field is required.",
          "code": "required",
          "field": "link"
        }
    ]

    ```


    Typically, an error response will have the following parameters:

    - `request_id`: a unique ID for the request, you should share it with the
    Belvo support team for investigations.

    - `message`: human-readable description of the error.

    - `code`: a unique code for the error. Check the table below to see how to
    handle each error code.

    - `field` *(optional)*: The specific field in the request body that has an
    issue.



    ### Request identifier

    When you need help with a specific error, add the request identifier
    (`request_id`) in your message to the Belvo support team. This will speed up
    investigations and get you back up and running in no time at all.


    ### Error codes and troubleshooting


    For a full list of errors and how to troubleshoot them, please see our
    dedicated [Error handling
    articles](https://developers.belvo.com/docs/integration-overview#error-handling)
    in our DevPortal.



    ### Retry policy


    Please see our recommended [retry
    policies](https://developers.belvo.com/docs/integration-overview#error-retry-policy)
    in the DevPortal.
  title: Belvo API Docs
  version: 1.20.1
  x-logo:
    url: https://files.readme.io/5111448-belvo-for-developers.svg
    altText: Belvo logo
servers:
- description: Sandbox
  url: https://sandbox.belvo.com
- description: Development
  url: https://development.belvo.com
security:
- basicAuth: []
tags:
- description: |
    An **institution** is an entity that Belvo can access information from. It can be a:

    - bank institution, such as Banamex retail banking or HSBC business banking.
    - fiscal institution, such as the Servicio de Administración Tributaria (SAT) in Mexico.
    - gig institution, such as Uber or Rappi.


    <img src="https://files.readme.io/fc3891f-institutions_api_reference.png" alt="fiscal-endpoints" width="650">

    You can see a complete list of institutions by either consulting our [Institutions article](https://developers.belvo.com/docs/institution) or making a List request to this endpoint.
  name: Institutions
- description: |
    A **Link** is a set of credentials associated to an end-user's access to an **institution**.


    <div style="background-color:#f4f6f8; border-left: 6px solid #808080;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px">
    <strong>Example: </strong> The username and password combination used to log in to an online banking application would be a link.
    </div>


    You will need to register a **Link** before accessing information from that specific end-user, such as account or transaction details.

    <div style="background-color:#f4f6f8; border-left: 6px solid #4CAF50;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px">
    <strong>Note: </strong> We recommend using our <a href="https://developers.belvo.com/docs/connect-widget" target="_blank">Connect Widget</a> to handle link creation and link status updates.
    </div>


    You have the possibility to register two types of links:


    ### Recurrent links (default)


    With recurrent links, Belvo automatically refreshes information daily and
    notifies you via [webhook](https://developers.belvo.com/docs/webhooks) so
    you always have up-to-date data. Then, when you receive the webhook, you
    can make GET requests to the List or Detail endpoints to instantly access
    up-to-date information, without needing to connect to the institution.


    <img src="https://files.readme.io/7b6c0d4-Recurrent_Link_FLow.png" alt="fiscal-endpoints" width="950">


    You can also make POST calls directly to the institution, as with single
    links, as soon as the link is created. However, we recommend you follow the flow described above (waiting for the webhook event) for a more optimal experience.


    ### Single links


    Single links are used to perform ad hoc data access to accounts, owners,
    transactions, and so on. For example, you can use it when you want to do
    an underwriting process to assess risk before lending money.

    For single links, you have to perform POST calls to an institution **every
    time** you want to access fresh data.

    <img src="https://files.readme.io/eda7956-Single_Link_Flow.svg" alt="fiscal-endpoints" width="950">
  name: Links
- description: |
    Use our Banking and Gig API product to access account, balance, owner, bank statement, as well as transaction data from banking and gig institutions.<br>


    <img src="https://files.readme.io/85063c6-banking_endpoints_API_reference.png" alt="banking-endpoints" width="750">


    | API Endpoint | Description | Supported institutions |
    |-----------|-------|---|
    | `api/accounts/` | Get information about your customer's bank accounts.|Banking and Gig|
    | `api/balances/` | Get the balance at the end of each day for your customer's bank accounts. |Banking|
    | `api/owners/` | Get the details of an account owner. |Banking and Gig|
    | `api/transactions/` | Get a list of bank transactions with metadata. |Banking and Gig|
  name: Banking and Gig API introduction
- description: |
    An **account** is the representation of a bank account inside a financial or gig institution. A user can have one or more accounts in an institution.

    For example, one user (or link) can have a checking account, several credit cards, and a loan account.
  name: Accounts
- description: |
    A **transaction** contains the detailed information of each movement inside an account. For example, a purchase at a store or a restaurant.
  name: Transactions
- description: |
    A **balance** represents the amount of funds available in a checking or savings account over a period of time.

    <div style="background-color:#f4f6f8; border-left: 6px solid #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px">
        <strong>Info: </strong> <ul>
        <li>The Balances endpoint is not supported for gig-economy links.</li>
        <li>If your Balance request is not for a checking or savings account, we return an empty array.</li>
        <li>If we cannot calculate the balance for a given day within your requested period, the <code>balance</code> and <code>current_balance</code> fields will return <code>null</code> for that day.</li>
        </ul>
     </div>
  name: Balances
- description: |
    An **owner** represents the person who has access to a Link and is the owner of all the accounts inside the Link.
  name: Owners
- description: "<div style=\"background-color:#bce9af;padding: 6px; border-radius:\
    \ 4px\">\n      <strong>\U0001f389 In Beta </strong><br>\n      This resource\
    \ is currently in open beta for all users. If you see any issues, don't hesitate\
    \ to contact our support team. \n      </div>\n\n\n\nInvestment Portfolios are\
    \ in open BETA for everyone to use. At the moment we only support the following\
    \ institutions and investment products:\n\n|Institution|Portfolio|Instruments|\n\
    |---|---|---|\n|Banco de Brazil Retail (Brazil)|`FIXED_INCOME`|`DEPOSIT`|\n|Banco\
    \ Inter Retail (Brazil)|`FIXED_INCOME`|`DEPOSIT`|\n|Bradesco Retail (Brazil)|`FIXED_INCOME`,\
    \ `VARIABLE_INCOME` |`DEPOSIT`, `FUND`|\n|BTG Investimentos (Brazil) | `FIXED_INCOME`,\
    \ `VARIABLE_INCOME`|`DEPOSIT`, `BOND`, `FUND`, `STOCKS`|\n|CaixaBank Retail (Brazil)\
    \ | `FIXED_INCOME`, `VARIABLE_INCOME`|`DEPOSIT`, `FUND`|\n|Itau Retail (Brazil)|`FIXED_INCOME`,\
    \ `VARIABLE_INCOME`|`DEPOSIT`, `FUND`, `STOCKS`|\n|Orama Retail (Brazil)|`FIXED_INCOME`,\
    \ `VARIABLE_INCOME`|`BOND`, `FUND`, `STOCKS`|\n|Santander Retail (Brazil)|`FIXED_INCOME`,\
    \ `VARIABLE_INCOME`|`DEPOSIT`, `BOND`, `FUND`|\n|XP Investimentos (Brazil) | `FIXED_INCOME`,\
    \ `VARIABLE_INCOME`|`DEPOSIT`, `BOND`, `FUND`, `STOCKS`|"
  name: Investment Portfolios (BETA)
- description: "<div style=\"background-color:#bce9af;padding: 6px; border-radius:\
    \ 4px\">\n      <strong>\U0001f389 In Beta </strong><br>\n      This resource\
    \ is currently in open beta for all users. If you see any issues, don't hesitate\
    \ to contact our support team. \n</div>\n\nA transaction in the context of investments\
    \ is any financial movement within an instrument. For example, buying new stocks,\
    \ selling a stake in a fund, paying a fee on an instrument, and so on.\n\n\nAt\
    \ the moment we only support the following institutions:\n\n- XP Investimentos\
    \ (Brazil)\n\n"
  name: Investment Transactions (BETA)
- description: "<div style=\"background-color:#bce9af;padding: 6px; border-radius:\
    \ 4px\">\n      <strong>\U0001f389 In Beta </strong><br>\n      This resource\
    \ is currently in open beta for all users. If you see any issues, don't hesitate\
    \ to contact our support team. \n      </div>\n\nWith our receivable transactions\
    \ resource, you can gain access to every transaction processed by the end user\
    \ (business) conducted through a POS terminal. For each transaction, we return\
    \ the:\n\n- gross and net amounts\n- type of card used\n- fees applied to the\
    \ transaction\n- and more!"
  name: Receivable Transactions (BETA)
- description: |
    Belvo's Enrichment API are a set of endpoints that return additional insights on your user's banking data.

    - **Incomes**: Use this endpoint to verify your user's income.
    - **Recurring Expenses**: Use this endpoint to identify the recurrent expenses (such as Netflix suubscriptions) that your user pays.
  name: Enrichment API introduction
- description: |
    Use the Incomes endpoint to gather insights on an account's income sources for the past 365 days. The endpoint is particularly useful when you want to verify a person's income.

    <div style="background-color:#f4f6f8; border-left: 6px solid #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px">
        <strong>Info: </strong> The incomes resource is <b>only</b> available for Checking and Savings
    accounts associated with banking links.
     </div>
  name: Incomes
- description: |
    Belvo's Recurring Expenses API allows you to identify a user's regular payments for subscription services, such as Netflix or gym memberships, as well as utility payments, such as electricity or phone bills. We return information for up to 365 days.


    <div style="background-color:#f4f6f8; border-left: 6px solid #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px">
        <strong>Info: </strong> The recurring expenses resource is <b>only</b> available for Checking and Savings accounts associated with banking links.
     </div>
  name: Recurring Expenses
- description: |
    Belvo's Risk Insights endpoint exposes a set of features that can be used to improve your company's credit risk and opportunity decisions. These set of features can be used as building blocks to create or iterate on your own credit score using transactional banking data with the objective of improving the predictive power of your models. You can use these components as you require and according to what makes the most sense for your specific use case.

    To calculate the risk insights, we take up to 90 days of transactional data from the user's checking, savings, loans, and credit card accounts.

    If you need to know the currency of the account, just do a GET Details to the Accounts endpoint (using the account ID you receive from in the accounts array of the response).
  name: Risk Insights
- description: |
    Use our **Fiscal API** product to access invoices, tax compliance statuses, tax returns, tax retentions, and tax statuses from the fiscal authority in a given country.


    <img src="https://files.readme.io/97c76a8-Fiscal_endpoints_horizontal.png" alt="fiscal-endpoints" width="750">


    | API Endpoint | Description |
    |-----------|-------|
    | `api/invoices/` | Get all the information about the invoices sent and received by a person or a business that have been certified by the tax authority. |
    | `api/tax-compliance-status/`| Get information about whether a person or business is complying to their tax obligations.|
    | `api/tax-returns/` | Get all the information about the tax returns sent every year to the tax authority by a person or a business. |
    | `api/tax-retentions/` | Get information about tax retention invoices sent and received by a business or a person. |
    | `api/tax-status/` | Get all the information about the tax situation of a person or a business. |

    <div style="background-color:#f4f6f8; border-left: 6px solid #4CAF50;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px">
    <strong>Note: </strong> You can only access this information with <b>fiscal</b> links.
    </div>
  name: Fiscal API introduction
- description: |
    An **invoice** is the representation of an electronic invoice, that can be received or sent, by a business or an individual and has been uploaded to the fiscal institution's website. Multiple INFLOW (invoice received) and OUTFLOW (invoice sent) invoices can be retrieved inside each link coming from a fiscal institution.

    <div style="background-color:#f4f6f8; border-left: 6px solid #4CAF50;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px;">
    <strong>Note: </strong> If you want to see example responses for different invoice types, just click the drop-down menu under <b>Response Samples</b>.
    </div>
  name: Invoices
- description: |
    A **tax return** is the representation of the tax return document sent every year by a person or a business to the tax authority in the country.


    The tax return data structure will be different depending on if it is related to a person or a business (you will find examples for both in the endpoints below).
  name: Tax returns
- description: |
    A **tax status** - or _Constancia de Situación Fiscal_ - is the representation of the tax situation of a person or a business provided by the tax authority in the country.
  name: Tax status
- description: |
    A **tax retention** is the amount of money that the payer must deduct from the total amount of a purchase invoice, according to the fiscal institution’s regulations.


    With Belvo’s Tax Retentions resource, you can quickly and easily consult information regarding a user’s tax retentions over a given period or for a specific invoice. This is particularly useful when you want to aid your user in their tax returns as for each invoice you receive the:

    - invoice amount
    - amount that is exempt from taxation
    - total amount that is taxed
    - breakdown of all the taxes applied to the invoice
  name: Tax retentions
- description: |
    A **tax compliance status** indicates about whether a person or business is complying with their tax obligations at the moment of the request. The information is extracted from SAT's _Opinion de cumplimiento de Obligaciones Fiscales_ document.
  name: Tax compliance status
paths:
  /api/links/:
    get:
      description: "Get a paginated list of all the existing links in your Belvo account.\
        \ By default, we return up to 100 results per page."
      operationId: ListLinks
      parameters:
      - description: A page number within the paginated result set.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          format: int32
          type: integer
        style: form
      - description: "Indicates how many results to return per page. By default we\
          \ return 100 results per page. \n\nℹ️ The minimum number of results returned\
          \ per page is 1 and the maximum is 1000. If you enter a value greater than\
          \ 1000, our API will default to the maximum value (1000).\n"
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 100
          example: 100
          format: int32
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - allowReserved: true
        description: |-
          List of additional fields you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.
          ℹ️ **Note**: Although `filters` is an object, any filter you use is automatically serialized as a query string.
        explode: true
        in: query
        name: filters
        required: false
        schema:
          $ref: '#/components/schemas/linkFilters'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseLink'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
      summary: List all links
      tags:
      - Links
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl https://sandbox.belvo.com/api/links/ \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from pprint import pprint
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # List links
            for link in client.Links.list():
                pprint(link)
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.links.list
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.links.list()
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
    patch:
      description: Used to resume a Link register session that was paused because
        an MFA token was required by the institution.
      operationId: PatchLinks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBodyWithoutSaveData'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
          description: Ok
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegisterLink_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "428":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TokenRequiredResponse'
                type: array
          description: MFA Token Required
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Complete a links request
      tags:
      - Links
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl -X PATCH \
              https://sandbox.belvo.com/api/links/ \
              -H 'Content-Type: application/json' \
              -H 'Host: sandbox.belvo.com' \
              -H 'cache-control: no-cache' \
              -d '{
                  "session": "",
                  "token": "",
                  "link": ""
              }' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Resume a link
            link = client.Links.resume(
              session="session_id",
              token="token",
              link="link_id"
            )
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.links.resume(
              session_id: 'your-session-id',
              token: 'otp-token',
              link: 'link-id'
            )
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.links.resume('yourSessionId', 'yourOTPToken', 'linkId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-content-type: application/json
      x-accepts: application/json
    post:
      description: |
        Register a new link with your Belvo account.

        <div style="background-color:#f4f6f8; border-left: 6px solid #4CAF50;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px">
        <strong>Note: </strong> We recommend using our <a href="https://developers.belvo.com/docs/connect-widget" target="_blank">Connect Widget</a> to handle link creation and link status updates.
        </div>
      operationId: RegisterLink
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinksRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
          description: Created
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegisterLink_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "428":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TokenRequiredResponse'
                type: array
          description: MFA Token Required
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Register a new link
      tags:
      - Links
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl -X POST \
              https://sandbox.belvo.com/api/links/ \
              -H 'Content-Type: application/json' \
              -H 'Host: sandbox.belvo.com' \
              -H 'cache-control: no-cache' \
              -d '{
                "institution": "",
                "username": "",
                "password": ""
            }' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Register a link
            link = client.Links.create(
                institution="erebor_mx_retail",
                username="johndoe",
                password="supersecret"
            )
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.links.register(
              institution: 'erebor_mx_retail',
              username: 'johndoe',
              password: 'supersecret'
            )
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.links.register('erebor_mx_retail', 'johndoe', 'supersecret')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-content-type: application/json
      x-accepts: application/json
  /api/links/{id}/:
    delete:
      description: "Delete a specific link and all associated accounts, transactions,\
        \ and owners from your Belvo account."
      operationId: DestroyLink
      parameters:
      - description: The `link.id` that you want to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Delete a link
      tags:
      - Links
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl -X DELETE \
              https://sandbox.belvo.com/api/links/{id}/ \
              -H 'Host: sandbox.belvo.com' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            client.Links.delete("link_id")
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.links.delete id: 'link-id'
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.links.delete('linkId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
    get:
      description: Get the details of a specific link.
      operationId: DetailLink
      parameters:
      - description: The `link.id` you want to get detailed information about.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Get a link's details
      tags:
      - Links
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl https://sandbox.belvo.com/api/links/{id} \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Get a link
            link = client.Links.get(id="link_id")
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.links.detail id: 'link-id'
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.links.detail('linkId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
    put:
      description: |
        Update the credentials of a specific link. If the successfully updated link is a recurrent one, we automatically trigger an update of the link. If we find fresh data, you'll [receive historical update](https://developers.belvo.com/docs/webhooks) webhooks.
        <div style="background-color:#f4f6f8; border-left: 6px solid #4CAF50;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px"> <strong>Note: </strong> We recommend using our <a href="https://developers.belvo.com/docs/connect-widget" target="_blank">Connect Widget</a> to handle updating <code>invalid</code> or <code>token_required</code> links. </div>
      operationId: UpdateLink
      parameters:
      - description: The `link.id` you want to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinksPutRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
          description: Ok
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegisterLink_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
        "428":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TokenRequiredResponse'
                type: array
          description: MFA Token Required
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Update a link's credentials
      tags:
      - Links
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl -X PUT https://sandbox.belvo.com/api/links/{id} \
              -H 'Content-Type: application/json' \
              -H 'Host: sandbox.belvo.com' \
              -H 'cache-control: no-cache' \
              -d '{
                  "password": ""
              }' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Update a link
            link = client.Links.put(link="link_id", password="password")
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.links.update(link: 'link-id', password: 'new-password')
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.links.update('linkID', 'newSuperSecret')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-content-type: application/json
      x-accepts: application/json
  /api/accounts/:
    get:
      description: "Get a paginated list of all existing accounts in your Belvo account.\
        \ By default, we return up to 100 results per page."
      operationId: ListAccounts
      parameters:
      - description: A page number within the paginated result set.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          format: int32
          type: integer
        style: form
      - description: "Indicates how many results to return per page. By default we\
          \ return 100 results per page. \n\nℹ️ The minimum number of results returned\
          \ per page is 1 and the maximum is 1000. If you enter a value greater than\
          \ 1000, our API will default to the maximum value (1000).\n"
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 100
          example: 100
          format: int32
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: |
          The `link.id` you want to filter by.

          ℹ️ We highly recommend adding the `link.id` filter in order to improve your performance.
        explode: true
        in: query
        name: link
        required: false
        schema:
          example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
          format: uuid
          type: string
        style: form
      - allowReserved: true
        description: |-
          List of additional fields you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.
          ℹ️ **Note**: Although `filters` is an object, any filter you use is automatically serialized as a query string.
        explode: true
        in: query
        name: filters
        required: false
        schema:
          $ref: '#/components/schemas/accountFilters'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsPaginatedResponse'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
      summary: List all accounts
      tags:
      - Accounts
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl https://sandbox.belvo.com/api/accounts/ \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from pprint import pprint
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # List Accounts
            for account in client.Accounts.list():
                pprint(account)
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.accounts.list
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.accounts.list()
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
    patch:
      description: Used to resume an Account retrieve session that was paused because
        an MFA token was required by the institution.
      operationId: PatchAccounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                AccountsBankingChecking:
                  $ref: '#/components/examples/AccountsBankingChecking'
                AccountsBankingCreditCard:
                  $ref: '#/components/examples/AccountsBankingCreditCard'
                AcccountsBankingLoan:
                  $ref: '#/components/examples/AccountsBankingLoan'
                AccountsBankingPension:
                  $ref: '#/components/examples/AccountsBankingPension'
                AccountsBankingSavings:
                  $ref: '#/components/examples/AccountsBankingSavings'
                AccountsGigDelivery:
                  $ref: '#/components/examples/AccountsGigDelivery'
                AccountsGigDriver:
                  $ref: '#/components/examples/AccountsGigDriver'
              schema:
                items:
                  $ref: '#/components/schemas/Account'
                type: array
          description: Ok (when `save_data=false`)
        "201":
          content:
            application/json:
              examples:
                AccountsBankingChecking:
                  $ref: '#/components/examples/AccountsBankingChecking'
                AccountsBankingCreditCard:
                  $ref: '#/components/examples/AccountsBankingCreditCard'
                AcccountsBankingLoan:
                  $ref: '#/components/examples/AccountsBankingLoan'
                AccountsBankingPension:
                  $ref: '#/components/examples/AccountsBankingPension'
                AccountsBankingSavings:
                  $ref: '#/components/examples/AccountsBankingSavings'
                AccountsGigDelivery:
                  $ref: '#/components/examples/AccountsGigDelivery'
                AccountsGigDriver:
                  $ref: '#/components/examples/AccountsGigDriver'
              schema:
                items:
                  $ref: '#/components/schemas/Account'
                type: array
          description: Created (when `save_data=true`)
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegisterLink_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "408":
          content:
            application/json:
              schema:
                description: "Belvo has a limit regarding the time it takes to log\
                  \ in, retrieve account data, and log out. A timeout occurs when\
                  \ there is a very high amount of data and everything could not be\
                  \ obtained within the allotted time.\n  "
                items:
                  $ref: '#/components/schemas/RequestTimeoutError'
                title: Request Timeout
                type: array
          description: Request Timeout
        "428":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TokenRequiredResponse'
                type: array
          description: MFA Token Required
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Complete an accounts request
      tags:
      - Accounts
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl -X PATCH \
              https://sandbox.belvo.com/api/accounts/ \
              -H 'Content-Type: application/json' \
              -H 'Host: sandbox.belvo.com' \
              -H 'cache-control: no-cache' \
              -d '{
                  "session": "",
                  "token": "",
                  "link": ""
              }' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Resume accounts
            accounts = client.Accounts.resume(
              session="session_id",
              token="token",
              link="link_id"
            )
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.accounts.resume(
              session: 'session_id',
              token: 'token',
              link: 'link_id'
            )
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.accounts.resume('sessionId', 'token', 'linkId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-content-type: application/json
      x-accepts: application/json
    post:
      description: Retrieve accounts from an existing link.
      operationId: RetrieveAccounts
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StandardRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                AccountsBankingChecking:
                  $ref: '#/components/examples/AccountsBankingChecking'
                AccountsBankingCreditCard:
                  $ref: '#/components/examples/AccountsBankingCreditCard'
                AcccountsBankingLoan:
                  $ref: '#/components/examples/AccountsBankingLoan'
                AccountsBankingPension:
                  $ref: '#/components/examples/AccountsBankingPension'
                AccountsBankingSavings:
                  $ref: '#/components/examples/AccountsBankingSavings'
                AccountsGigDelivery:
                  $ref: '#/components/examples/AccountsGigDelivery'
                AccountsGigDriver:
                  $ref: '#/components/examples/AccountsGigDriver'
              schema:
                items:
                  $ref: '#/components/schemas/Account'
                type: array
          description: Ok (when `save_data=false`)
        "201":
          content:
            application/json:
              examples:
                AccountsBankingChecking:
                  $ref: '#/components/examples/AccountsBankingChecking'
                AccountsBankingCreditCard:
                  $ref: '#/components/examples/AccountsBankingCreditCard'
                AcccountsBankingLoan:
                  $ref: '#/components/examples/AccountsBankingLoan'
                AccountsBankingPension:
                  $ref: '#/components/examples/AccountsBankingPension'
                AccountsBankingSavings:
                  $ref: '#/components/examples/AccountsBankingSavings'
                AccountsGigDelivery:
                  $ref: '#/components/examples/AccountsGigDelivery'
                AccountsGigDriver:
                  $ref: '#/components/examples/AccountsGigDriver'
              schema:
                items:
                  $ref: '#/components/schemas/Account'
                type: array
          description: Created (when `save_data=true`)
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegisterLink_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "408":
          content:
            application/json:
              schema:
                description: "Belvo has a limit regarding the time it takes to log\
                  \ in, retrieve account data, and log out. A timeout occurs when\
                  \ there is a very high amount of data and everything could not be\
                  \ obtained within the allotted time.\n  "
                items:
                  $ref: '#/components/schemas/RequestTimeoutError'
                title: Request Timeout
                type: array
          description: Request Timeout
        "428":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TokenRequiredResponse'
                type: array
          description: MFA Token Required
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Retrieve accounts for a link
      tags:
      - Accounts
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl -X POST \
              https://sandbox.belvo.com/api/accounts/ \
              -H 'Content-Type: application/json' \
              -H 'Host: sandbox.belvo.com' \
              -H 'cache-control: no-cache' \
              -d '{
                "link": "link_id"
            }' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Retrieve accounts
            accounts = client.Accounts.create(
              link="link_id"
            )
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.accounts.retrieve link: 'link-id'
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.accounts.retrieve('link-id')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-content-type: application/json
      x-accepts: application/json
  /api/accounts/{id}/:
    delete:
      description: "Delete a specific account and all associated transactions, as\
        \ well as owners, from your Belvo account."
      operationId: DestroyAccount
      parameters:
      - description: The `account.id` you want to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Delete an account
      tags:
      - Accounts
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl -X DELETE \
              https://sandbox.belvo.com/api/accounts/{id}/ \
              -H 'Host: sandbox.belvo.com' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Delete an account
            client.Accounts.delete("account-id")
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.accounts.delete id: 'account-id'
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.accounts.delete('accountId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
    get:
      description: Get the details of a specific account.
      operationId: DetailAccount
      parameters:
      - description: The `account.id` you want to get detailed information about.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                AccountsBankingChecking:
                  $ref: '#/components/examples/AccountsBankingCheckingDetail'
                AccountsBankingCreditCard:
                  $ref: '#/components/examples/AccountsBankingCreditCardDetail'
                AcccountsBankingLoan:
                  $ref: '#/components/examples/AccountsBankingLoanDetail'
                AccountsBankingPension:
                  $ref: '#/components/examples/AccountsBankingPensionDetail'
                AccountsBankingSavings:
                  $ref: '#/components/examples/AccountsBankingSavingsDetail'
                AccountsGigDelivery:
                  $ref: '#/components/examples/AccountsGigDeliveryDetail'
                AccountsGigDriver:
                  $ref: '#/components/examples/AccountsGigDriverDetail'
              schema:
                $ref: '#/components/schemas/Account'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Get an account's details
      tags:
      - Accounts
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl https://sandbox.belvo.com/api/accounts/{id} \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Get an account
            account = client.Accounts.get(id="account-id")
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.accounts.detail id: 'account-id'
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.accounts.detail('accountId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
  /api/transactions/:
    get:
      description: "Get a paginated list of all existing transactions in your Belvo\
        \ account. By default, we return up to 100 results per page."
      operationId: ListTransactions
      parameters:
      - description: A page number within the paginated result set.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          format: int32
          type: integer
        style: form
      - description: |
          Indicates how many results to return per page. By default we return 100 results per page.

          ℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 100
          example: 100
          format: int32
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: |
          The `link.id` you want to filter by.

          ℹ️ We highly recommend adding the `account.id` filter as well in order to improve your performance.
        explode: true
        in: query
        name: link
        required: true
        schema:
          example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
          format: uuid
          type: string
        style: form
      - description: |
          The `account.id` you want to filter by.

          ℹ️ We highly recommend adding the `account.id` filter in order to improve your performance.
        explode: true
        in: query
        name: account
        required: false
        schema:
          example: d979df3a-5d0f-4cc9-9bd4-b75c28b45963
          format: uuid
          type: string
        style: form
      - allowReserved: true
        description: |-
          List of additional fields you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.
          ℹ️ **Note**: Although `filters` is an object, any filter you use is automatically serialized as a query string.
        explode: true
        in: query
        name: filters
        required: false
        schema:
          $ref: '#/components/schemas/transactionFilters'
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                TransactionsCheckingPaginated:
                  $ref: '#/components/examples/TransactionsCheckingPaginated'
                TransactionsSavingsPaginated:
                  $ref: '#/components/examples/TransactionsSavingsPaginated'
                TransactionsCreditCardPaginated:
                  $ref: '#/components/examples/TransactionsCreditCardPaginated'
                TransactionsGigDeliveryPaginated:
                  $ref: '#/components/examples/TransactionsGigDeliveryPaginated'
                TransactionsGigDriverPaginated:
                  $ref: '#/components/examples/TransactionsGigDriverPaginated'
              schema:
                $ref: '#/components/schemas/TransactionsPaginatedResponse'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
      summary: List all transactions
      tags:
      - Transactions
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl https://sandbox.belvo.com/api/transactions/ \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from pprint import pprint
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # List transactions
            for transaction in client.Transactions.list():
                pprint(transaction)
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.transactions.list
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.transactions.list()
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
    patch:
      description: Used to resume a Transaction retrieve session that was paused because
        an MFA token was required by the institution.
      operationId: PatchTransactions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                TransactionsChecking:
                  $ref: '#/components/examples/TransactionsChecking'
                TransactionsSavings:
                  $ref: '#/components/examples/TransactionsSavings'
                TransactionsCreditCard:
                  $ref: '#/components/examples/TransactionsCreditCard'
                TransactionsGigDelivery:
                  $ref: '#/components/examples/TransactionsGigDelivery'
                TransactionsGigDriver:
                  $ref: '#/components/examples/TransactionsGigDriver'
              schema:
                items:
                  $ref: '#/components/schemas/Transaction'
                type: array
          description: Ok (when `save_data=false`)
        "201":
          content:
            application/json:
              examples:
                TransactionsChecking:
                  $ref: '#/components/examples/TransactionsChecking'
                TransactionsSavings:
                  $ref: '#/components/examples/TransactionsSavings'
                TransactionsCreditCard:
                  $ref: '#/components/examples/TransactionsCreditCard'
                TransactionsGigDelivery:
                  $ref: '#/components/examples/TransactionsGigDelivery'
                TransactionsGigDriver:
                  $ref: '#/components/examples/TransactionsGigDriver'
              schema:
                items:
                  $ref: '#/components/schemas/Transaction'
                type: array
          description: Created (when `save_data=true`)
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegisterLink_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "408":
          content:
            application/json:
              schema:
                description: "Belvo has a limit regarding the time it takes to log\
                  \ in, retrieve account data, and log out. A timeout occurs when\
                  \ there is a very high amount of data and everything could not be\
                  \ obtained within the allotted time.\n  "
                items:
                  $ref: '#/components/schemas/RequestTimeoutError'
                title: Request Timeout
                type: array
          description: Request Timeout
        "428":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TokenRequiredResponse'
                type: array
          description: MFA Token Required
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Complete a transactions request
      tags:
      - Transactions
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl -X PATCH \
              https://sandbox.belvo.com/api/transactions/ \
              -H 'Content-Type: application/json' \
              -H 'Host: sandbox.belvo.com' \
              -H 'cache-control: no-cache' \
              -d '{
                  "session": "",
                  "token": "",
                  "link": ""
              }' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Resume transactions
            transactions = client.Transactions.resume(
              session="session_id",
              token="token",
              link="link_id"
            )
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.transactions.resume(
              session: 'session-id',
              token: 'token',
              link: 'link-id'
            )
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.transactions.resume('yourSessionId', 'yourOTPToken', 'linkId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-content-type: application/json
      x-accepts: application/json
    post:
      description: |
        Retrieve transactions for one or more accounts from a specific link.
        <div style="background-color:#f4f6f8; border-left: 6px solid #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px"> <strong>Info: </strong> When retrieving transactions, it is important to understand that the available transaction data ranges depend on each institution. <br><br>
        If you try to access older information than what we can access, we will return all the data we can read within that date range. For example, if you request transactions for the last year and we can only access the last six months, we will return the information corresponding to these six months of data. </div>
      operationId: RetrieveTransactions
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                TransactionsChecking:
                  $ref: '#/components/examples/TransactionsChecking'
                TransactionsSavings:
                  $ref: '#/components/examples/TransactionsSavings'
                TransactionsCreditCard:
                  $ref: '#/components/examples/TransactionsCreditCard'
                TransactionsGigDelivery:
                  $ref: '#/components/examples/TransactionsGigDelivery'
                TransactionsGigDriver:
                  $ref: '#/components/examples/TransactionsGigDriver'
              schema:
                items:
                  $ref: '#/components/schemas/Transaction'
                type: array
          description: Ok (when `save_data=false`)
        "201":
          content:
            application/json:
              examples:
                TransactionsChecking:
                  $ref: '#/components/examples/TransactionsChecking'
                TransactionsSavings:
                  $ref: '#/components/examples/TransactionsSavings'
                TransactionsCreditCard:
                  $ref: '#/components/examples/TransactionsCreditCard'
                TransactionsGigDelivery:
                  $ref: '#/components/examples/TransactionsGigDelivery'
                TransactionsGigDriver:
                  $ref: '#/components/examples/TransactionsGigDriver'
              schema:
                items:
                  $ref: '#/components/schemas/Transaction'
                type: array
          description: Created (when `save_data=true`)
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegisterLink_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "408":
          content:
            application/json:
              schema:
                description: "Belvo has a limit regarding the time it takes to log\
                  \ in, retrieve account data, and log out. A timeout occurs when\
                  \ there is a very high amount of data and everything could not be\
                  \ obtained within the allotted time.\n  "
                items:
                  $ref: '#/components/schemas/RequestTimeoutError'
                title: Request Timeout
                type: array
          description: Request Timeout
        "428":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TokenRequiredResponse'
                type: array
          description: MFA Token Required
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Retrieve transactions for a link
      tags:
      - Transactions
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl -X POST \
              https://sandbox.belvo.com/api/transactions/ \
              -H 'Content-Type: application/json' \
              -H 'Host: sandbox.belvo.com' \
              -H 'cache-control: no-cache' \
              -d '{
                "link": "",
                "account": "",
                "date_from": "",
                "date_to": ""
            }' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Retrieve transactions
            transactions = client.Transactions.create(
              "link_id",
              "2019-07-01",
              date_to="2019-07-31"
            )
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            transactions = sandbox.transactions.retrieve(
              link: 'link_id',
              date_from: '2022-01-01',
              options: {
                account: account, //optional
                date_to: '2022-01-24'
              }
            )
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.transactions.retrieve('linkId', '2019-01-01', { 'dateTo': '2019-07-31' })
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-content-type: application/json
      x-accepts: application/json
  /api/transactions/{id}/:
    delete:
      description: Delete a specific transaction from your Belvo account.
      operationId: DestroyTransaction
      parameters:
      - description: The `transaction.id` that you want to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Delete a transaction
      tags:
      - Transactions
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl -X DELETE \
              https://sandbox.belvo.com/api/transactions/{id}/ \
              -H 'Host: sandbox.belvo.com' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Delete a transaction
            client.Transactions.delete("transaction-id")
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.transactions.delete id: 'transaction-id'
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.transactions.delete('transactionId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
    get:
      description: Get the details of a specific transaction.
      operationId: DetailTransaction
      parameters:
      - description: The `transaction.id` you want to get detailed information about.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                TransactionsChecking:
                  $ref: '#/components/examples/TransactionsCheckingDetail'
                TransactionsSavings:
                  $ref: '#/components/examples/TransactionsSavingsDetail'
                TransactionsCreditCard:
                  $ref: '#/components/examples/TransactionsCreditCardDetail'
                TransactionsGigDelivery:
                  $ref: '#/components/examples/TransactionsGigDeliveryDetail'
                TransactionsGigDriver:
                  $ref: '#/components/examples/TransactionsGigDriverDetail'
              schema:
                $ref: '#/components/schemas/Transaction'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Get a transaction's details
      tags:
      - Transactions
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl https://sandbox.belvo.com/api/transactions/{id} \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Get a transaction
            transaction = client.Transactions.get(id="transaction-id")
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.transactions.detail id: 'transaction-id'
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.transactions.detail('transactionId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
  /api/balances/:
    get:
      description: "Get a paginated list of all existing balances in your Belvo account.\
        \ By default, we return up to 100 results per page."
      operationId: ListBalances
      parameters:
      - description: A page number within the paginated result set.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          format: int32
          type: integer
        style: form
      - description: "Indicates how many results to return per page. By default we\
          \ return 100 results per page. \n\nℹ️ The minimum number of results returned\
          \ per page is 1 and the maximum is 1000. If you enter a value greater than\
          \ 1000, our API will default to the maximum value (1000).\n"
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 100
          example: 100
          format: int32
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: |
          The `link.id` you want to filter by.

          ℹ️ We highly recommend adding either the `link.id` or the `account.id` filters in order to improve your performance.
        explode: true
        in: query
        name: link
        required: false
        schema:
          example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
          format: uuid
          type: string
        style: form
      - description: |
          The `account.id` you want to filter by.

          ℹ️ We highly recommend adding either the `link.id` or the `account.id` filters in order to improve your performance.
        explode: true
        in: query
        name: account
        required: false
        schema:
          example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
          format: uuid
          type: string
        style: form
      - allowReserved: true
        description: |-
          List of additional fields you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.
          ℹ️ **Note**: Although `filters` is an object, any filter you use is automatically serialized as a query string.
        explode: true
        in: query
        name: filters
        required: false
        schema:
          $ref: '#/components/schemas/balanceFilters'
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                BalancesExamplePaginated:
                  $ref: '#/components/examples/BalancesExamplePaginated'
              schema:
                $ref: '#/components/schemas/BalancesPaginatedResponse'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
      summary: List all balances
      tags:
      - Balances
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl https://sandbox.belvo.com/api/balances/ \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from pprint import pprint
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # List balances
            for balance in client.Balances.list():
                pprint(balance)
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.balances.list
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.balances.list()
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
    patch:
      description: Used to resume a Balance retrieve session that was paused because
        an MFA token was required by the institution.
      operationId: PatchBalances
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                BalancesExamplePaginated:
                  $ref: '#/components/examples/BalancesExample'
              schema:
                items:
                  $ref: '#/components/schemas/Balance'
                type: array
          description: Ok (when `save_data=false`)
        "201":
          content:
            application/json:
              examples:
                BalancesExamplePaginated:
                  $ref: '#/components/examples/BalancesExample'
              schema:
                items:
                  $ref: '#/components/schemas/Balance'
                type: array
          description: Created (when `save_data=true`)
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegisterLink_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "408":
          content:
            application/json:
              schema:
                description: "Belvo has a limit regarding the time it takes to log\
                  \ in, retrieve account data, and log out. A timeout occurs when\
                  \ there is a very high amount of data and everything could not be\
                  \ obtained within the allotted time.\n  "
                items:
                  $ref: '#/components/schemas/RequestTimeoutError'
                title: Request Timeout
                type: array
          description: Request Timeout
        "428":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TokenRequiredResponse'
                type: array
          description: MFA Token Required
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Complete a balances request
      tags:
      - Balances
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl -X PATCH \
              https://sandbox.belvo.com/api/balances/ \
              -H 'Content-Type: application/json' \
              -H 'Host: sandbox.belvo.com' \
              -H 'cache-control: no-cache' \
              -d '{
                  "session": "",
                  "token": "",
                  "link": ""
              }' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Resume balances
            balances = client.Balances.resume(
              session="session_id",
              token="token",
              link="link_id"
            )
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.balances.resume(
              session: 'session-id',
              token: 'token',
              link: 'link-id'
            )
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.balances.resume('sessionId', 'token', 'linkId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-content-type: application/json
      x-accepts: application/json
    post:
      description: Retrieve balances from one or more accounts for a specific link
        within a specified date range.
      operationId: RetrieveBalances
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BalancesRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                BalancesExamplePaginated:
                  $ref: '#/components/examples/BalancesExample'
              schema:
                items:
                  $ref: '#/components/schemas/Balance'
                type: array
          description: Ok (when `save_data=false`)
        "201":
          content:
            application/json:
              examples:
                BalancesExamplePaginated:
                  $ref: '#/components/examples/BalancesExample'
              schema:
                items:
                  $ref: '#/components/schemas/Balance'
                type: array
          description: Created (when `save_data=true`)
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegisterLink_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "408":
          content:
            application/json:
              schema:
                description: "Belvo has a limit regarding the time it takes to log\
                  \ in, retrieve account data, and log out. A timeout occurs when\
                  \ there is a very high amount of data and everything could not be\
                  \ obtained within the allotted time.\n  "
                items:
                  $ref: '#/components/schemas/RequestTimeoutError'
                title: Request Timeout
                type: array
          description: Request Timeout
        "428":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TokenRequiredResponse'
                type: array
          description: MFA Token Required
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Retrieve balances for a link
      tags:
      - Balances
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl -X POST \
              https://sandbox.belvo.com/api/balances/ \
              -H 'Content-Type: application/json' \
              -H 'Host: sandbox.belvo.com' \
              -H 'cache-control: no-cache' \
              -d '{
                "link": "",
                "account": "",
                "date_from": "",
                "date_to": ""
            }' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Retrieve balances
            balances = client.Balances.create(
              "link_id",
              "2019-07-01",
              date_to="2019-07-31"
            )
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.balances.retrieve(
              link: 'link-id',
              date_from: '2019-07-01',
              date_to: '2019-07-31'
            )
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.balances.retrieve('linkId', '2019-07-01', { 'dateTo': '2019-07-31' })
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-content-type: application/json
      x-accepts: application/json
  /api/balances/{id}/:
    delete:
      description: Delete a specific balance from your Belvo account.
      operationId: DestroyBalance
      parameters:
      - description: The `balance.id` that you want to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Delete a balance
      tags:
      - Balances
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl -X DELETE \
              https://sandbox.belvo.com/api/balance/{id}/ \
              -H 'Host: sandbox.belvo.com' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Delete a balance
            client.Balances.delete("balance-id")
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.balances.delete id: 'balance-id'
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.balances.delete('balanceId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
    get:
      description: Get the details of a specific balance.
      operationId: DetailBalance
      parameters:
      - description: The `balance.id` you want to get detailed information about.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                BalancesExamplePaginated:
                  $ref: '#/components/examples/BalancesExampleDetail'
              schema:
                $ref: '#/components/schemas/Balance'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Get a balance's details
      tags:
      - Balances
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl https://sandbox.belvo.com/api/balances/{id} \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Get a balance
            balance = client.Balances.get(id="balance-id")
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.balances.detail id: 'balance-id'
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.balances.detail('balanceId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
  /api/institutions/:
    get:
      description: "Get a paginated list of all the institutions currently supported\
        \ by Belvo. By default, we return up to 100 results per page."
      operationId: ListInstitutions
      parameters:
      - description: A page number within the paginated result set.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          format: int32
          type: integer
        style: form
      - description: "Indicates how many results to return per page. By default we\
          \ return 100 results per page. \n\nℹ️ The minimum number of results returned\
          \ per page is 1 and the maximum is 1000. If you enter a value greater than\
          \ 1000, our API will default to the maximum value (1000).\n"
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 100
          example: 100
          format: int32
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - allowReserved: true
        description: |-
          List of additional fields you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.
          ℹ️ **Note**: Although `filters` is an object, any filter you use is automatically serialized as a query string.
        explode: true
        in: query
        name: filters
        required: false
        schema:
          $ref: '#/components/schemas/institutionFilters'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstitutionsPaginatedResponse'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
      summary: List all institutions
      tags:
      - Institutions
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl https://sandbox.belvo.com/api/institutions/  \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from pprint import pprint
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # List institutions
            for institution in client.Institutions.list():
                pprint(institution)
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.institutions.list
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.institutions.list()
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
  /api/institutions/{id}/:
    get:
      description: Get the details of a specific institution.
      operationId: DetailInstitution
      parameters:
      - description: The `institution.id` you want to get detailed information about.
        explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "[0-9]+"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Get an institution's details
      tags:
      - Institutions
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl https://sandbox.belvo.com/api/institutions/{id}  \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from pprint import pprint
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Get a institution
            institution = client.Institutions.get(id="institution_id")
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.institutions.detail id: 'institution-id'
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.institutions.detail('institution_id')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
  /api/owners/:
    get:
      description: Get a paginated list of all existing owners in your Belvo account.
        We return up to 100 results per page.
      operationId: ListOwners
      parameters:
      - description: A page number within the paginated result set.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          format: int32
          type: integer
        style: form
      - description: "Indicates how many results to return per page. By default we\
          \ return 100 results per page. \n\nℹ️ The minimum number of results returned\
          \ per page is 1 and the maximum is 1000. If you enter a value greater than\
          \ 1000, our API will default to the maximum value (1000).\n"
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 100
          example: 100
          format: int32
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - allowReserved: true
        description: |-
          List of additional fields you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.
          ℹ️ **Note**: Although `filters` is an object, any filter you use is automatically serialized as a query string.
        explode: true
        in: query
        name: filters
        required: false
        schema:
          $ref: '#/components/schemas/ownerFilters'
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                OwnerBankingAccountPaginated:
                  $ref: '#/components/examples/OwnerBankingAccountPaginated'
                OwnerGigAccountPaginated:
                  $ref: '#/components/examples/OwnerGigAccountPaginated'
              schema:
                $ref: '#/components/schemas/OwnersPaginatedResponse'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
      summary: List all owners
      tags:
      - Owners
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl https://sandbox.belvo.com/api/owners/ \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from pprint import pprint
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # List owners
            for owner in client.Owners.list():
                pprint(owner)
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.owners.list
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.owners.list()
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
    patch:
      description: Used to resume an Owner retrieve session that was paused because
        an MFA token was required by the institution.
      operationId: PatchOwners
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                OwnerBankingAccount:
                  $ref: '#/components/examples/OwnerBankingAccount'
                OwnerGigAccount:
                  $ref: '#/components/examples/OwnerGigAccount'
              schema:
                items:
                  $ref: '#/components/schemas/Owner'
                type: array
          description: Ok (when `save_data=false`)
        "201":
          content:
            application/json:
              examples:
                OwnerBankingAccount:
                  $ref: '#/components/examples/OwnerBankingAccount'
                OwnerGigAccount:
                  $ref: '#/components/examples/OwnerGigAccount'
              schema:
                items:
                  $ref: '#/components/schemas/Owner'
                type: array
          description: Created (when `save_data=true`)
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegisterLink_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "408":
          content:
            application/json:
              schema:
                description: "Belvo has a limit regarding the time it takes to log\
                  \ in, retrieve account data, and log out. A timeout occurs when\
                  \ there is a very high amount of data and everything could not be\
                  \ obtained within the allotted time.\n  "
                items:
                  $ref: '#/components/schemas/RequestTimeoutError'
                title: Request Timeout
                type: array
          description: Request Timeout
        "428":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TokenRequiredResponse'
                type: array
          description: MFA Token Required
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Complete an owners request
      tags:
      - Owners
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl -X PATCH \
              https://sandbox.belvo.com/api/owners/ \
              -H 'Content-Type: application/json' \
              -H 'Host: sandbox.belvo.com' \
              -H 'cache-control: no-cache' \
              -d '{
                  "session": "",
                  "token": "",
                  "link": ""
              }' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Resume owners
            owners = client.Owners.resume(
              session="session-id",
              token="token",
              link="link_id"
            )
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.owners.resume(
              session: 'session-id',
              token: 'token',
              link: 'link-id',
            )
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.owners.resume('yourSessionId', 'yourOTPToken', 'linkId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-content-type: application/json
      x-accepts: application/json
    post:
      description: Retrieve owner information from a specific link.
      operationId: RetrieveOwners
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StandardRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                OwnerBankingAccount:
                  $ref: '#/components/examples/OwnerBankingAccount'
                OwnerGigAccount:
                  $ref: '#/components/examples/OwnerGigAccount'
              schema:
                items:
                  $ref: '#/components/schemas/Owner'
                type: array
          description: Ok (when `save_data=false`)
        "201":
          content:
            application/json:
              examples:
                OwnerBankingAccount:
                  $ref: '#/components/examples/OwnerBankingAccount'
                OwnerGigAccount:
                  $ref: '#/components/examples/OwnerGigAccount'
              schema:
                items:
                  $ref: '#/components/schemas/Owner'
                type: array
          description: Created (when `save_data=true`)
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegisterLink_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "408":
          content:
            application/json:
              schema:
                description: "Belvo has a limit regarding the time it takes to log\
                  \ in, retrieve account data, and log out. A timeout occurs when\
                  \ there is a very high amount of data and everything could not be\
                  \ obtained within the allotted time.\n  "
                items:
                  $ref: '#/components/schemas/RequestTimeoutError'
                title: Request Timeout
                type: array
          description: Request Timeout
        "428":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TokenRequiredResponse'
                type: array
          description: MFA Token Required
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Retrieve owners for a link
      tags:
      - Owners
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl -X POST \
              https://sandbox.belvo.com/api/owners/ \
              -H 'Content-Type: application/json' \
              -H 'Host: sandbox.belvo.com' \
              -H 'cache-control: no-cache' \
              -d '{
                "link": ""
            }' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Retrieve owners
            owners = client.Owners.create(
              link="link_id"
            )
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.owners.retrieve(link: 'link-id')
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.owners.retrieve('linkId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-content-type: application/json
      x-accepts: application/json
  /api/owners/{id}/:
    delete:
      description: Delete a specific owner from your Belvo account.
      operationId: DestroyOwner
      parameters:
      - description: The `owner.id` that you want to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Delete an owner
      tags:
      - Owners
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl -X DELETE \
              https://sandbox.belvo.com/api/owners/{id}/ \
              -H 'Host: sandbox.belvo.com' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Delete a owner
            client.Owners.delete("owner-id")
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.owners.delete id: 'owner-id'
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.owners.delete('ownerId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
    get:
      description: Get the details of a specific owner.
      operationId: DetailOwner
      parameters:
      - description: The `owner.id` you want to get detailed information about.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                OwnerBankingAccount:
                  $ref: '#/components/examples/OwnerBankingAccountDetail'
                OwnerGigAccount:
                  $ref: '#/components/examples/OwnerGigAccountDetail'
              schema:
                $ref: '#/components/schemas/Owner'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Get an owner's details
      tags:
      - Owners
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl https://sandbox.belvo.com/api/owners/{id} \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Get a owner
            owner = client.Owners.get(id="owner-id")
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.owners.detail id: 'owner-id'
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.owners.detail('ownerId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
  /api/invoices/:
    get:
      description: Get a paginated list of all existing invoices in your Belvo account.
        We return up to 100 results per page.
      operationId: ListInvoices
      parameters:
      - description: A page number within the paginated result set.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          format: int32
          type: integer
        style: form
      - description: "Indicates how many results to return per page. By default we\
          \ return 100 results per page. \n\nℹ️ The minimum number of results returned\
          \ per page is 1 and the maximum is 1000. If you enter a value greater than\
          \ 1000, our API will default to the maximum value (1000).\n"
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 100
          example: 100
          format: int32
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: |
          The `link.id` you want to filter by.

          ℹ️ We highly recommend adding the `link.id` filter in order to improve your performance.
        explode: true
        in: query
        name: link
        required: false
        schema:
          example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
          format: uuid
          type: string
        style: form
      - allowReserved: true
        description: |-
          List of additional fields you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.
          ℹ️ **Note**: Although `filters` is an object, any filter you use is automatically serialized as a query string.
        explode: true
        in: query
        name: filters
        required: false
        schema:
          $ref: '#/components/schemas/invoiceFilters'
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                InvoiceIngresso:
                  $ref: '#/components/examples/InvoiceIngresoPaginated'
                InvoicePago:
                  $ref: '#/components/examples/InvoicePagoPaginated'
                InvoiceNomina:
                  $ref: '#/components/examples/InvoiceNominaPaginated'
                InvoiceEgreso:
                  $ref: '#/components/examples/InvoiceEgresoPaginated'
                InvoiceTraslado:
                  $ref: '#/components/examples/InvoiceTrasladoPaginated'
              schema:
                $ref: '#/components/schemas/InvoicesResponsePaginatedResponse'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
      summary: List all invoices
      tags:
      - Invoices
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl https://sandbox.belvo.com/api/invoices/ \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from pprint import pprint
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # List Invoices
            for invoice in client.Invoices.list():
                pprint(invoice)
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.invoices.list
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.invoices.list()
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
              });
      x-accepts: application/json
    post:
      description: |
        Retrieve invoice information from a specific fiscal link.
        <div style="background-color:#f4f6f8; border-left: 6px solid #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px"> <strong>Info: </strong> You can ask for up to **one** year (365 days) of invoices per request. If you need invoices for more than one year, just make another request. </div>
      operationId: RetrieveInvoices
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoicesRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                InvoiceIngresso:
                  $ref: '#/components/examples/InvoiceIngreso'
                InvoicePago:
                  $ref: '#/components/examples/InvoicePago'
                InvoiceNomina:
                  $ref: '#/components/examples/InvoiceNomina'
                InvoiceEgreso:
                  $ref: '#/components/examples/InvoiceEgreso'
                InvoiceTraslado:
                  $ref: '#/components/examples/InvoiceTraslado'
              schema:
                items:
                  $ref: '#/components/schemas/InvoiceWithId'
                type: array
          description: Ok (when `save_data=false`)
        "201":
          content:
            application/json:
              examples:
                InvoiceIngresso:
                  $ref: '#/components/examples/InvoiceIngreso'
                InvoicePago:
                  $ref: '#/components/examples/InvoicePago'
                InvoiceNomina:
                  $ref: '#/components/examples/InvoiceNomina'
                InvoiceEgreso:
                  $ref: '#/components/examples/InvoiceEgreso'
                InvoiceTraslado:
                  $ref: '#/components/examples/InvoiceTraslado'
              schema:
                items:
                  $ref: '#/components/schemas/InvoiceWithId'
                type: array
          description: Created (when `save_data=true`)
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegisterLink_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "408":
          content:
            application/json:
              schema:
                description: "Belvo has a limit regarding the time it takes to log\
                  \ in, retrieve account data, and log out. A timeout occurs when\
                  \ there is a very high amount of data and everything could not be\
                  \ obtained within the allotted time.\n  "
                items:
                  $ref: '#/components/schemas/RequestTimeoutError'
                title: Request Timeout
                type: array
          description: Request Timeout
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Retrieve invoices for a link
      tags:
      - Invoices
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl -X POST \
              https://sandbox.belvo.com/api/invoices/ \
              -H 'Content-Type: application/json' \
              -H 'Host: sandbox.belvo.com' \
              -H 'cache-control: no-cache' \
              -d '{
                "link": "",
                "date_from": "YYYY-MM-DD",
                "date_to": "YYYY-MM-DD",
                "type": "OUTFLOW"
            }' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from pprint import pprint
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # List Invoices
            for invoice in client.Invoices.create('link-id', '2019-07-01', '2019-07-31', 'OUTFLOW'):
                pprint(invoice)
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.invoices.retrieve(
              link: 'link-id',
              date_from: '2019-07-01',
              date_to: '2019-07-31',
              type: 'OUTFLOW'
            )
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.invoices.retrieve('linkId', '2019-07-01', '2019-07-31', 'OUTFLOW')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
              });
      x-content-type: application/json
      x-accepts: application/json
  /api/invoices/{id}/:
    delete:
      description: Delete a specific invoice from your Belvo account.
      operationId: DestroyInvoice
      parameters:
      - description: The `invoice.id` that you want to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Delete an invoice
      tags:
      - Invoices
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl -X DELETE \
              https://sandbox.belvo.com/api/invoices/{id}/ \
              -H 'Host: sandbox.belvo.com' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from pprint import pprint
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Delete Invoice
            client.Invoices.delete('invoice-id')
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.invoices.delete id: 'invoice-id'
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.invoices.delete('invoiceId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
              });
      x-accepts: application/json
    get:
      description: Get the details of a specific invoice.
      operationId: DetailInvoice
      parameters:
      - description: The `invoice.id` you want to get detailed information about.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                InvoiceIngresso:
                  $ref: '#/components/examples/InvoiceIngresoDetail'
                InvoicePago:
                  $ref: '#/components/examples/InvoicePagoDetail'
                InvoiceNomina:
                  $ref: '#/components/examples/InvoiceNominaDetail'
                InvoiceEgreso:
                  $ref: '#/components/examples/InvoiceEgresoDetail'
                InvoiceTraslado:
                  $ref: '#/components/examples/InvoiceTrasladoDetail'
              schema:
                $ref: '#/components/schemas/InvoiceWithId'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Get an invoice's details
      tags:
      - Invoices
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl https://sandbox.belvo.com/api/invoices/{id} \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from pprint import pprint
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            invoice = client.Invoices.detail('invoice-id'):
            pprint(invoice)
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.invoices.detail id: 'invoice-id'
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.invoices.detail('invoiceId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
              });
      x-accepts: application/json
  /api/tax-returns/:
    get:
      description: "Get a paginated list of all existing tax returns in your Belvo\
        \ account. By default, we return up to 100 results per page. The results will\
        \ include a mix of both monthly and yearly tax returns."
      operationId: ListTaxReturns
      parameters:
      - description: A page number within the paginated result set.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          format: int32
          type: integer
        style: form
      - description: "Indicates how many results to return per page. By default we\
          \ return 100 results per page. \n\nℹ️ The minimum number of results returned\
          \ per page is 1 and the maximum is 1000. If you enter a value greater than\
          \ 1000, our API will default to the maximum value (1000).\n"
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 100
          example: 100
          format: int32
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: |
          The `link.id` you want to filter by.

          ℹ️ We highly recommend adding the `link.id` filter in order to improve your performance.
        explode: true
        in: query
        name: link
        required: false
        schema:
          example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
          format: uuid
          type: string
        style: form
      - allowReserved: true
        description: |-
          List of additional fields you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.
          ℹ️ **Note**: Although `filters` is an object, any filter you use is automatically serialized as a query string.
        explode: true
        in: query
        name: filters
        required: false
        schema:
          $ref: '#/components/schemas/taxReturnFilters'
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                TaxReturnPersonal:
                  $ref: '#/components/examples/TaxReturnPersonalListPaginated'
                TaxReturnPersonalMonthlyPFAE:
                  $ref: '#/components/examples/TaxReturnPersonalListMonthlyPaginatedPFAE'
                TaxReturnPersonalMonthlyPFAI:
                  $ref: '#/components/examples/TaxReturnPersonalListMonthlyPaginatedPFAI'
                TaxReturnBusiness:
                  $ref: '#/components/examples/TaxReturnBusinessListPaginated'
                TaxReturnBusinessMonthly:
                  $ref: '#/components/examples/TaxReturnBusinessListMonthlyPaginated'
              schema:
                $ref: '#/components/schemas/ListTaxReturns_200_response'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
      summary: List all tax returns
      tags:
      - Tax returns
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl https://sandbox.belvo.com/api/tax-returns/ \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from pprint import pprint
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # List tax returns
            for tax_return in client.TaxReturns.list()
              pprint(tax_return)
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.tax_returns.list
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.taxReturns.list()
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
    post:
      description: Retrieve tax return information for a specific fiscal link.
      operationId: RetrieveTaxReturns
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetrieveTaxReturns_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                TaxReturnPersonal:
                  $ref: '#/components/examples/TaxReturnPersonalList'
                TaxReturnPersonalMonthlyPFAE:
                  $ref: '#/components/examples/TaxReturnPersonalListMonthlyPFAE'
                TaxReturnPersonalMonthlyPFAI:
                  $ref: '#/components/examples/TaxReturnPersonalListMonthlyPFAI'
                TaxReturnBusiness:
                  $ref: '#/components/examples/TaxReturnBusinessList'
                TaxReturnBusinessMonthly:
                  $ref: '#/components/examples/TaxReturnBusinessListMonthly'
              schema:
                items:
                  $ref: '#/components/schemas/RetrieveTaxReturns_200_response_inner'
                type: array
          description: Ok (when `save_data=false`)
        "201":
          content:
            application/json:
              examples:
                TaxReturnPersonal:
                  $ref: '#/components/examples/TaxReturnPersonalList'
                TaxReturnPersonalMonthlyPFAE:
                  $ref: '#/components/examples/TaxReturnPersonalListMonthlyPFAE'
                TaxReturnPersonalMonthlyPFAI:
                  $ref: '#/components/examples/TaxReturnPersonalListMonthlyPFAI'
                TaxReturnBusiness:
                  $ref: '#/components/examples/TaxReturnBusinessList'
                TaxReturnBusinessMonthly:
                  $ref: '#/components/examples/TaxReturnBusinessListMonthly'
              schema:
                items:
                  $ref: '#/components/schemas/RetrieveTaxReturns_200_response_inner'
                type: array
          description: Created (when `save_data=true`)
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegisterLink_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutError'
          description: Request Timeout
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Retrieve tax returns for a link
      tags:
      - Tax returns
      x-readme:
        code-samples:
        - language: cURL
          code: |-
            ### Yearly Tax Returns
            curl -X POST \
              https://sandbox.belvo.com/api/tax-returns/ \
              -H 'Content-Type: application/json' \
              -H 'Host: sandbox.belvo.com' \
              -H 'cache-control: no-cache' \
              -d '{
                "link": "",
                "year_from": YYYY,
                "year_to": YYYY,
                "attach_pdf": false
            }' \
              -u [Secret Key ID]:[Secret Key PASSWORD]

            ### Monthly Tax Returns
            curl -X POST \
              https://sandbox.belvo.com/api/tax-returns/ \
              -H 'Content-Type: application/json' \
              -H 'Host: sandbox.belvo.com' \
              -H 'cache-control: no-cache' \
              -d '{
                "link": "",
                "date_from": "2019-01-01",
                "date_to": "2019-04-01",
                "type": "monthly",
                "attach_pdf": false
            }' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |-
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Yearly Tax Returns
            tax_returns = client.TaxReturns.create(
              link="link_id",
              year_from="2019",
              year_to="2020",
              attach_pdf=True
            )

            # Monthly Tax Returns
            tax_returns = client.TaxReturns.create(
              link="link_id",
              date_from="2019-01-01",
              date_to="2019-04-01",
              attach_pdf=True,
              type_="monthly"
            )
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            # Yearly Tax Returns
            sandbox.tax_returns.retrieve(
              link: 'link-id',
              year_from: "2019",
              year_to: "2020"
            )

            # Monthly Tax Returns
            sandbox.tax_returns.retrieve(
              link: 'some-link-uuid',
              options: {
                type: TaxReturnType::MONTHLY,
                date_from: '2019-01-01',
                date_to: '2019-04-01',
              }
                  )
        - language: node
          name: Belvo Node SDK
          code: |-
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            // Yearly Tax Returns
            client.connect()
              .then(function () {
                client.taxReturns.retrieve('linkID', "2019", "2020")
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });

            // Monthly Tax Returns

            client.connect()
              .then(function () {
                client.taxReturns.retrieve('linkID', "2019-01-01", "2019-04-01", {type: 'monthly'})
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-content-type: application/json
      x-accepts: application/json
  /api/tax-returns/{id}/:
    delete:
      description: Delete a specific tax return from your Belvo account.
      operationId: DestroyTaxReturn
      parameters:
      - description: The ID of the tax return you want to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Delete a tax return
      tags:
      - Tax returns
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl -X DELETE \
              https://sandbox.belvo.com/api/tax-returns/{id}/ \
              -H 'Host: sandbox.belvo.com' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Delete a tax return
            client.TaxReturns.delete("tax-return-id")
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.tax_returns.delete id: 'tax-return-id'
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.taxReturns.delete('taxReturnId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
    get:
      description: Get the details of a specific tax return.
      operationId: DetailTaxReturn
      parameters:
      - description: The `tax-return.id` you want to get detailed information about.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                TaxReturnPersonal:
                  $ref: '#/components/examples/TaxReturnPersonalListDetail'
                TaxReturnPersonalMonthlyPFAE:
                  $ref: '#/components/examples/TaxReturnPersonalListMonthlyPFAEDetail'
                TaxReturnPersonalMonthlyPFAI:
                  $ref: '#/components/examples/TaxReturnPersonalListMonthlyPFAIDetail'
                TaxReturnBusiness:
                  $ref: '#/components/examples/TaxReturnBusinessListDetail'
                TaxReturnBusinessMonthly:
                  $ref: '#/components/examples/TaxReturnBusinessListMonthlyDetail'
              schema:
                $ref: '#/components/schemas/RetrieveTaxReturns_200_response_inner'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Get a tax return's details
      tags:
      - Tax returns
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl https://sandbox.belvo.com/api/tax-returns/{id} \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Get a tax return
            tax_return = client.TaxReturns.get(id="tax-return-id")
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.tax_returns.detail id: 'tax-return-id'
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.taxReturns.detail('taxReturnId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
  /api/tax-status/:
    get:
      description: "Get a paginated list of all existing tax status in your Belvo\
        \ account. By default, we return up to 100 results per page."
      operationId: ListTaxStatus
      parameters:
      - description: A page number within the paginated result set.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          format: int32
          type: integer
        style: form
      - description: "Indicates how many results to return per page. By default we\
          \ return 100 results per page. \n\nℹ️ The minimum number of results returned\
          \ per page is 1 and the maximum is 1000. If you enter a value greater than\
          \ 1000, our API will default to the maximum value (1000).\n"
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 100
          example: 100
          format: int32
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: |
          The `link.id` you want to filter by.

          ℹ️ We highly recommend adding the `link.id` filter in order to improve your performance.
        explode: true
        in: query
        name: link
        required: false
        schema:
          example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
          format: uuid
          type: string
        style: form
      - allowReserved: true
        description: |-
          List of additional fields you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.
          ℹ️ **Note**: Although `filters` is an object, any filter you use is automatically serialized as a query string.
        explode: true
        in: query
        name: filters
        required: false
        schema:
          $ref: '#/components/schemas/taxStatusFilters'
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                TaxStatusPersonalListPaginated:
                  $ref: '#/components/examples/TaxStatusPersonalListPaginated'
                TaxStatusBusinessListPaginated:
                  $ref: '#/components/examples/TaxStatusBusinessListPaginated'
              schema:
                $ref: '#/components/schemas/TaxStatusPaginatedResponse'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
      summary: List all tax statuses
      tags:
      - Tax status
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl https://sandbox.belvo.com/api/tax-status/ \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # List tax status
            client.TaxStatus.list()
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.tax_status.list
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.taxStatus.list()
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
    post:
      description: Retrieve tax status information for a specific fiscal link.
      operationId: RetrieveTaxStatus
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxStatusRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                TaxStatusPersonal:
                  $ref: '#/components/examples/TaxStatusPersonalList'
                TaxStatusBusiness:
                  $ref: '#/components/examples/TaxStatusBusinessList'
              schema:
                $ref: '#/components/schemas/TaxStatus'
          description: Ok (when `save_data=false`)
        "201":
          content:
            application/json:
              examples:
                TaxStatusPersonal:
                  $ref: '#/components/examples/TaxStatusPersonalList'
                TaxStatusBusiness:
                  $ref: '#/components/examples/TaxStatusBusinessList'
              schema:
                $ref: '#/components/schemas/TaxStatus'
          description: Created (when `save_data=true`)
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegisterLink_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "408":
          content:
            application/json:
              schema:
                description: "Belvo has a limit regarding the time it takes to log\
                  \ in, retrieve account data, and log out. A timeout occurs when\
                  \ there is a very high amount of data and everything could not be\
                  \ obtained within the allotted time.\n  "
                items:
                  $ref: '#/components/schemas/RequestTimeoutError'
                title: Request Timeout
                type: array
          description: Request Timeout
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Retrieve tax statuses for a link
      tags:
      - Tax status
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl -X POST \
              https://sandbox.belvo.com/api/tax-status/ \
              -H 'Content-Type: application/json' \
              -H 'Host: sandbox.belvo.com' \
              -H 'cache-control: no-cache' \
              -d '{
                "link": "link-id",
                "attach_pdf": false
            }' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Retrieve tax status
            client.TaxStatus.create('link-id')
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.tax_status.retrieve(
              link: 'link-id'
            )
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.taxStatus.retrieve('linkID')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-content-type: application/json
      x-accepts: application/json
  /api/tax-status/{id}/:
    delete:
      description: Delete a specific tax status from your Belvo account.
      operationId: DestroyTaxStatus
      parameters:
      - description: the `tax-status.id` that you want to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Delete a tax status
      tags:
      - Tax status
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl -X DELETE \
              https://sandbox.belvo.com/api/tax-status/{id}/ \
              -H 'Host: sandbox.belvo.com' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Delete tax status
            client.TaxStatus.delete('tax-status-id')
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.tax_status.delete id: 'tax-status-id'
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.taxStatus.delete('taxStatusId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
    get:
      description: Get the details of a specific tax status.
      operationId: DetailTaxStatus
      parameters:
      - description: The `tax-status.id` you want to get detailed information about.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                TaxStatusPersonal:
                  $ref: '#/components/examples/TaxStatusPersonalList'
                TaxStatusBusiness:
                  $ref: '#/components/examples/TaxStatusBusinessList'
              schema:
                $ref: '#/components/schemas/TaxStatus'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Get a tax status's details
      tags:
      - Tax status
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl https://sandbox.belvo.com/api/tax-status/{id} \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Get tax status
            client.TaxStatus.get('tax-status-id')
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.tax_status.detail id: 'tax-status-id'
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.taxStatus.detail('taxStatusId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
  /api/tax-compliance-status/:
    get:
      description: "Get a paginated list of all existing Tax compliance statuses in\
        \ your Belvo account. By default, we return up to 100 results per page."
      operationId: ListTaxComplianceStatus
      parameters:
      - description: A page number within the paginated result set.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          format: int32
          type: integer
        style: form
      - description: "Indicates how many results to return per page. By default we\
          \ return 100 results per page. \n\nℹ️ The minimum number of results returned\
          \ per page is 1 and the maximum is 1000. If you enter a value greater than\
          \ 1000, our API will default to the maximum value (1000).\n"
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 100
          example: 100
          format: int32
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: |
          The `link.id` you want to filter by.

          ℹ️ We highly recommend adding the `link.id` filter in order to improve your performance.
        explode: true
        in: query
        name: link
        required: false
        schema:
          example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
          format: uuid
          type: string
        style: form
      - allowReserved: true
        description: |-
          List of additional fields you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.
          ℹ️ **Note**: Although `filters` is an object, any filter you use is automatically serialized as a query string.
        explode: true
        in: query
        name: filters
        required: false
        schema:
          $ref: '#/components/schemas/taxComplianceStatusFilters'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxComplianceStatusPaginatedResponse'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
      summary: List all tax compliance statuses
      tags:
      - Tax compliance status
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl https://sandbox.belvo.com/api/tax-compliance-status/ \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # List Tax compliance status
            client.TaxComplianceStatus.list()
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            client = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            client.tax_compliance_status.list
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.taxComplianceStatus.list()
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
    post:
      description: Retrieve the Tax compliance status information for a specific fiscal
        link.
      operationId: RetrieveTaxComplianceStatus
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxComplianceStatusRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxComplianceStatus'
          description: Ok (when `save_data=false`)
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxComplianceStatus'
          description: Created (when `save_data=true`)
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegisterLink_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "408":
          content:
            application/json:
              schema:
                description: "Belvo has a limit regarding the time it takes to log\
                  \ in, retrieve account data, and log out. A timeout occurs when\
                  \ there is a very high amount of data and everything could not be\
                  \ obtained within the allotted time.\n  "
                items:
                  $ref: '#/components/schemas/RequestTimeoutError'
                title: Request Timeout
                type: array
          description: Request Timeout
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Retrieve tax compliance statuses for a link
      tags:
      - Tax compliance status
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl -X POST \
              https://sandbox.belvo.com/api/tax-compliance-status/ \
              -H 'Content-Type: application/json' \
              -H 'Host: sandbox.belvo.com' \
              -H 'cache-control: no-cache' \
              -d '{
                "link": "link-id",
                "attach_pdf": false
            }' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Retrieve Tax compliance status
            client.TaxComplianceStatus.create('link-id')
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            client = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            client.tax_compliance_status.retrieve(
              link: 'link-id'
            )
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.taxComplianceStatus.retrieve('linkID')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-content-type: application/json
      x-accepts: application/json
  /api/tax-compliance-status/{id}/:
    delete:
      description: Delete a specific Tax compliance status from your Belvo account.
      operationId: DestroyTaxComplianceStatus
      parameters:
      - description: The `tax-compliance-status.id` that you want to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Delete a tax compliance status
      tags:
      - Tax compliance status
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl -X DELETE \
              https://sandbox.belvo.com/api/tax-compliance-status/{id}/ \
              -H 'Host: sandbox.belvo.com' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Delete Tax compliance status
            client.TaxComplianceStatus.delete('tax-compliance-status-id')
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            client = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            client.tax_compliance_status.delete id: 'tax-compliance-status-id'
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.taxComplianceStatus.delete('taxComplianceStatusId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
    get:
      description: Get the details of a specific Tax compliance status.
      operationId: DetailTaxComplianceStatus
      parameters:
      - description: The `tax-compliance-status.id` you want to get detailed information
          about.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxComplianceStatus'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Get a tax compliance status's details
      tags:
      - Tax compliance status
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl https://sandbox.belvo.com/api/tax-compliance-status/{id} \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          name: Belvo Python SDK
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Get Tax compliance status
            client.TaxComplianceStatus.get('tax-compliance-status-id')
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            client = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.tax_status.detail id: 'tax-compliance-status-id'
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.taxComplianceStatus.detail('taxComplianceStatusId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
  /api/incomes/:
    get:
      description: "Get a paginated list of all incomes in your Belvo account. By\
        \ default, we return up to 100 results per page."
      operationId: ListIncomes
      parameters:
      - description: A page number within the paginated result set.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          format: int32
          type: integer
        style: form
      - description: "Indicates how many results to return per page. By default we\
          \ return 100 results per page. \n\nℹ️ The minimum number of results returned\
          \ per page is 1 and the maximum is 1000. If you enter a value greater than\
          \ 1000, our API will default to the maximum value (1000).\n"
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 100
          example: 100
          format: int32
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: |
          The `account.id` you want to filter by.

          ℹ️ We highly recommend adding the `account.id` filter in order to improve your performance.
        explode: true
        in: query
        name: account
        required: false
        schema:
          example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
          format: uuid
          type: string
        style: form
      - allowReserved: true
        description: |-
          List of additional fields you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.
          ℹ️ **Note**: Although `filters` is an object, any filter you use is automatically serialized as a query string.
        explode: true
        in: query
        name: filters
        required: false
        schema:
          $ref: '#/components/schemas/incomeFilters'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomesPaginatedResponse'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
      summary: List all incomes
      tags:
      - Incomes
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl https://api.belvo.com/api/incomes/ \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from pprint import pprint
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "https://api.belvo.com")

            # List incomes
            for income in client.Incomes.list():
                pprint(income)
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            client = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'https://api.belvo.com'
            )

            client.incomes.list
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'https://api.belvo.com'
            );

            client.connect()
              .then(function () {
                client.incomes.list()
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
    patch:
      description: Used to resume an Income retrieve session that was paused because
        an MFA token was required by the institution.
      operationId: PatchIncomes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Income'
                type: array
          description: Ok (when `save_data=false`)
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Income'
                type: array
          description: Created (when `save_data=true`)
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegisterLink_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "408":
          content:
            application/json:
              schema:
                description: "Belvo has a limit regarding the time it takes to log\
                  \ in, retrieve account data, and log out. A timeout occurs when\
                  \ there is a very high amount of data and everything could not be\
                  \ obtained within the allotted time.\n  "
                items:
                  $ref: '#/components/schemas/RequestTimeoutError'
                title: Request Timeout
                type: array
          description: Request Timeout
        "428":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TokenRequiredResponse'
                type: array
          description: MFA Token Required
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Complete an incomes request
      tags:
      - Incomes
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl -X PATCH \
              https://api.belvo.com/api/incomes/ \
              -H 'Content-Type: application/json' \
              -H 'Host: api.belvo.com' \
              -H 'cache-control: no-cache' \
              -d '{
                  "session": "",
                  "token": "",
                  "link": ""
              }' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "https://api.belvo.com")

            # Resume incomes
            incomes = client.Incomes.resume(
              session="session_id",
              token="token",
              link="link_id"
            )
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            client = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'https://api.belvo.com'
            )

            client.incomes.resume(
              session: 'session_id',
              token: 'token',
              link: 'link_id'
            )
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'https://api.belvo.com'
            );

            client.connect()
              .then(function () {
                client.incomes.resume('sessionId', 'token', 'linkId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-content-type: application/json
      x-accepts: application/json
    post:
      description: "Retrieve income insights for <b>checking and savings accounts</b>\
        \ from a specific link. You can receive insights for a period of up to 365\
        \ days, depending on the transaction history available for each [bank](https://developers.belvo.com/docs/institution)."
      operationId: RetrieveIncome
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncomesRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Income'
                type: array
          description: Ok (when `save_data=false`)
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Income'
                type: array
          description: Created (when `save_data=true`)
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RetrieveIncome_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "408":
          content:
            application/json:
              schema:
                description: "Belvo has a limit regarding the time it takes to log\
                  \ in, retrieve account data, and log out. A timeout occurs when\
                  \ there is a very high amount of data and everything could not be\
                  \ obtained within the allotted time.\n  "
                items:
                  $ref: '#/components/schemas/RequestTimeoutError'
                title: Request Timeout
                type: array
          description: Request Timeout
        "428":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TokenRequiredResponse'
                type: array
          description: MFA Token Required
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Retrieve incomes for a link
      tags:
      - Incomes
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl -X POST \
              https://api.belvo.com/api/incomes/ \
              -H 'Content-Type: application/json' \
              -H 'Host: api.belvo.com' \
              -H 'cache-control: no-cache' \
              -d '{
                "link": ""
            }' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "https://api.belvo.com")

            # Retrieve incomes
            incomes = client.Incomes.create(
              link="link_id"
            )
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            client = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'https://api.belvo.com'
            )

            client.incomes.retrieve link: 'link-id'
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'https://api.belvo.com'
            );

            client.connect()
              .then(function () {
                client.incomes.retrieve('link-id')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-content-type: application/json
      x-accepts: application/json
  /api/incomes/{id}/:
    delete:
      description: Delete a specific income from your Belvo account.
      operationId: DestroyIncomes
      parameters:
      - description: the `income.id` that you want to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Delete an income
      tags:
      - Incomes
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl -X DELETE \
              https://api.belvo.com/api/incomes/{id}/ \
              -H 'Host: api.belvo.com' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "https://api.belvo.com")

            # Delete an income
            client.Incomes.delete("income-id")
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            client = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'https://api.belvo.com'
            )

            client.incomes.delete id: 'income-id'
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'https://api.belvo.com'
            );

            client.connect()
              .then(function () {
                client.incomes.delete('incomeId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
    get:
      description: Get the details of a specific income.
      operationId: DetailIncome
      parameters:
      - description: The `income.id` you want to get detailed information about.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Income'
                type: array
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Get an income's details
      tags:
      - Incomes
      x-readme:
        code-samples:
        - language: cURL
          code: |
            curl https://api.belvo.com/api/incomes/{id} \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - language: python
          code: |
            # check our python-client library on github
            # https://github.com/belvo-finance/belvo-python
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "https://api.belvo.com")

            # Get an income
            income = client.Incomes.get(id="income-id")
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # check our Ruby gem on github
            # https://github.com/belvo-finance/belvo-ruby
            require 'belvo'

            client = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'https://api.belvo.com'
            )

            client.incomes.detail id: 'income-id'
        - language: node
          name: Belvo Node SDK
          code: |
            // check our node package on github
            // https://github.com/belvo-finance/belvo-js

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'https://api.belvo.com'
            );

            client.connect()
              .then(function () {
                client.incomes.detail('incomeId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
  /api/recurring-expenses/:
    get:
      description: "Get a paginated list of all recurring expenses in your Belvo account.\
        \ By default, we return up to 100 results per page."
      operationId: ListRecurringExpenses
      parameters:
      - description: A page number within the paginated result set.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          format: int32
          type: integer
        style: form
      - description: "Indicates how many results to return per page. By default we\
          \ return 100 results per page. \n\nℹ️ The minimum number of results returned\
          \ per page is 1 and the maximum is 1000. If you enter a value greater than\
          \ 1000, our API will default to the maximum value (1000).\n"
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 100
          example: 100
          format: int32
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: |
          The `link.id` you want to filter by.

          ℹ️ We highly recommend adding either the `link.id` or the `account.id` filters in order to improve your performance.
        explode: true
        in: query
        name: link
        required: false
        schema:
          example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
          format: uuid
          type: string
        style: form
      - description: |
          The `account.id` you want to filter by.

          ℹ️ We highly recommend adding either the `link.id` or the `account.id` filters in order to improve your performance.
        explode: true
        in: query
        name: account
        required: false
        schema:
          example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
          format: uuid
          type: string
        style: form
      - allowReserved: true
        description: |-
          List of additional fields you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.
          ℹ️ **Note**: Although `filters` is an object, any filter you use is automatically serialized as a query string.
        explode: true
        in: query
        name: filters
        required: false
        schema:
          $ref: '#/components/schemas/recurringExpenseFilters'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringExpensesPaginatedResponse'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
      summary: List all recurring expenses
      tags:
      - Recurring Expenses
      x-readme:
        code-samples:
        - language: python
          name: Belvo Python SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # List Recurring Expenses
            for income in client.RecurringExpenses.list():
            pprint(income)
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            client.recurring_expenses.list
        - language: node
          name: Belvo Node SDK
          code: |
            // For more information about our SDKs go to:
            // https://developers.belvo.com/docs/belvo-sdks

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.recurringExpenses.list()
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
    patch:
      description: Used to resume an Recurring Expenses retrieve session that was
        paused because an MFA token was required by the institution.
      operationId: PatchRecurringExpenses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RecurringExpenses'
                type: array
          description: Ok (when save_data=false)
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RecurringExpenses'
                type: array
          description: Created (when save_data=true)
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegisterLink_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "408":
          content:
            application/json:
              schema:
                description: "Belvo has a limit regarding the time it takes to log\
                  \ in, retrieve account data, and log out. A timeout occurs when\
                  \ there is a very high amount of data and everything could not be\
                  \ obtained within the allotted time.\n  "
                items:
                  $ref: '#/components/schemas/RequestTimeoutError'
                title: Request Timeout
                type: array
          description: Request Timeout
        "428":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TokenRequiredResponse'
                type: array
          description: MFA Token Required
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Complete a recurring expenses request
      tags:
      - Recurring Expenses
      x-readme:
        code-samples:
        - language: python
          name: Belvo Python SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Resume Recurring Expenses
            incomes = client.RecurringExpenses.resume(
              session="session_id",
              token="token",
              link="link_id"
            )
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            require 'belvo'

            client = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            client.recurring_expenses.resume(
              session: 'session_id',
              token: 'token',
              link: 'link_id'
            )
        - language: node
          name: Belvo Node SDK
          code: |
            // For more information about our SDKs go to:
            // https://developers.belvo.com/docs/belvo-sdks

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.recurringExpenses.resume('sessionId', 'token', 'linkId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-content-type: application/json
      x-accepts: application/json
    post:
      description: "Retrieve recurring expense insights for <b>checking and savings\
        \ accounts</b> from a specific link. You can receive insights for a period\
        \ of up to 365 days, depending on the transaction history available for each\
        \ [bank](https://developers.belvo.com/docs/institution)."
      operationId: RetrieveRecurringExpenses
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StandardRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RecurringExpenses'
                type: array
          description: Ok (when save_data=false)
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RecurringExpenses'
                type: array
          description: Created (when save_data=true)
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RetrieveIncome_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "408":
          content:
            application/json:
              schema:
                description: "Belvo has a limit regarding the time it takes to log\
                  \ in, retrieve account data, and log out. A timeout occurs when\
                  \ there is a very high amount of data and everything could not be\
                  \ obtained within the allotted time.\n  "
                items:
                  $ref: '#/components/schemas/RequestTimeoutError'
                title: Request Timeout
                type: array
          description: Request Timeout
        "428":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TokenRequiredResponse'
                type: array
          description: MFA Token Required
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Retrieve recurring expenses for a link
      tags:
      - Recurring Expenses
      x-readme:
        code-samples:
        - language: python
          name: Belvo Python SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Retrieve Recurring Expense
            client.RecurringExpenses.create('link-id')
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            client.recurring_expenses.retrieve(
              link: 'link-id'
            )
        - language: node
          name: Belvo Node SDK
          code: |
            // For more information about our SDKs go to:
            // https://developers.belvo.com/docs/belvo-sdks

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.recurringExpenses.retrieve('linkID')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-content-type: application/json
      x-accepts: application/json
  /api/recurring-expenses/{id}/:
    delete:
      description: Delete a specific recurring expense from your Belvo account.
      operationId: DestroyRecurringExpense
      parameters:
      - description: The `recurring-expenses.id` that you want to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Delete a recurring expense
      tags:
      - Recurring Expenses
      x-readme:
        code-samples:
        - language: python
          name: Belvo Python SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Delete Tax compliance status
            client.RecurringExpenses.delete('recurring-expenses.id')
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.recurring_expenses.delete id: 'recurring-expenses.id'
        - language: node
          name: Belvo Node SDK
          code: |
            // For more information about our SDKs go to:
            // https://developers.belvo.com/docs/belvo-sdks

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.recurringExpenses.delete('recurring-expenses.id')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
    get:
      description: Get the details of a specific recurring expense.
      operationId: DetailRecurringExpense
      parameters:
      - description: The `recurring-expenses.id` you want to get detailed information
          about.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RecurringExpenses'
                type: array
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Get a recurring expense's details
      tags:
      - Recurring Expenses
      x-readme:
        code-samples:
        - language: python
          name: Belvo Python SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Get Recurring Expense
            client.RecurringExpenses.get('recurring-expenses.id')
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.recurring_expenses.detail id: 'recurring-expenses.id'
        - language: node
          name: Belvo Node SDK
          code: |
            // For more information about our SDKs go to:
            // https://developers.belvo.com/docs/belvo-sdks

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.recurringExpenses.detail('recurring-expenses.id')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
  /investments/portfolios/:
    get:
      description: "Get a paginated list of all the existing portfolios (and their\
        \ instruments) in your Belvo account. By default, we return up to 100 results\
        \ per page."
      operationId: ListPortfolio
      parameters:
      - description: A page number within the paginated result set.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          format: int32
          type: integer
        style: form
      - description: "Indicates how many results to return per page. By default we\
          \ return 100 results per page. \n\nℹ️ The minimum number of results returned\
          \ per page is 1 and the maximum is 1000. If you enter a value greater than\
          \ 1000, our API will default to the maximum value (1000).\n"
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 100
          example: 100
          format: int32
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: |
          The `link.id` you want to filter by.

          ℹ️ We highly recommend adding the `link.id` filter in order to improve your performance.
        explode: true
        in: query
        name: link
        required: false
        schema:
          example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
          format: uuid
          type: string
        style: form
      - allowReserved: true
        description: |-
          List of additional fields you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.
          ℹ️ **Note**: Although `filters` is an object, any filter you use is automatically serialized as a query string.
        explode: true
        in: query
        name: filters
        required: false
        schema:
          $ref: '#/components/schemas/investmentPortfolioFilters'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentsPortfoliosPaginatedResponse'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
      summary: List all portfolios
      tags:
      - Investment Portfolios (BETA)
      x-readme:
        code-samples:
        - language: python
          name: Belvo Python SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # List Investment Portfolios
            for portfolio in client.InvestmentsPortfolios.list():
            pprint(portfolio)
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            client.investments_portfolio.list
        - language: node
          name: Belvo Node SDK
          code: |
            // For more information about our SDKs go to:
            // https://developers.belvo.com/docs/belvo-sdks

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.investmentsPortfolios.list()
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
    patch:
      description: Used to resume a portfolio retrieve session that was paused because
        an MFA token was required by the institution.
      operationId: PatchPortfolio
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBodyWithoutSaveData'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentsPortfolio'
          description: Ok (when `save_data=false`)
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentsPortfolio'
          description: Created (when `save_data=true`)
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegisterLink_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "428":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TokenRequiredResponse'
                type: array
          description: MFA Token Required
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Complete a portfolios request
      tags:
      - Investment Portfolios (BETA)
      x-readme:
        code-samples:
        - language: python
          name: Belvo Python SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Resume Investment Portfolios
            investments_portfolios = client.InvestmentsPortfolios.resume(
              session="session_id",
              token="token",
              link="link_id"
            )
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            require 'belvo'

            client = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            client.investments_portfolio.resume(
              session: 'session_id',
              token: 'token',
              link: 'link_id'
            )
        - language: node
          name: Belvo Node SDK
          code: |
            // For more information about our SDKs go to:
            // https://developers.belvo.com/docs/belvo-sdks

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.investmentsPortfolios.resume('sessionId', 'token', 'linkId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-content-type: application/json
      x-accepts: application/json
    post:
      description: Retrieve all portfolios for an existing link.
      operationId: RetrievePortfolio
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StandardRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentsPortfolio'
          description: Ok (when `save_data=false`)
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentsPortfolio'
          description: Created (when `save_data=true`)
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegisterLink_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "428":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TokenRequiredResponse'
                type: array
          description: MFA Token Required
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Retrieve portfolios for a link
      tags:
      - Investment Portfolios (BETA)
      x-readme:
        code-samples:
        - language: python
          name: Belvo Python SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Retrieve Investment Portfolios
            client.InvestmentsPortfolios.create('link-id')
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            client.investments_portfolio.retrieve(
              link: 'link-id'
            )
        - language: node
          name: Belvo Node SDK
          code: |
            // For more information about our SDKs go to:
            // https://developers.belvo.com/docs/belvo-sdks

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.investmentsPortfolios.retrieve('linkID')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-content-type: application/json
      x-accepts: application/json
  /investments/portfolios/{id}/:
    delete:
      description: "Delete a specific investment portfolio and all associated instruments,\
        \ transactions, and owners from your Belvo account."
      operationId: DestroyPortfolio
      parameters:
      - description: The `portfolio.id` that you want to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Delete a portfolio
      tags:
      - Investment Portfolios (BETA)
      x-readme:
        code-samples:
        - language: python
          name: Belvo Python SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Delete Investment Portfolio
            client.InvestmentsPortfolios.delete('investment-portfolio.id')
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.investments_portfolio.delete id: 'investment-portfolio.id'
        - language: node
          name: Belvo Node SDK
          code: |
            // For more information about our SDKs go to:
            // https://developers.belvo.com/docs/belvo-sdks

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.investmentsPortfolios.delete('investment-portfolio.id')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
    get:
      description: Get the details of a specific portfolio.
      operationId: DetailPortfolio
      parameters:
      - description: The `portfolio.id` you want to get detailed information about.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentsPortfolio'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Get a portfolio's details
      tags:
      - Investment Portfolios (BETA)
      x-readme:
        code-samples:
        - language: python
          name: Belvo Python SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Get Investment Portfolio
            client.InvestmentsPortfolios.get('investments-portfolios.id')
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.investments_portfolio.detail id: 'investments-portfolios.id'
        - language: node
          name: Belvo Node SDK
          code: |
            // For more information about our SDKs go to:
            // https://developers.belvo.com/docs/belvo-sdks

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.investmentsPortfolios.detail('investments-portfolios.id')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
  /investments/transactions/:
    get:
      description: "Get a paginated list of all the existing transactions for an instrument\
        \ in your Belvo account. By default, we return up to 100 results per page."
      operationId: ListInvestmentTransactions
      parameters:
      - description: A page number within the paginated result set.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          format: int32
          type: integer
        style: form
      - description: "Indicates how many results to return per page. By default we\
          \ return 100 results per page. \n\nℹ️ The minimum number of results returned\
          \ per page is 1 and the maximum is 1000. If you enter a value greater than\
          \ 1000, our API will default to the maximum value (1000).\n"
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 100
          example: 100
          format: int32
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: |
          The `link.id` you want to filter by.

          ℹ️ We highly recommend adding either the `link.id` or the `portfolio.id` filters in order to improve your performance.
        explode: true
        in: query
        name: link
        required: false
        schema:
          example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
          format: uuid
          type: string
        style: form
      - description: |
          The `portfolio.id` you want to filter by.

          ℹ️ We highly recommend adding either the `link.id` or the `portfolio.id` filters in order to improve your performance.
        explode: true
        in: query
        name: portfolio
        required: false
        schema:
          example: d979df3a-5d0f-4cc9-9bd4-b75c28b45963
          format: uuid
          type: string
        style: form
      - allowReserved: true
        description: |-
          List of additional fields you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.
          ℹ️ **Note**: Although `filters` is an object, any filter you use is automatically serialized as a query string.
        explode: true
        in: query
        name: filters
        required: false
        schema:
          $ref: '#/components/schemas/investmentTransactionFilters'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentsTransactionsPaginatedResponse'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
      summary: List all investment transactions
      tags:
      - Investment Transactions (BETA)
      x-readme:
        code-samples:
        - language: python
          name: Belvo Python SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # List Investment Transactions
            for transaction in client.InvestmentsTransactions.list():
            pprint(transaction)
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            client.investments_transaction.list
        - language: node
          name: Belvo Node SDK
          code: |
            // For more information about our SDKs go to:
            // https://developers.belvo.com/docs/belvo-sdks

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.investmentsTransactions.list()
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
    patch:
      description: Used to resume a Investment retrieve session that was paused because
        an MFA token was required by the institution.
      operationId: PatchInvestmentsTransactions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBodyWithoutSaveData'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentsInstrumentTransaction'
          description: Ok (when `save_data=false`)
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentsInstrumentTransaction'
          description: Created (when `save_data=true`)
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegisterLink_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "428":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TokenRequiredResponse'
                type: array
          description: MFA Token Required
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Complete a investment transactions request
      tags:
      - Investment Transactions (BETA)
      x-readme:
        code-samples:
        - language: python
          name: Belvo Python SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Resume Investment Transactions
            investments_transactions = client.InvestmentsTransactions.resume(
              session="session_id",
              token="token",
              link="link_id"
            )
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            require 'belvo'

            client = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            client.investments_transaction.resume(
              session: 'session_id',
              token: 'token',
              link: 'link_id'
            )
        - language: node
          name: Belvo Node SDK
          code: |
            // For more information about our SDKs go to:
            // https://developers.belvo.com/docs/belvo-sdks

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.investmentsTransactions.resume('sessionId', 'token', 'linkId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-content-type: application/json
      x-accepts: application/json
    post:
      description: Retrieve all instrument transactions for an existing link.
      operationId: RetrieveInstrumentTransaction
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstrumentTransactionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentsInstrumentTransaction'
          description: Ok (when `save_data=false`)
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentsInstrumentTransaction'
          description: Created (when `save_data=true`)
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegisterLink_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "428":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TokenRequiredResponse'
                type: array
          description: MFA Token Required
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Retrieve investment transactions for a link
      tags:
      - Investment Transactions (BETA)
      x-readme:
        code-samples:
        - language: python
          name: Belvo Python SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Retrieve Investment Transactions
            client.InvestmentsTransactions.create('link-id')
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            client.investments_transaction.retrieve(
              link: 'link-id'
            )
        - language: node
          name: Belvo Node SDK
          code: |
            // For more information about our SDKs go to:
            // https://developers.belvo.com/docs/belvo-sdks

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.investmentsTransactions.retrieve('linkID')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-content-type: application/json
      x-accepts: application/json
  /investments/transactions/{id}/:
    delete:
      description: Delete a specific instrument transaction from your Belvo account.
      operationId: DestroyInvestmentTransaction
      parameters:
      - description: The `transaction.id` that you want to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Delete an investment transaction
      tags:
      - Investment Transactions (BETA)
      x-readme:
        code-samples:
        - language: python
          name: Belvo Python SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Delete Investment Portfolio
            client.InvestmentsTransactions.delete('investment-transaction.id')
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.investments_transaction.delete id: 'investment-transaction.id'
        - language: node
          name: Belvo Node SDK
          code: |
            // For more information about our SDKs go to:
            // https://developers.belvo.com/docs/belvo-sdks

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.investmentsTransactions.delete('investment-transaction.id')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
    get:
      description: Get the details of a specific instrument's transaction.
      operationId: DetailInvestmentTransaction
      parameters:
      - description: The `transaction.id` you want to get detailed information about.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentsInstrumentTransaction'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Get an investment transaction's details
      tags:
      - Investment Transactions (BETA)
      x-readme:
        code-samples:
        - language: python
          name: Belvo Python SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Get Investment Transaction
            client.InvestmentsTransactions.get('investments-transactions.id')
        - language: ruby
          name: Belvo Ruby SDK
          code: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.investments_transaction.detail id: 'investments-transaction.id'
        - language: node
          name: Belvo Node SDK
          code: |
            // For more information about our SDKs go to:
            // https://developers.belvo.com/docs/belvo-sdks

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.investmentsTransactions.detail('investments-transaction.id')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
      x-accepts: application/json
  /receivables/transactions/:
    get:
      description: Get a paginated list of all the existing receivable transactions
        in your Belvo account. We return up to 100 results per page.
      operationId: ListReceivableTransactions
      parameters:
      - description: A page number within the paginated result set.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          format: int32
          type: integer
        style: form
      - description: |
          The `link.id` you want to filter by.

          ℹ️ We highly recommend adding either the `link.id` or the `account.id` filters in order to improve your performance.
        explode: true
        in: query
        name: link
        required: false
        schema:
          example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
          format: uuid
          type: string
        style: form
      - description: |
          The `account.id` you want to filter by.

          ℹ️ We highly recommend adding either the `link.id` or the `account.id` filters in order to improve your performance.
        explode: true
        in: query
        name: account
        required: false
        schema:
          example: d979df3a-5d0f-4cc9-9bd4-b75c28b45963
          format: uuid
          type: string
        style: form
      - allowReserved: true
        description: |-
          List of additional fields you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.
          ℹ️ **Note**: Although `filters` is an object, any filter you use is automatically serialized as a query string.
        explode: true
        in: query
        name: filters
        required: false
        schema:
          $ref: '#/components/schemas/receivableTransactionFilters'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceivablesTransactionsPaginatedResponse'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
      summary: List all receivable transactions
      tags:
      - Receivable Transactions (BETA)
      x-accepts: application/json
    post:
      description: Retrieve all receivable transactions for an existing link.
      operationId: RetrieveReceivableTransactions
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReceivableTransactionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceivablesTransaction'
          description: Ok (when `save_data=false`)
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceivablesTransaction'
          description: Created (when `save_data=true`)
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegisterLink_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "428":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TokenRequiredResponse'
                type: array
          description: MFA Token Required
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Retrieve receivable transactions for a link
      tags:
      - Receivable Transactions (BETA)
      x-content-type: application/json
      x-accepts: application/json
  /receivables/transactions/{id}/:
    delete:
      description: Delete a specific receivable transaction from your Belvo account.
      operationId: DestroyReceivableTransaction
      parameters:
      - description: The `transaction.id` that you want to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Delete a receivable transaction
      tags:
      - Receivable Transactions (BETA)
      x-accepts: application/json
    get:
      description: Get the details of a specific receivable transaction.
      operationId: DetailReceivableTransaction
      parameters:
      - description: The `transaction.id` you want to get detailed information about.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceivablesTransaction'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Get a receivable transaction's details
      tags:
      - Receivable Transactions (BETA)
      x-accepts: application/json
  /api/risk-insights/:
    get:
      description: "Get a paginated list of all risk insight analyses in your Belvo\
        \ account. By default, we return up to 100 results per page."
      operationId: ListRiskInsights
      parameters:
      - description: A page number within the paginated result set.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          format: int32
          type: integer
        style: form
      - description: "Indicates how many results to return per page. By default we\
          \ return 100 results per page. \n\nℹ️ The minimum number of results returned\
          \ per page is 1 and the maximum is 1000. If you enter a value greater than\
          \ 1000, our API will default to the maximum value (1000).\n"
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 100
          example: 100
          format: int32
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: |
          The `link.id` you want to filter by.

          ℹ️ We highly recommend adding the `link.id` filter in order to improve your performance.
        explode: true
        in: query
        name: link
        required: false
        schema:
          example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
          format: uuid
          type: string
        style: form
      - allowReserved: true
        description: |-
          List of additional fields you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.
          ℹ️ **Note**: Although `filters` is an object, any filter you use is automatically serialized as a query string.
        explode: true
        in: query
        name: filters
        required: false
        schema:
          $ref: '#/components/schemas/riskInsightFilters'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskInsightsPaginatedResponse'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
      summary: List all risk insights
      tags:
      - Risk Insights
      x-code-samples:
      - lang: cURL
        source: |
          curl https://sandbox.belvo.com/api/risk-insights/ \
          -u [Secret Key ID]:[Secret Key PASSWORD]
      - lang: python
        source: |
          # For more information about our SDKs go to:
          # https://developers.belvo.com/docs/belvo-sdks

          from pprint import pprint
          from belvo.client import Client

          # Login to Belvo API
          client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

          # List Risk insights
          for risk_insight in client.RiskInsights.list():
          pprint(income)
      - lang: ruby
        source: |
          # For more information about our SDKs go to:
          # https://developers.belvo.com/docs/belvo-sdks

          require 'belvo'

          sandbox = Belvo::Client.new(
            'Secret Key ID',
            'Secret Key PASSWORD',
            'sandbox'
          )

          client.risk_insights.list
      - lang: javascript
        source: |
          // For more information about our SDKs go to:
          // https://developers.belvo.com/docs/belvo-sdks

          var belvo = require('belvo').default;

          var client = new belvo(
            'Secret Key ID',
            'Secret Key PASSWORD',
            'sandbox'
          );

          client.connect()
            .then(function () {
              client.riskInsights.list()
                .then(function (res) {
                  console.log(res);
                })
                .catch(function (error) {
                  console.log(error);
                });
          });
      x-accepts: application/json
    patch:
      description: Used to resume an Risk insights retrieve session that was paused
        because an MFA token was required by the institution.
      operationId: PatchRiskInsights
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RiskInsights'
                type: array
          description: Ok (when save_data=false)
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RiskInsights'
                type: array
          description: Created (when save_data=true)
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegisterLink_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "408":
          content:
            application/json:
              schema:
                description: "Belvo has a limit regarding the time it takes to log\
                  \ in, retrieve account data, and log out. A timeout occurs when\
                  \ there is a very high amount of data and everything could not be\
                  \ obtained within the allotted time.\n  "
                items:
                  $ref: '#/components/schemas/RequestTimeoutError'
                title: Request Timeout
                type: array
          description: Request Timeout
        "428":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TokenRequiredResponse'
                type: array
          description: MFA Token Required
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Complete a risk insights request
      tags:
      - Risk Insights
      x-code-samples:
      - lang: cURL
        source: |
          curl -X PATCH \
          https://sandbox.belvo.com/api/risk-insights/ \
          -H 'Content-Type: application/json' \
          -H 'Host: sandbox.belvo.com' \
          -H 'cache-control: no-cache' \
          -d '{
              "session": "",
              "token": "",
              "link": ""
          }' \
          -u [Secret Key ID]:[Secret Key PASSWORD]
      - lang: python
        source: |
          # For more information about our SDKs go to:
          # https://developers.belvo.com/docs/belvo-sdks

          from belvo.client import Client

          # Login to Belvo API
          client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

          # Resume Risk insights
          risk_insights = client.RiskInsights.resume(
            session="session_id",
            token="token",
            link="link_id"
          )
      - lang: ruby
        source: |
          # For more information about our SDKs go to:
              # https://developers.belvo.com/docs/belvo-sdks

              require 'belvo'

              client = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              client.risk_insights.resume(
                session: 'session_id',
                token: 'token',
                link: 'link_id'
              )
      - lang: javascript
        source: |
          // For more information about our SDKs go to:
          // https://developers.belvo.com/docs/belvo-sdks

          var belvo = require('belvo').default;

          var client = new belvo(
            'Secret Key ID',
            'Secret Key PASSWORD',
            'sandbox'
          );

          client.connect()
            .then(function () {
              client.riskInsights.resume('sessionId', 'token', 'linkId')
                .then(function (res) {
                  console.log(res);
                })
                .catch(function (error) {
                  console.log(error);
                });
          });
      x-content-type: application/json
      x-accepts: application/json
    post:
      description: |-
        Request the risk insights for a given link ID.

        If you need to know the currency of the account, just do a GET Details to the accounts endpoint (using the ID you receive from the accounts response).
      operationId: RetrieveRiskInsights
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StandardRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RiskInsights'
                type: array
          description: Ok (when save_data=false)
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RiskInsights'
                type: array
          description: Created (when save_data=true)
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RetrieveIncome_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "408":
          content:
            application/json:
              schema:
                description: "Belvo has a limit regarding the time it takes to log\
                  \ in, retrieve account data, and log out. A timeout occurs when\
                  \ there is a very high amount of data and everything could not be\
                  \ obtained within the allotted time.\n  "
                items:
                  $ref: '#/components/schemas/RequestTimeoutError'
                title: Request Timeout
                type: array
          description: Request Timeout
        "428":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TokenRequiredResponse'
                type: array
          description: MFA Token Required
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Retrieve risk insights for a link
      tags:
      - Risk Insights
      x-code-samples:
      - lang: cURL
        source: |
          curl -X POST \
            https://sandbox.belvo.com/api/risk-insights/ \
            -H 'Content-Type: application/json' \
            -H 'Host: sandbox.belvo.com' \
            -H 'cache-control: no-cache' \
            -d '{
              "link": "link_id"
          }' \
            -u [Secret Key ID]:[Secret Key PASSWORD]
      - lang: python
        source: |
          # For more information about our SDKs go to:
          # https://developers.belvo.com/docs/belvo-sdks

          from belvo.client import Client

          # Login to Belvo API
          client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

          # Retrieve Risk insights
          client.RiskInsights.create('link-id')
      - lang: ruby
        source: |
          # For more information about our SDKs go to:
          # https://developers.belvo.com/docs/belvo-sdks

          require 'belvo'

          sandbox = Belvo::Client.new(
            'Secret Key ID',
            'Secret Key PASSWORD',
            'sandbox'
          )

          client.risk_insights.retrieve(
            link: 'link-id'
          )
      - lang: javascript
        source: |
          // For more information about our SDKs go to:
          // https://developers.belvo.com/docs/belvo-sdks

          var belvo = require('belvo').default;

          var client = new belvo(
            'Secret Key ID',
            'Secret Key PASSWORD',
            'sandbox'
          );

          client.connect()
            .then(function () {
              client.riskInsights.retrieve('linkID')
                .then(function (res) {
                  console.log(res);
                })
                .catch(function (error) {
                  console.log(error);
                });
          });
      x-content-type: application/json
      x-accepts: application/json
  /api/risk-insights/{id}/:
    delete:
      description: Delete a specific risk insight from your Belvo account.
      operationId: DestroyRiskInsights
      parameters:
      - description: The `risk-insights.id` that you want to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Delete a risk insight
      tags:
      - Risk Insights
      x-code-samples:
      - lang: cURL
        source: |
          curl -X DELETE \
          https://sandbox.belvo.com/api/risk-insights/{id}/ \
          -H 'Host: sandbox.belvo.com' \
          -u [Secret Key ID]:[Secret Key PASSWORD]
      - lang: python
        source: |
          # For more information about our SDKs go to:
          # https://developers.belvo.com/docs/belvo-sdks

          from belvo.client import Client

          # Login to Belvo API
          client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

          # Delete Risk insight
          client.RiskInsights.delete('risk-insights.id')
      - lang: ruby
        source: |
          # For more information about our SDKs go to:
          # https://developers.belvo.com/docs/belvo-sdks

          require 'belvo'

          sandbox = Belvo::Client.new(
            'Secret Key ID',
            'Secret Key PASSWORD',
            'sandbox'
          )

          sandbox.risk_insights.delete id: 'risk-insights.id'
      - lang: javascript
        source: |
          // For more information about our SDKs go to:
          // https://developers.belvo.com/docs/belvo-sdks

          var belvo = require('belvo').default;

          var client = new belvo(
            'Secret Key ID',
            'Secret Key PASSWORD',
            'sandbox'
          );

          client.connect()
            .then(function () {
              client.riskInsights.delete('risk-insights.id')
                .then(function (res) {
                  console.log(res);
                })
                .catch(function (error) {
                  console.log(error);
                });
          });
      x-accepts: application/json
    get:
      description: Get the details of a specific risk insight.
      operationId: DetailRiskInsights
      parameters:
      - description: The `risk-insights.id` you want to get detailed information about.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RiskInsights'
                type: array
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Get a risk insight's details
      tags:
      - Risk Insights
      x-code-samples:
      - lang: cURL
        source: |
          curl https://sandbox.belvo.com/api/risk-insights/{id} \
          -u [Secret Key ID]:[Secret Key PASSWORD]
      - lang: python
        source: |
          # For more information about our SDKs go to:
          # https://developers.belvo.com/docs/belvo-sdks

          from belvo.client import Client

          # Login to Belvo API
          client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

          # Get Risk insight
          client.RiskInsights.get('risk-insights.id')
      - lang: ruby
        source: |
          # For more information about our SDKs go to:
          # https://developers.belvo.com/docs/belvo-sdks

          require 'belvo'

          sandbox = Belvo::Client.new(
            'Secret Key ID',
            'Secret Key PASSWORD',
            'sandbox'
          )

          sandbox.risk_insights.detail id: 'risk-insights.id'
      - lang: javascript
        source: |
          // For more information about our SDKs go to:
          // https://developers.belvo.com/docs/belvo-sdks

          var belvo = require('belvo').default;

          var client = new belvo(
            'Secret Key ID',
            'Secret Key PASSWORD',
            'sandbox'
          );

          client.connect()
            .then(function () {
              client.riskInsights.detail('risk-insights.id')
                .then(function (res) {
                  console.log(res);
                })
                .catch(function (error) {
                  console.log(error);
                });
          });
      x-accepts: application/json
  /api/tax-retentions/:
    get:
      description: Get a paginated list of all existing tax retentions in your Belvo
        account. We return up to 100 results per page.
      operationId: ListTaxRetentions
      parameters:
      - description: A page number within the paginated result set.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          format: int32
          type: integer
        style: form
      - description: |
          The `link.id` you want to filter by.

          ℹ️ We highly recommend adding the `link.id` filter in order to improve your performance.
        explode: true
        in: query
        name: link
        required: false
        schema:
          example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
          format: uuid
          type: string
        style: form
      - allowReserved: true
        description: |-
          List of additional fields you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.
          ℹ️ **Note**: Although `filters` is an object, any filter you use is automatically serialized as a query string.
        explode: true
        in: query
        name: filters
        required: false
        schema:
          $ref: '#/components/schemas/investmentTransactionFilters'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRetentionsPaginatedResponse'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
      summary: List all tax retentions
      tags:
      - Tax retentions
      x-accepts: application/json
    post:
      description: Retrieve tax retention information from a specific link. The maximum
        number of tax retentions that can be returned for a period is 500.
      operationId: RetrieveTaxRetentions
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxRetentionsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TaxRetentions'
                type: array
          description: Ok (when `save_data=false`)
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TaxRetentions'
                type: array
          description: Created (when `save_data=true`)
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegisterLink_400_response_inner'
                type: array
          description: Bad request error
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "408":
          content:
            application/json:
              schema:
                description: "Belvo has a limit regarding the time it takes to log\
                  \ in, retrieve account data, and log out. A timeout occurs when\
                  \ there is a very high amount of data and everything could not be\
                  \ obtained within the allotted time.\n  "
                items:
                  $ref: '#/components/schemas/RequestTimeoutError'
                title: Request Timeout
                type: array
          description: Request Timeout
        "500":
          content:
            application/json:
              schema:
                description: "This error occurs when we (Belvo) have encountered an\
                  \ internal system error (sorry about that) or due to an unsupported\
                  \ response from the institution.\n  "
                items:
                  $ref: '#/components/schemas/UnexpectedError'
                title: Unexpected Error
                type: array
          description: Unexpected Error
      summary: Retrieve tax retentions for a link
      tags:
      - Tax retentions
      x-content-type: application/json
      x-accepts: application/json
  /api/tax-retentions/{id}/:
    delete:
      description: Delete a specific tax retention from your Belvo account.
      operationId: DestroyTaxRetention
      parameters:
      - description: The `tax-retention.id` that you want to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Delete a tax retention
      tags:
      - Tax retentions
      x-accepts: application/json
    get:
      description: Get the details of a specific tax retention.
      operationId: DetailTaxRetentions
      parameters:
      - description: The `tax-retention.id` you want to get detailed information about.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRetentions'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                description: "This error occurs when you try to make an API call using\
                  \ incorrect Belvo API credentials (either your secret key or secret\
                  \ password, or both, are incorrect)."
                items:
                  $ref: '#/components/schemas/UnauthorizedError'
                type: array
          description: Authentication to Belvo API failed
        "404":
          content:
            application/json:
              schema:
                description: "You made a request where you:\n\n  - provided the wrong\
                  \ URL.\n  - used an ID (for a link, account, transaction, and so\
                  \ on) that is not associated with your Belvo account.\n  "
                items:
                  $ref: '#/components/schemas/NotFoundError'
                type: array
          description: Not Found
      summary: Get a tax retention's details
      tags:
      - Tax retentions
      x-accepts: application/json
components:
  examples:
    AccountsBankingChecking:
      description: Example of a checking account.
      summary: Checking Account
      value:
      - id: c21f3914-bcbe-44c4-a2e8-a5e33f6888d4
        link: 57f212dc-1ba4-407f-b7f0-15a5e5ff17ae
        institution:
          name: erebor_mx_retail
          type: bank
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        category: CHECKING_ACCOUNT
        balance_type: ASSET
        type: Cuentas de efectivo
        name: Cuenta Perfiles- M.N.- - ERB-237
        number: "2180700688677950"
        balance:
          available: 4523.48
          current: 4523.48
        currency: MXN
        bank_product_id: null
        internal_identification: null
        public_identification_name: CLABE
        public_identification_value: "2180700008677950"
        last_accessed_at: 2022-02-01T20:25:47.307911Z
        credit_data: null
        loan_data: null
        funds_data: null
        gig_payment_data: null
    AccountsBankingCreditCard:
      description: Example of a credit card account.
      summary: Credit Card Account
      value:
      - id: 0f82c5db-13a2-43c7-a69a-e036160aba3a
        link: 57f212dc-1ba4-407f-b7f0-15a5e5ff17ae
        institution:
          name: erebor_mx_retail
          type: bank
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        category: CREDIT_CARD
        balance_type: LIABILITY
        type: Tarjetas de crédito
        name: Erebor Gold
        number: null
        balance:
          available: 1550.15
          current: 4049.85
        currency: MXN
        bank_product_id: null
        internal_identification: null
        public_identification_name: null
        public_identification_value: null
        last_accessed_at: 2022-02-01T20:25:47.307911Z
        credit_data:
          collected_at: 2022-02-09T08:45:50.406032Z
          credit_limit: 15600
          cutting_date: 2021-04-11
          next_payment_date: 2021-03-31
          minimum_payment: 690
          no_interest_payment: 11550.15
          interest_rate: 4
          monthly_payment: null
          last_payment_date: null
          last_period_balance: null
        loan_data: null
        funds_data: null
        gig_payment_data: null
    AccountsBankingLoan:
      description: Example of a loan account.
      summary: Loan Account
      value:
      - id: 0f82c5db-13a2-43c7-a69a-e036160aba3a
        link: 57f212dc-1ba4-407f-b7f0-15a5e5ff17ae
        institution:
          name: erebor_mx_retail
          type: bank
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        category: LOAN_ACCOUNT
        balance_type: LIABILITY
        type: Créditos
        name: Cuenta nómina
        number: "72964044"
        balance:
          available: 34708.36
          current: 34708.36
        currency: MXN
        bank_product_id: null
        internal_identification: null
        public_identification_name: ACCOUNT_NUMBER
        public_identification_value: "217035843284091420"
        last_accessed_at: 2022-02-01T20:25:47.307911Z
        credit_data: null
        loan_data:
          collected_at: 2022-02-09T08:45:50.406032Z
          loan_type: SFH
          contract_amount: 202000
          principal: 192000
          outstanding_principal: 142000
          outstanding_balance: 164000
          payment_day: "17"
          interest_rates:
          - name: jurosEfetivo
            type: MONTHLY
            value: 7.85
          fees:
          - type: OPERATION_FEE
            value: 5.6
          monthly_payment: 1000
          number_of_installments_total: 50
          number_of_installments_outstanding: 41
          contract_start_date: 2018-01-01
          contract_end_date: 2027-10-01
          contract_number: ER8072930097
        funds_data: null
        gig_payment_data: null
    AccountsBankingPension:
      description: Example of a pension account.
      summary: Pension Account
      value:
      - id: 3d5b0f90-90df-455d-a647-5b74feb746f6
        link: fbbb5ea7-4605-437f-b5c5-667fd037a303
        institution:
          name: erebor_br_retail
          type: bank
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        category: PENSION_FUND_ACCOUNT
        balance_type: ASSET
        type: Contas
        name: Conta corrente
        number: "37903487"
        balance:
          available: 26305.33
          current: 26305.33
        currency: BRL
        bank_product_id: null
        internal_identification: null
        public_identification_name: PENSION_PLAN_ID
        public_identification_value: "626249048387247512"
        last_accessed_at: 2021-03-09T08:19:05.000Z
        credit_data: null
        loan_data: null
        funds_data:
        - collected_at: 2022-02-09T08:45:50.406032Z
          name: CICLO DE VIDA 2040 I
          type: PGBL
          balance: "94793"
          percentage: "9"
          public_identifications:
          - name: CNPJ
            value: 11.233.333/4424-01
          - name: SUSEP
            value: 13311.2333222/3333-44
        - collected_at: 2022-02-09T08:45:50.406032Z
          name: CICLO DE VIDA 2020 I
          type: PGBL
          balance: "50834"
          percentage: "91"
          public_identifications:
          - name: CNPJ
            value: 11.222.333/4444-02
          - name: SUSEP
            value: 11111.222222/3333-44
        gig_payment_data: null
    AccountsBankingSavings:
      description: Example of a savings account.
      summary: Savings Account
      value:
      - id: 3d5b0f90-90df-455d-a647-5b74feb746f6
        link: fbbb5ea7-4605-437f-b5c5-667fd037a303
        institution:
          name: erebor_co_retail
          type: bank
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        category: SAVINGS_ACCOUNT
        balance_type: ASSET
        type: Cuenta de Ahorro
        name: Cuenta de Ahorro
        number: "13166008"
        balance:
          available: 4978436.05
          current: 4978436.05
        currency: COP
        bank_product_id: null
        internal_identification: null
        public_identification_name: ACCOUNT_NUMBER
        public_identification_value: "260825906"
        last_accessed_at: 2021-03-09T10:28:40.000Z
        credit_data: null
        loan_data: null
        funds_data: null
        gig_payment_data: null
    AccountsGigDelivery:
      description: Example of a delivery account.
      summary: Delivery Account (Gig)
      value:
      - id: eddd02d2-d3d6-4655-a63d-706b6acae73b
        link: e96cdaf9-0bd0-464f-86f1-46c9991e342b
        institution:
          name: planet_mx_gig
          type: gig
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        category: DELIVERY_ACCOUNT
        balance_type: ASSET
        type: DELIVERY_ACCOUNT
        name: Roberto Martinez Diaz
        number: null
        balance:
          available: 60
          current: 60
        currency: null
        bank_product_id: null
        internal_identification: null
        public_identification_name: null
        public_identification_value: null
        last_accessed_at: null
        credit_data: null
        loan_data: null
        funds_data: null
        gig_payment_data:
          collected_at: 2022-02-09T08:45:50.406032Z
          method: BANK_ACCOUNT
          issuer: EREBOR MX SA
          number: "121800153908325650000"
          holder_name: Roberto Martinez Diaz
    AccountsGigDriver:
      description: Example of a driver account.
      summary: Driver Account (Gig)
      value:
      - id: eddd02d2-d3d6-4655-a63d-706b6acae73b
        link: e96cdaf9-0bd0-464f-86f1-46c9991e342b
        institution:
          name: goonies_mx_gig
          type: gig
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        category: DRIVER_ACCOUNT
        balance_type: ASSET
        type: DRIVER_ACCOUNT
        name: Roberto Martinez Diaz
        number: null
        balance:
          available: 50
          current: 50
        currency: null
        bank_product_id: null
        internal_identification: null
        public_identification_name: null
        public_identification_value: null
        last_accessed_at: null
        credit_data: null
        loan_data: null
        funds_data: null
        gig_payment_data:
          collected_at: 2022-02-09T08:45:50.406032Z
          method: BANK_ACCOUNT
          issuer: EREBOR MX SA
          number: "0121800153908325643209"
          holder_name: Roberto Martinez Diaz
    AccountsBankingCheckingDetail:
      description: Example of a checking account.
      summary: Checking Account
      value:
        id: c21f3914-bcbe-44c4-a2e8-a5e33f6888d4
        link: 57f212dc-1ba4-407f-b7f0-15a5e5ff17ae
        institution:
          name: erebor_mx_retail
          type: bank
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        category: CHECKING_ACCOUNT
        balance_type: ASSET
        type: Cuentas de efectivo
        name: Cuenta Perfiles- M.N.- - ERB-237
        number: "2180700688677950"
        balance:
          available: 4523.48
          current: 4523.48
        currency: MXN
        bank_product_id: null
        internal_identification: null
        public_identification_name: CLABE
        public_identification_value: "2180700008677950"
        last_accessed_at: 2022-02-01T20:25:47.307911Z
        credit_data: null
        loan_data: null
        funds_data: null
        gig_payment_data: null
    AccountsBankingCreditCardDetail:
      description: Example of a credit card account.
      summary: Credit Card Account
      value:
        id: 0f82c5db-13a2-43c7-a69a-e036160aba3a
        link: 57f212dc-1ba4-407f-b7f0-15a5e5ff17ae
        institution:
          name: erebor_mx_retail
          type: bank
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        category: CREDIT_CARD
        balance_type: LIABILITY
        type: Tarjetas de crédito
        name: Erebor Gold
        number: null
        balance:
          available: 1550.15
          current: 4049.85
        currency: MXN
        bank_product_id: null
        internal_identification: null
        public_identification_name: null
        public_identification_value: null
        last_accessed_at: 2022-02-01T20:25:47.307911Z
        credit_data:
          collected_at: 2022-02-09T08:45:50.406032Z
          credit_limit: 15600
          cutting_date: 2021-04-11
          next_payment_date: 2021-03-31
          minimum_payment: 690
          no_interest_payment: 11550.15
          interest_rate: 4
          monthly_payment: null
          last_payment_date: null
          last_period_balance: null
        loan_data: null
        funds_data: null
        gig_payment_data: null
    AccountsBankingLoanDetail:
      description: Example of a loan account.
      summary: Loan Account
      value:
        id: 0f82c5db-13a2-43c7-a69a-e036160aba3a
        link: 57f212dc-1ba4-407f-b7f0-15a5e5ff17ae
        institution:
          name: erebor_mx_retail
          type: bank
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        category: LOAN_ACCOUNT
        balance_type: LIABILITY
        type: Créditos
        name: Cuenta nómina
        number: "72964044"
        balance:
          available: 34708.36
          current: 34708.36
        currency: MXN
        bank_product_id: null
        internal_identification: null
        public_identification_name: ACCOUNT_NUMBER
        public_identification_value: "217035843284091420"
        last_accessed_at: 2022-02-01T20:25:47.307911Z
        credit_data: null
        loan_data:
          collected_at: 2022-02-09T08:45:50.406032Z
          loan_type: SFH
          contract_amount: 202000
          principal: 192000
          outstanding_principal: 142000
          outstanding_balance: 164000
          payment_day: "17"
          interest_rates:
          - name: jurosEfetivo
            type: MONTHLY
            value: 7.85
          fees:
          - type: OPERATION_FEE
            value: 5.6
          monthly_payment: 1000
          number_of_installments_total: 50
          number_of_installments_outstanding: 41
          contract_start_date: 2018-01-01
          contract_end_date: 2027-10-01
          contract_number: ER8072930097
        funds_data: null
        gig_payment_data: null
    AccountsBankingPensionDetail:
      description: Example of a pension account.
      summary: Pension Account
      value:
        id: 3d5b0f90-90df-455d-a647-5b74feb746f6
        link: fbbb5ea7-4605-437f-b5c5-667fd037a303
        institution:
          name: erebor_br_retail
          type: bank
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        category: PENSION_FUND_ACCOUNT
        balance_type: ASSET
        type: Contas
        name: Conta corrente
        number: "37903487"
        balance:
          available: 26305.33
          current: 26305.33
        currency: BRL
        bank_product_id: null
        internal_identification: null
        public_identification_name: PENSION_PLAN_ID
        public_identification_value: "626249048387247512"
        last_accessed_at: 2021-03-09T08:19:05.000Z
        credit_data: null
        loan_data: null
        funds_data:
        - collected_at: 2022-02-09T08:45:50.406032Z
          name: CICLO DE VIDA 2040 I
          type: PGBL
          balance: "94793"
          percentage: "9"
          public_identifications:
          - name: CNPJ
            value: 11.233.333/4424-01
          - name: SUSEP
            value: 13311.2333222/3333-44
        - collected_at: 2022-02-09T08:45:50.406032Z
          name: CICLO DE VIDA 2020 I
          type: PGBL
          balance: "50834"
          percentage: "91"
          public_identifications:
          - name: CNPJ
            value: 11.222.333/4444-02
          - name: SUSEP
            value: 11111.222222/3333-44
        gig_payment_data: null
    AccountsBankingSavingsDetail:
      description: Example of a savings account.
      summary: Savings Account
      value:
        id: 3d5b0f90-90df-455d-a647-5b74feb746f6
        link: fbbb5ea7-4605-437f-b5c5-667fd037a303
        institution:
          name: erebor_co_retail
          type: bank
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        category: SAVINGS_ACCOUNT
        balance_type: ASSET
        type: Cuenta de Ahorro
        name: Cuenta de Ahorro
        number: "13166008"
        balance:
          available: 4978436.05
          current: 4978436.05
        currency: COP
        bank_product_id: null
        internal_identification: null
        public_identification_name: ACCOUNT_NUMBER
        public_identification_value: "260825906"
        last_accessed_at: 2021-03-09T10:28:40.000Z
        credit_data: null
        loan_data: null
        funds_data: null
        gig_payment_data: null
    AccountsGigDeliveryDetail:
      description: Example of a delivery account.
      summary: Delivery Account (Gig)
      value:
        id: eddd02d2-d3d6-4655-a63d-706b6acae73b
        link: e96cdaf9-0bd0-464f-86f1-46c9991e342b
        institution:
          name: planet_mx_gig
          type: gig
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        category: DELIVERY_ACCOUNT
        balance_type: ASSET
        type: DELIVERY_ACCOUNT
        name: Roberto Martinez Diaz
        number: null
        balance:
          available: 60
          current: 60
        currency: null
        bank_product_id: null
        internal_identification: null
        public_identification_name: null
        public_identification_value: null
        last_accessed_at: null
        credit_data: null
        loan_data: null
        funds_data: null
        gig_payment_data:
          collected_at: 2022-02-09T08:45:50.406032Z
          method: BANK_ACCOUNT
          issuer: EREBOR MX SA
          number: "121800153908325650000"
          holder_name: Roberto Martinez Diaz
    AccountsGigDriverDetail:
      description: Example of a driver account.
      summary: Driver Account (Gig)
      value:
        id: eddd02d2-d3d6-4655-a63d-706b6acae73b
        link: e96cdaf9-0bd0-464f-86f1-46c9991e342b
        institution:
          name: goonies_mx_gig
          type: gig
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        category: DRIVER_ACCOUNT
        balance_type: ASSET
        type: DRIVER_ACCOUNT
        name: Roberto Martinez Diaz
        number: null
        balance:
          available: 50
          current: 50
        currency: null
        bank_product_id: null
        internal_identification: null
        public_identification_name: null
        public_identification_value: null
        last_accessed_at: null
        credit_data: null
        loan_data: null
        funds_data: null
        gig_payment_data:
          collected_at: 2022-02-09T08:45:50.406032Z
          method: BANK_ACCOUNT
          issuer: EREBOR MX SA
          number: "0121800153908325643209"
          holder_name: Roberto Martinez Diaz
    TransactionsCheckingPaginated:
      description: An example of a checking account transaction
      summary: Checking Account Transaction
      value:
        count: 198
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: null
        results:
        - id: e5588958-48f2-427c-9300-945207532f5d
          account:
            id: 02589c41-ba22-4d44-8558-8111cc751318
            link: 30cb4806-6e00-48a4-91c9-ca55968576c8
            institution:
              name: erebor_mx_retail
              type: bank
            collected_at: 2022-02-09T08:45:50.406032Z
            created_at: 2022-02-09T08:46:20.406032Z
            internal_identification: "996685090015"
            name: CUENTA NARANJA LITE +
            number: "996685090015"
            type: CUENTA NARANJA LITE +
            category: CHECKING_ACCOUNT
            bank_product_id: "46"
            public_identification_name: CLABE
            public_identification_value: "058597000010485108"
            currency: MXN
            balance:
              current: 0
              available: 0
            loan_data: null
            credit_data: null
            last_accessed_at: null
            balance_type: ASSET
          created_at: 2022-07-20T22:09:35.556519Z
          category: null
          merchant: null
          type: INFLOW
          amount: 932.5
          status: UNCATEGORIZED
          balance: null
          currency: MXN
          reference: "085904452810319225"
          value_date: 2022-07-11
          description: Transferencia interbancaria
          collected_at: 2022-07-20T22:09:33.767574Z
          observations: null
          accounting_date: null
          internal_identification: LCzHexIyHi
    TransactionsSavingsPaginated:
      description: An example of a savings account transaction
      summary: Savings Account Transaction
      value:
        count: 198
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: null
        results:
        - id: e5588958-48f2-427c-9300-945207532f5d
          account:
            id: 02589c41-ba22-4d44-8558-8111cc751318
            link: 30cb4806-6e00-48a4-91c9-ca55968576c8
            institution:
              name: erebor_mx_retail
              type: bank
            collected_at: 2022-02-09T08:45:50.406032Z
            created_at: 2022-02-09T08:46:20.406032Z
            internal_identification: "996685090015"
            name: Mi ahorro Erebor
            number: "997468860036"
            type: null
            category: SAVINGS_ACCOUNT
            bank_product_id: null
            public_identification_name: CLABE
            public_identification_value: "058597000011543422"
            currency: MXN
            balance:
              current: 4.09
              available: 4.09
            loan_data: null
            credit_data: null
            last_accessed_at: null
            balance_type: ASSET
          created_at: 2022-07-20T22:09:35.556519Z
          category: null
          merchant: null
          type: INFLOW
          amount: 4.09
          status: UNCATEGORIZED
          balance: null
          currency: MXN
          reference: null
          value_date: 2022-07-11
          description: Interes
          collected_at: 2022-07-20T22:09:33.767574Z
          observations: null
          accounting_date: null
          internal_identification: 89608418
    TransactionsCreditCardPaginated:
      description: An example of a credit card transaction
      summary: Credit Card Transaction
      value:
        count: 198
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: null
        results:
        - account:
            id: 02589c41-ba22-4d44-8558-8111cc751318
            link: 30cb4806-6e00-48a4-91c9-ca55968576c8
            institution:
              name: erebor_mx_retail
              type: bank
            collected_at: 2022-02-09T08:45:50.406032Z
            created_at: 2022-02-09T08:46:20.406032Z
            category: CREDIT_CARD
            type: Tarjetas de crédito
            name: Erebor Gold
            number: null
            balance:
              current: 5874.13
              available: 5621.12
            currency: MXN
            bank_product_id: null
            internal_identification: null
            public_identification_name: null
            public_identification_value: null
            last_accessed_at: 2021-03-09T10:28:40.000Z
            balance_type: LIABILITY
            credit_data:
              credit_limit: 192000
              collected_at: 2022-02-09T08:45:50.406032Z
              cutting_date: 2019-12-11
              next_payment_date: 2019-12-01
              minimum_payment: 2400
              no_interest_payment: 37390.83
              monthly_payment: null
              end_date: null
              last_payment_date: null
              last_period_balance: null
              interest_rate: 4
            loan_data: null
            funds_data: null
            gig_payment_data: null
          collected_at: 2022-02-09T08:45:50.406032Z
          value_date: 2019-10-23
          accounting_date: 2019-10-23
          amount: 2145.45
          balance: 16907.96
          currency: MXN
          description: SEVEN BUDDHAS RFC:XXXXXXXXXX
          observations: OPTIONAL OBSERVATIONS
          merchant:
            logo: https://logo.clearbit.com/asesor-contable.es
            website: https://merchants-r-us.com
            merchant_name: Merchants R Us Global
          category: Food & Groceries
          reference: "8703"
          type: OUTFLOW
          status: PROCESSED
          gig_data: null
          credit_card_data:
            bill_name: apr-2020
            previous_bill_total: "2000.00"
            collected_at: 2022-02-09T08:45:50.406032Z
    TransactionsGigDeliveryPaginated:
      description: An example of a delivery gig-economy transaction
      summary: Gig Delivery Transaction
      value:
        count: 198
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: null
        results:
        - account:
            id: 02589c41-ba22-4d44-8558-8111cc751318
            link: 30cb4806-6e00-48a4-91c9-ca55968576c8
            institution:
              name: planet_mx_gig
              type: gig
            collected_at: 2022-02-09T08:45:50.406032Z
            created_at: 2022-02-09T08:46:20.406032Z
            category: DELIVERY_ACCOUNT
            type: DELIVERY_ACCOUNT
            name: Elisa Brancos Azul
            number: null
            balance:
              current: 2874.13
              available: 2621.12
            currency: MXN
            bank_product_id: null
            internal_identification: null
            public_identification_name: null
            public_identification_value: null
            last_accessed_at: null
            balance_type: ASSET
            credit_data: null
            loan_data: null
            funds_data: null
            gig_payment_data:
              method: BANK_ACCOUNT
              issuer: erebor_mx_mexico
              number: "123184016786312246"
              holder_name: Elisa Brancos Azul
              collected_at: 2022-02-09T08:45:50.406032Z
          collected_at: 2022-02-09T08:45:50.406032Z
          value_date: 2019-10-23
          accounting_date: 2019-10-23
          amount: 34.54
          balance: null
          currency: MXN
          description: Trip Delivery - 88854592
          observations: null
          merchant:
            logo: https://logo.clearbit.com/asesor-contable.es
            website: https://merchants-r-us.com
            merchant_name: Merchants R Us Global
          category: Transport & Travel
          reference: null
          type: INFLOW
          status: null
          gig_data:
            pickup_at: null
            dropoff_at: null
            request_at: null
            pickup_address: null
            dropoff_address: null
            pickup_latitude: null
            pickup_longitude: null
            dropoff_latitude: null
            dropoff_longitude: null
            distance: null
            payment_method: IN_APP
            vehicle_type: null
            merchant_type: null
            breakdown:
            - amount: 11
              description: Propina
            - amount: 25
              description: Ganancia
            - amount: 1
              description: Recargo - Ganancias por distancia al usuario
            - amount: -1.79
              description: Retención de IVA
            - amount: -0.67
              description: Retención de ISR (sujeto a ajustes)
            collected_at: 2022-02-09T08:45:50.406032Z
          credit_card_data: null
    TransactionsGigDriverPaginated:
      description: An example of a driver gig-economy transaction
      summary: Gig Driver Transaction
      value:
        count: 198
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: null
        results:
        - account:
            id: 02589c41-ba22-4d44-8558-8111cc751318
            link: 30cb4806-6e00-48a4-91c9-ca55968576c8
            institution:
              name: goonies_mx_gig
              type: gig
            collected_at: 2022-02-09T08:45:50.406032Z
            created_at: 2022-02-09T08:46:20.406032Z
            category: DRIVER_ACCOUNT
            type: DRIVER_ACCOUNT
            name: Elisa Brancos Azul
            number: null
            balance:
              current: 5874.13
              available: 5621.12
            currency: MXN
            bank_product_id: null
            internal_identification: null
            public_identification_name: null
            public_identification_value: null
            last_accessed_at: null
            balance_type: ASSET
            credit_data: null
            loan_data: null
            funds_data: null
            gig_payment_data:
              method: BANK_ACCOUNT
              issuer: erebor_mx_mexico
              number: "123184016786312246"
              holder_name: Elisa Brancos Azul
              collected_at: 2022-02-09T08:45:50.406032Z
          collected_at: 2022-02-09T08:45:50.406032Z
          value_date: 2019-10-23
          accounting_date: 2019-10-23
          amount: 13.87
          balance: null
          currency: MXN
          description: Trip GooniesX
          observations: null
          merchant:
            logo: https://logo.clearbit.com/asesor-contable.es
            website: https://merchants-r-us.com
            merchant_name: Merchants R Us Global
          category: Transport & Travel
          reference: null
          type: INFLOW
          status: null
          gig_data:
            pickup_at: 2019-11-28T10:27:44.813Z
            dropoff_at: 2019-11-28T10:27:44.813Z
            request_at: 2019-11-28T10:27:44.813Z
            pickup_address: "Carrer de la Llacuna, 162, 08018 Barcelona"
            dropoff_address: "Carrer de la Llacuna, 162, 08018 Barcelona"
            pickup_latitude: null
            pickup_longitude: null
            dropoff_latitude: null
            dropoff_longitude: null
            distance: 0.75
            payment_method: IN_APP
            vehicle_type: GooniesX
            merchant_type: Restaurant
            breakdown:
            - amount: 3.82
              reference: base_fare
              description: Base Fare
            - amount: 1.98
              reference: distance_fare
              description: Distance (0.75 km × MX$2.6775/km)
            - amount: 6.58
              reference: duration_fare
              description: Time (5.07 min × MX$1.2975/min)
            - amount: 13.87
              reference: min_fare
              description: Min Fare Supplement
            - amount: -1.4
              reference: vat_on_fee
              description: Tax on Fee
            - amount: 0.58
              reference: vat_on_fee_mexico
              description: VAT on Fees/Contributions
            - amount: -0.66
              reference: auto_tax_withholding_income_tax
              description: Income Tax Withholding
            - amount: -2.66
              reference: auto_tax_withholding_vat
              description: VAT Withholding
            collected_at: 2022-02-09T08:45:50.406032Z
          credit_card_data: null
    TransactionsChecking:
      description: An example of a checking account transaction
      summary: Checking Account Transaction
      value:
      - id: e5588958-48f2-427c-9300-945207532f5d
        account:
          id: 02589c41-ba22-4d44-8558-8111cc751318
          link: 30cb4806-6e00-48a4-91c9-ca55968576c8
          institution:
            name: erebor_mx_retail
            type: bank
          collected_at: 2022-02-09T08:45:50.406032Z
          created_at: 2022-02-09T08:46:20.406032Z
          internal_identification: "996685090015"
          name: CUENTA NARANJA LITE +
          number: "996685090015"
          type: CUENTA NARANJA LITE +
          category: CHECKING_ACCOUNT
          bank_product_id: "46"
          public_identification_name: CLABE
          public_identification_value: "058597000010485108"
          currency: MXN
          balance:
            current: 0
            available: 0
          loan_data: null
          credit_data: null
          last_accessed_at: null
          balance_type: ASSET
        created_at: 2022-07-20T22:09:35.556519Z
        category: null
        merchant: null
        type: INFLOW
        amount: 932.5
        status: UNCATEGORIZED
        balance: null
        currency: MXN
        reference: "085904452810319225"
        value_date: 2022-07-11
        description: Transferencia interbancaria
        collected_at: 2022-07-20T22:09:33.767574Z
        observations: null
        accounting_date: null
        internal_identification: LCzHexIyHi
    TransactionsSavings:
      description: An example of a savings account transaction
      summary: Savings Account Transaction
      value:
      - id: e5588958-48f2-427c-9300-945207532f5d
        account:
          id: 02589c41-ba22-4d44-8558-8111cc751318
          link: 30cb4806-6e00-48a4-91c9-ca55968576c8
          institution:
            name: erebor_mx_retail
            type: bank
          collected_at: 2022-02-09T08:45:50.406032Z
          created_at: 2022-02-09T08:46:20.406032Z
          internal_identification: "996685090015"
          name: Mi ahorro Erebor
          number: "997468860036"
          type: null
          category: SAVINGS_ACCOUNT
          bank_product_id: null
          public_identification_name: CLABE
          public_identification_value: "058597000011543422"
          currency: MXN
          balance:
            current: 4.09
            available: 4.09
          loan_data: null
          credit_data: null
          last_accessed_at: null
          balance_type: ASSET
        created_at: 2022-07-20T22:09:35.556519Z
        category: null
        merchant: null
        type: INFLOW
        amount: 4.09
        status: UNCATEGORIZED
        balance: null
        currency: MXN
        reference: null
        value_date: 2022-07-11
        description: Interes
        collected_at: 2022-07-20T22:09:33.767574Z
        observations: null
        accounting_date: null
        internal_identification: 89608418
    TransactionsCreditCard:
      description: An example of a credit card transaction
      summary: Credit Card Transaction
      value:
      - id: 9e432f18-36ca-4bd6-a3f3-1971e58dc1e8
        account:
          id: 02589c41-ba22-4d44-8558-8111cc751318
          link: 30cb4806-6e00-48a4-91c9-ca55968576c8
          institution:
            name: erebor_mx_retail
            type: bank
          collected_at: 2022-02-09T08:45:50.406032Z
          created_at: 2022-02-09T08:46:20.406032Z
          category: CREDIT_CARD
          type: Tarjetas de crédito
          name: Erebor Gold
          number: null
          balance:
            current: 5874.13
            available: 5621.12
          currency: MXN
          bank_product_id: null
          internal_identification: null
          public_identification_name: null
          public_identification_value: null
          last_accessed_at: 2021-03-09T10:28:40.000Z
          balance_type: LIABILITY
          credit_data:
            credit_limit: 192000
            collected_at: 2022-02-09T08:45:50.406032Z
            cutting_date: 2019-12-11
            next_payment_date: 2019-12-01
            minimum_payment: 2400
            no_interest_payment: 37390.83
            monthly_payment: null
            end_date: null
            last_payment_date: null
            last_period_balance: null
            interest_rate: 4
          loan_data: null
          funds_data: null
          gig_payment_data: null
        collected_at: 2022-02-09T08:45:50.406032Z
        value_date: 2019-10-23
        accounting_date: 2019-10-23
        amount: 2145.45
        balance: 16907.96
        currency: MXN
        description: SEVEN BUDDHAS RFC:XXXXXXXXXX
        observations: OPTIONAL OBSERVATIONS
        merchant:
          logo: https://logo.clearbit.com/asesor-contable.es
          website: https://merchants-r-us.com
          merchant_name: Merchants R Us Global
        category: Food & Groceries
        reference: "8703"
        type: OUTFLOW
        status: PROCESSED
        gig_data: null
        credit_card_data:
          bill_name: apr-2020
          previous_bill_total: "2000.00"
          collected_at: 2022-02-09T08:45:50.406032Z
    TransactionsGigDelivery:
      description: An example of a delivery gig-economy transaction
      summary: Gig Delivery Transaction
      value:
      - id: 9e432f18-36ca-4bd6-a3f3-1971e58dc1e8
        account:
          id: 02589c41-ba22-4d44-8558-8111cc751318
          link: 30cb4806-6e00-48a4-91c9-ca55968576c8
          institution:
            name: planet_mx_gig
            type: gig
          collected_at: 2022-02-09T08:45:50.406032Z
          created_at: 2022-02-09T08:46:20.406032Z
          category: DELIVERY_ACCOUNT
          type: DELIVERY_ACCOUNT
          name: Elisa Brancos Azul
          number: null
          balance:
            current: 2874.13
            available: 2621.12
          currency: MXN
          bank_product_id: null
          internal_identification: null
          public_identification_name: null
          public_identification_value: null
          last_accessed_at: null
          balance_type: ASSET
          credit_data: null
          loan_data: null
          funds_data: null
          gig_payment_data:
            method: BANK_ACCOUNT
            issuer: erebor_mx_mexico
            number: "123184016786312246"
            holder_name: Elisa Brancos Azul
            collected_at: 2022-02-09T08:45:50.406032Z
        collected_at: 2022-02-09T08:45:50.406032Z
        value_date: 2019-10-23
        accounting_date: 2019-10-23
        amount: 34.54
        balance: null
        currency: MXN
        description: Trip Delivery - 88854592
        observations: null
        merchant:
          logo: https://logo.clearbit.com/asesor-contable.es
          website: https://merchants-r-us.com
          merchant_name: Merchants R Us Global
        category: Transport & Travel
        reference: null
        type: INFLOW
        status: null
        gig_data:
          pickup_at: null
          dropoff_at: null
          request_at: null
          pickup_address: null
          dropoff_address: null
          pickup_latitude: null
          pickup_longitude: null
          dropoff_latitude: null
          dropoff_longitude: null
          distance: null
          payment_method: IN_APP
          vehicle_type: null
          merchant_type: null
          breakdown:
          - amount: 11
            description: Propina
          - amount: 25
            description: Ganancia
          - amount: 1
            description: Recargo - Ganancias por distancia al usuario
          - amount: -1.79
            description: Retención de IVA
          - amount: -0.67
            description: Retención de ISR (sujeto a ajustes)
          collected_at: 2022-02-09T08:45:50.406032Z
        credit_card_data: null
    TransactionsGigDriver:
      description: An example of a driver gig-economy transaction
      summary: Gig Driver Transaction
      value:
      - id: 9e432f18-36ca-4bd6-a3f3-1971e58dc1e8
        account:
          id: 02589c41-ba22-4d44-8558-8111cc751318
          link: 30cb4806-6e00-48a4-91c9-ca55968576c8
          institution:
            name: goonies_mx_gig
            type: gig
          collected_at: 2022-02-09T08:45:50.406032Z
          created_at: 2022-02-09T08:46:20.406032Z
          category: DRIVER_ACCOUNT
          type: DRIVER_ACCOUNT
          name: Elisa Brancos Azul
          number: null
          balance:
            current: 5874.13
            available: 5621.12
          currency: MXN
          bank_product_id: null
          internal_identification: null
          public_identification_name: null
          public_identification_value: null
          last_accessed_at: null
          balance_type: ASSET
          credit_data: null
          loan_data: null
          funds_data: null
          gig_payment_data:
            method: BANK_ACCOUNT
            issuer: erebor_mx_mexico
            number: "123184016786312246"
            holder_name: Elisa Brancos Azul
            collected_at: 2022-02-09T08:45:50.406032Z
        collected_at: 2022-02-09T08:45:50.406032Z
        value_date: 2019-10-23
        accounting_date: 2019-10-23
        amount: 13.87
        balance: null
        currency: MXN
        description: Trip GooniesX
        observations: null
        merchant:
          logo: https://logo.clearbit.com/asesor-contable.es
          website: https://merchants-r-us.com
          merchant_name: Merchants R Us Global
        category: Transport & Travel
        reference: null
        type: INFLOW
        status: null
        gig_data:
          pickup_at: 2019-11-28T10:27:44.813Z
          dropoff_at: 2019-11-28T10:27:44.813Z
          request_at: 2019-11-28T10:27:44.813Z
          pickup_address: "Carrer de la Llacuna, 162, 08018 Barcelona"
          dropoff_address: "Carrer de la Llacuna, 162, 08018 Barcelona"
          pickup_latitude: null
          pickup_longitude: null
          dropoff_latitude: null
          dropoff_longitude: null
          distance: 0.75
          payment_method: IN_APP
          vehicle_type: GooniesX
          merchant_type: Restaurant
          breakdown:
          - amount: 3.82
            reference: base_fare
            description: Base Fare
          - amount: 1.98
            reference: distance_fare
            description: Distance (0.75 km × MX$2.6775/km)
          - amount: 6.58
            reference: duration_fare
            description: Time (5.07 min × MX$1.2975/min)
          - amount: 13.87
            reference: min_fare
            description: Min Fare Supplement
          - amount: -1.4
            reference: vat_on_fee
            description: Tax on Fee
          - amount: 0.58
            reference: vat_on_fee_mexico
            description: VAT on Fees/Contributions
          - amount: -0.66
            reference: auto_tax_withholding_income_tax
            description: Income Tax Withholding
          - amount: -2.66
            reference: auto_tax_withholding_vat
            description: VAT Withholding
          collected_at: 2022-02-09T08:45:50.406032Z
        credit_card_data: null
    TransactionsCheckingDetail:
      description: An example of a checking account transaction
      summary: Checking Account Transaction
      value:
        id: e5588958-48f2-427c-9300-945207532f5d
        account:
          id: 02589c41-ba22-4d44-8558-8111cc751318
          link: 30cb4806-6e00-48a4-91c9-ca55968576c8
          institution:
            name: erebor_mx_retail
            type: bank
          collected_at: 2022-02-09T08:45:50.406032Z
          created_at: 2022-02-09T08:46:20.406032Z
          internal_identification: "996685090015"
          name: CUENTA NARANJA LITE +
          number: "996685090015"
          type: CUENTA NARANJA LITE +
          category: CHECKING_ACCOUNT
          bank_product_id: "46"
          public_identification_name: CLABE
          public_identification_value: "058597000010485108"
          currency: MXN
          balance:
            current: 0
            available: 0
          loan_data: null
          credit_data: null
          last_accessed_at: null
          balance_type: ASSET
        created_at: 2022-07-20T22:09:35.556519Z
        category: null
        merchant: null
        type: INFLOW
        amount: 932.5
        status: UNCATEGORIZED
        balance: null
        currency: MXN
        reference: "085904452810319225"
        value_date: 2022-07-11
        description: Transferencia interbancaria
        collected_at: 2022-07-20T22:09:33.767574Z
        observations: null
        accounting_date: null
        internal_identification: LCzHexIyHi
    TransactionsSavingsDetail:
      description: An example of a savings account transaction
      summary: Savings Account Transaction
      value:
        id: e5588958-48f2-427c-9300-945207532f5d
        account:
          id: 02589c41-ba22-4d44-8558-8111cc751318
          link: 30cb4806-6e00-48a4-91c9-ca55968576c8
          institution:
            name: erebor_mx_retail
            type: bank
          collected_at: 2022-02-09T08:45:50.406032Z
          created_at: 2022-02-09T08:46:20.406032Z
          internal_identification: "996685090015"
          name: Mi ahorro Erebor
          number: "997468860036"
          type: null
          category: SAVINGS_ACCOUNT
          bank_product_id: null
          public_identification_name: CLABE
          public_identification_value: "058597000011543422"
          currency: MXN
          balance:
            current: 4.09
            available: 4.09
          loan_data: null
          credit_data: null
          last_accessed_at: null
          balance_type: ASSET
        created_at: 2022-07-20T22:09:35.556519Z
        category: null
        merchant: null
        type: INFLOW
        amount: 4.09
        status: UNCATEGORIZED
        balance: null
        currency: MXN
        reference: null
        value_date: 2022-07-11
        description: Interes
        collected_at: 2022-07-20T22:09:33.767574Z
        observations: null
        accounting_date: null
        internal_identification: 89608418
    TransactionsCreditCardDetail:
      description: An example of a credit card transaction
      summary: Credit Card Transaction
      value:
        id: 9e432f18-36ca-4bd6-a3f3-1971e58dc1e8
        account:
          id: 02589c41-ba22-4d44-8558-8111cc751318
          link: 30cb4806-6e00-48a4-91c9-ca55968576c8
          institution:
            name: erebor_mx_retail
            type: bank
          collected_at: 2022-02-09T08:45:50.406032Z
          created_at: 2022-02-09T08:46:20.406032Z
          category: CREDIT_CARD
          type: Tarjetas de crédito
          name: Erebor Gold
          number: null
          balance:
            current: 5874.13
            available: 5621.12
          currency: MXN
          bank_product_id: null
          internal_identification: null
          public_identification_name: null
          public_identification_value: null
          last_accessed_at: 2021-03-09T10:28:40.000Z
          balance_type: LIABILITY
          credit_data:
            credit_limit: 192000
            collected_at: 2022-02-09T08:45:50.406032Z
            cutting_date: 2019-12-11
            next_payment_date: 2019-12-01
            minimum_payment: 2400
            no_interest_payment: 37390.83
            monthly_payment: null
            end_date: null
            last_payment_date: null
            last_period_balance: null
            interest_rate: 4
          loan_data: null
          funds_data: null
          gig_payment_data: null
        collected_at: 2022-02-09T08:45:50.406032Z
        value_date: 2019-10-23
        accounting_date: 2019-10-23
        amount: 2145.45
        balance: 16907.96
        currency: MXN
        description: SEVEN BUDDHAS RFC:XXXXXXXXXX
        observations: OPTIONAL OBSERVATIONS
        merchant:
          logo: https://logo.clearbit.com/asesor-contable.es
          website: https://merchants-r-us.com
          merchant_name: Merchants R Us Global
        category: Food & Groceries
        reference: "8703"
        type: OUTFLOW
        status: PROCESSED
        gig_data: null
        credit_card_data:
          bill_name: apr-2020
          previous_bill_total: "2000.00"
          collected_at: 2022-02-09T08:45:50.406032Z
    TransactionsGigDeliveryDetail:
      description: An example of a delivery gig-economy transaction
      summary: Gig Delivery Transaction
      value:
        id: 9e432f18-36ca-4bd6-a3f3-1971e58dc1e8
        account:
          id: 02589c41-ba22-4d44-8558-8111cc751318
          link: 30cb4806-6e00-48a4-91c9-ca55968576c8
          institution:
            name: planet_mx_gig
            type: gig
          collected_at: 2022-02-09T08:45:50.406032Z
          created_at: 2022-02-09T08:46:20.406032Z
          category: DELIVERY_ACCOUNT
          type: DELIVERY_ACCOUNT
          name: Elisa Brancos Azul
          number: null
          balance:
            current: 2874.13
            available: 2621.12
          currency: MXN
          bank_product_id: null
          internal_identification: null
          public_identification_name: null
          public_identification_value: null
          last_accessed_at: null
          balance_type: ASSET
          credit_data: null
          loan_data: null
          funds_data: null
          gig_payment_data:
            method: BANK_ACCOUNT
            issuer: erebor_mx_mexico
            number: "123184016786312246"
            holder_name: Elisa Brancos Azul
            collected_at: 2022-02-09T08:45:50.406032Z
        collected_at: 2022-02-09T08:45:50.406032Z
        value_date: 2019-10-23
        accounting_date: 2019-10-23
        amount: 34.54
        balance: null
        currency: MXN
        description: Trip Delivery - 88854592
        observations: null
        merchant:
          logo: https://logo.clearbit.com/asesor-contable.es
          website: https://merchants-r-us.com
          merchant_name: Merchants R Us Global
        category: Transport & Travel
        reference: null
        type: INFLOW
        status: null
        gig_data:
          pickup_at: null
          dropoff_at: null
          request_at: null
          pickup_address: null
          dropoff_address: null
          pickup_latitude: null
          pickup_longitude: null
          dropoff_latitude: null
          dropoff_longitude: null
          distance: null
          payment_method: IN_APP
          vehicle_type: null
          merchant_type: null
          breakdown:
          - amount: 11
            description: Propina
          - amount: 25
            description: Ganancia
          - amount: 1
            description: Recargo - Ganancias por distancia al usuario
          - amount: -1.79
            description: Retención de IVA
          - amount: -0.67
            description: Retención de ISR (sujeto a ajustes)
          collected_at: 2022-02-09T08:45:50.406032Z
        credit_card_data: null
    TransactionsGigDriverDetail:
      description: An example of a driver gig-economy transaction
      summary: Gig Driver Transaction
      value:
        id: 9e432f18-36ca-4bd6-a3f3-1971e58dc1e8
        account:
          id: 02589c41-ba22-4d44-8558-8111cc751318
          link: 30cb4806-6e00-48a4-91c9-ca55968576c8
          institution:
            name: goonies_mx_gig
            type: gig
          collected_at: 2022-02-09T08:45:50.406032Z
          created_at: 2022-02-09T08:46:20.406032Z
          category: DRIVER_ACCOUNT
          type: DRIVER_ACCOUNT
          name: Elisa Brancos Azul
          number: null
          balance:
            current: 5874.13
            available: 5621.12
          currency: MXN
          bank_product_id: null
          internal_identification: null
          public_identification_name: null
          public_identification_value: null
          last_accessed_at: null
          balance_type: ASSET
          credit_data: null
          loan_data: null
          funds_data: null
          gig_payment_data:
            method: BANK_ACCOUNT
            issuer: erebor_mx_mexico
            number: "123184016786312246"
            holder_name: Elisa Brancos Azul
            collected_at: 2022-02-09T08:45:50.406032Z
        collected_at: 2022-02-09T08:45:50.406032Z
        value_date: 2019-10-23
        accounting_date: 2019-10-23
        amount: 13.87
        balance: null
        currency: MXN
        description: Trip GooniesX
        observations: null
        merchant:
          logo: https://logo.clearbit.com/asesor-contable.es
          website: https://merchants-r-us.com
          merchant_name: Merchants R Us Global
        category: Transport & Travel
        reference: null
        type: INFLOW
        status: null
        gig_data:
          pickup_at: 2019-11-28T10:27:44.813Z
          dropoff_at: 2019-11-28T10:27:44.813Z
          request_at: 2019-11-28T10:27:44.813Z
          pickup_address: "Carrer de la Llacuna, 162, 08018 Barcelona"
          dropoff_address: "Carrer de la Llacuna, 162, 08018 Barcelona"
          pickup_latitude: null
          pickup_longitude: null
          dropoff_latitude: null
          dropoff_longitude: null
          distance: 0.75
          payment_method: IN_APP
          vehicle_type: GooniesX
          merchant_type: Restaurant
          breakdown:
          - amount: 3.82
            reference: base_fare
            description: Base Fare
          - amount: 1.98
            reference: distance_fare
            description: Distance (0.75 km × MX$2.6775/km)
          - amount: 6.58
            reference: duration_fare
            description: Time (5.07 min × MX$1.2975/min)
          - amount: 13.87
            reference: min_fare
            description: Min Fare Supplement
          - amount: -1.4
            reference: vat_on_fee
            description: Tax on Fee
          - amount: 0.58
            reference: vat_on_fee_mexico
            description: VAT on Fees/Contributions
          - amount: -0.66
            reference: auto_tax_withholding_income_tax
            description: Income Tax Withholding
          - amount: -2.66
            reference: auto_tax_withholding_vat
            description: VAT Withholding
          collected_at: 2022-02-09T08:45:50.406032Z
        credit_card_data: null
    BalancesExamplePaginated:
      description: Example of a balance paginated response.
      summary: Balance Example (Checking Account)
      value:
        count: 385
        next: https://sandbox.belvo.com/api/balances/?page=2
        previous: null
        results:
        - id: b834e69b-1aa4-465d-969c-07c886a4fbed
          account:
            id: 26428311-7108-40b8-a22b-c310187dd005
            link: b834e69b-1aa4-465d-969c-07c886a4fbed
            institution:
              name: erebor_br_retail
              type: bank
            created_at: 2021-10-27T16:18:15.591647Z
            name: Erebor Gold
            type: null
            agency: "0009"
            number: 7889044-1
            balance:
              current: 146.81
              available: 146.81
            category: CHECKING_ACCOUNT
            currency: BRL
            loan_data: null
            credit_data: null
            balance_type: ASSET
            collected_at: 2022-06-17T03:20:41.300075Z
            bank_product_id: null
            last_accessed_at: null
            internal_identification: 9fa5fab9-e2b7-4bd7-8413-71ed9bb94b4c
            public_identification_name: AGENCY/ACCOUNT
            public_identification_value: 0009/7889044-1
          collected_at: 2022-04-06T23:30:51.282174+00:00
          statement: null
          value_date: 2022-04-04
          current_balance: 4.25
          balance: 4.25
    BalancesExample:
      description: Example of a balance response.
      summary: Balance Example (Checking Account)
      value:
      - id: b834e69b-1aa4-465d-969c-07c886a4fbed
        account:
          id: 26428311-7108-40b8-a22b-c310187dd005
          link: b834e69b-1aa4-465d-969c-07c886a4fbed
          institution:
            name: erebor_br_retail
            type: bank
          created_at: 2021-10-27T16:18:15.591647Z
          name: Erebor Gold
          type: null
          agency: "0009"
          number: 7889044-1
          balance:
            current: 146.81
            available: 146.81
          category: CHECKING_ACCOUNT
          currency: BRL
          loan_data: null
          credit_data: null
          balance_type: ASSET
          collected_at: 2022-06-17T03:20:41.300075Z
          bank_product_id: null
          last_accessed_at: null
          internal_identification: 9fa5fab9-e2b7-4bd7-8413-71ed9bb94b4c
          public_identification_name: AGENCY/ACCOUNT
          public_identification_value: 0009/7889044-1
        collected_at: 2022-04-06T23:30:51.282174+00:00
        statement: null
        value_date: 2022-04-04
        current_balance: 4.25
        balance: 4.25
    BalancesExampleDetail:
      description: Example of a balance response.
      summary: Balance Example (Checking Account)
      value:
        id: b834e69b-1aa4-465d-969c-07c886a4fbed
        account:
          id: 26428311-7108-40b8-a22b-c310187dd005
          link: b834e69b-1aa4-465d-969c-07c886a4fbed
          institution:
            name: erebor_br_retail
            type: bank
          created_at: 2021-10-27T16:18:15.591647Z
          name: Erebor Gold
          type: null
          agency: "0009"
          number: 7889044-1
          balance:
            current: 146.81
            available: 146.81
          category: CHECKING_ACCOUNT
          currency: BRL
          loan_data: null
          credit_data: null
          balance_type: ASSET
          collected_at: 2022-06-17T03:20:41.300075Z
          bank_product_id: null
          last_accessed_at: null
          internal_identification: 9fa5fab9-e2b7-4bd7-8413-71ed9bb94b4c
          public_identification_name: AGENCY/ACCOUNT
          public_identification_value: 0009/7889044-1
        collected_at: 2022-04-06T23:30:51.282174+00:00
        statement: null
        value_date: 2022-04-04
        current_balance: 4.25
        balance: 4.25
    OwnerBankingAccountPaginated:
      description: An example of a banking account owner.
      summary: Banking
      value:
        count: 108
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: null
        results:
        - link: c38fb126-fc98-4d6c-8c80-587a97dd56cf
          collected_at: 2022-02-09T08:45:50.406032Z
          created_at: 2022-02-09T08:46:20.406032Z
          display_name: Maria Martinez Martin
          first_name: null
          last_name: null
          second_last_name: null
          email: maria@acme.com
          phone_number: "90090508357"
          address: |-
            Retorno Gran Canaria 453 723
            Cancun, COL 10447
          document_id:
            document_type: CPF
            document_number: 235578435-S
          internal_identification: null
          gig_data: null
    OwnerGigAccountPaginated:
      description: An example of a gig account owner.
      summary: Gig
      value:
        count: 108
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: null
        results:
        - link: 2674e399-84ed-4bb5-bb84-3c7937a2df88
          collected_at: 2022-02-09T08:45:50.406032Z
          created_at: 2022-02-09T08:46:20.406032Z
          display_name: Roberto Martinez Diaz
          first_name: Roberto
          last_name: Martinez
          second_last_name: Diaz
          email: roberto@acme.com
          phone_number: "88890508357"
          address: |-
            Retorno Timor-Leste 453 723
            Cancun, COL 10447
          document_id:
            document_type: CPF
            document_number: 235578435-S
          internal_identification: null
          gig_data:
            collected_at: 2022-02-09T08:45:50.406032Z
            status: ACTIVE
            acceptance_rate: 97
    OwnerBankingAccount:
      description: An example of a banking account owner.
      summary: Banking
      value:
      - id: 2b22f123-7c3a-4518-9ac2-863eb5d4613c
        link: c38fb126-fc98-4d6c-8c80-587a97dd56cf
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        display_name: Maria Martinez Martin
        first_name: null
        last_name: null
        second_last_name: null
        email: maria@acme.com
        phone_number: "90090508357"
        address: |-
          Retorno Gran Canaria 453 723
          Cancun, COL 10447
        document_id:
          document_type: CPF
          document_number: 235578435-S
        internal_identification: null
        gig_data: null
    OwnerGigAccount:
      description: An example of a gig account owner.
      summary: Gig
      value:
      - id: 2328eee8-c26f-4ad3-a9ed-997d40eb6f5d
        link: 2674e399-84ed-4bb5-bb84-3c7937a2df88
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        display_name: Roberto Martinez Diaz
        first_name: null
        last_name: null
        second_last_name: null
        email: roberto@acme.com
        phone_number: "88890508357"
        address: |-
          Retorno Timor-Leste 453 723
          Cancun, COL 10447
        document_id:
          document_type: CPF
          document_number: 235578435-S
        internal_identification: null
        gig_data:
          collected_at: 2022-02-09T08:45:50.406032Z
          status: ACTIVE
          acceptance_rate: 97
    OwnerBankingAccountDetail:
      description: An example of a banking account owner.
      summary: Banking
      value:
        id: 2b22f123-7c3a-4518-9ac2-863eb5d4613c
        link: c38fb126-fc98-4d6c-8c80-587a97dd56cf
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        display_name: Maria Martinez Martin
        first_name: null
        last_name: null
        second_last_name: null
        email: maria@acme.com
        phone_number: "90090508357"
        address: |-
          Retorno Gran Canaria 453 723
          Cancun, COL 10447
        document_id:
          document_type: CPF
          document_number: 235578435-S
        internal_identification: null
        gig_data: null
    OwnerGigAccountDetail:
      description: An example of a gig account owner.
      summary: Gig
      value:
        id: 2328eee8-c26f-4ad3-a9ed-997d40eb6f5d
        link: 2674e399-84ed-4bb5-bb84-3c7937a2df88
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        display_name: Roberto Martinez Diaz
        first_name: null
        last_name: null
        second_last_name: null
        email: roberto@acme.com
        phone_number: "88890508357"
        address: |-
          Retorno Timor-Leste 453 723
          Cancun, COL 10447
        document_id:
          document_type: CPF
          document_number: 235578435-S
        internal_identification: null
        gig_data:
          collected_at: 2022-02-09T08:45:50.406032Z
          status: ACTIVE
          acceptance_rate: 97
    InvoiceIngresoPaginated:
      description: Example of an *Igreso* type invoice.
      summary: Invoice Ingreso
      value:
        count: 110
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: null
        results:
        - id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
          link: 1bd948f7-245d-4313-b604-34d1044cb908
          collected_at: 2022-02-09T08:45:50.406032Z
          created_at: 2022-02-09T08:46:20.406032Z
          invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
          invoice_date: 2020-12-24
          status: Vigente
          invoice_type: Ingreso
          type: OUTFLOW
          sender_id: GHTF980303F7
          sender_name: Roberto Martinez Diaz
          sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
          receiver_id: MNMK3203409H1
          receiver_name: ACNE SA DE CV
          receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
          cancelation_status: null
          cancelation_update_date: null
          certification_date: 2020-12-24
          certification_authority: FGV330542BG6
          payment_type: "04"
          payment_type_description: null
          payment_method: PUE
          usage: G03
          place_of_issue: "11000"
          version: "3.3"
          invoice_details:
          - description: Servicios de mensajería.
            product_identification: "78102206"
            quantity: 1
            unit_code: E48
            unit_description: Unidad de servicio
            unit_amount: 25
            pre_tax_amount: 25
            tax_percentage: 16
            tax_amount: 4
            total_amount: 29
            retained_taxes: []
            collected_at: 2022-02-09T08:45:50.406032Z
          currency: MXN
          subtotal_amount: 25
          exchange_rate: 1
          tax_amount: 4
          discount_amount: 0
          total_amount: 29
          payments: []
          payroll: null
          folio: "28"
          xml: =XML-STRING=
          warnings:
            code: warning_code
            message: warning message
    InvoicePagoPaginated:
      description: Example of a *Pago* type invoice.
      summary: Invoice Pago
      value:
        count: 110
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: null
        results:
        - id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
          link: 1bd948f7-245d-4313-b604-34d1044cb908
          collected_at: 2022-02-09T08:45:50.406032Z
          created_at: 2022-02-09T08:46:20.406032Z
          invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
          invoice_date: 2020-12-24
          status: Vigente
          invoice_type: Pago
          type: OUTFLOW
          sender_id: GHTF980303F7
          sender_name: Roberto Martinez Diaz
          sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
          receiver_id: MNMK3203409H1
          receiver_name: ACNE SA DE CV
          receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
          cancelation_status: null
          cancelation_update_date: null
          certification_date: 2020-12-24
          certification_authority: FGV330542BG6
          payment_type: null
          payment_type_description: null
          payment_method: null
          usage: P01
          place_of_issue: "11000"
          version: "3.3"
          invoice_details:
          - description: Pago
            product_identification: "84111506"
            quantity: 1
            unit_amount: 0
            unit_code: ACT
            unit_description: null
            pre_tax_amount: 0
            tax_percentage: 0
            tax_amount: 0
            total_amount: 0
            retained_taxes: []
            collected_at: 2022-02-09T08:45:50.406032Z
          currency: MXN
          subtotal_amount: 0
          exchange_rate: null
          tax_amount: 0
          discount_amount: 0
          total_amount: 0
          payments:
          - date: 2020-03-17T12:00:00.000Z
            payment_type: "03"
            currency: BRL
            exchange_rate: "3.75"
            amount: 8000.5
            operation_number: "831840"
            beneficiary_rfc: BNM840515VB1
            beneficiary_account_number: "12343453245633"
            payer_rfc: BKJM840515VB1
            payer_account_number: "13343663245699"
            payer_bank_name: CITI BANAMEX
            related_documents:
            - invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
              currency: MXN
              payment_method: PPD
              installment: 1
              previous_balance: 18877.84
              amount_paid: 8000
              outstanding_balance: 10877.84
          payroll: null
          folio: "28"
          xml: =XML-STRING=
          warnings:
            code: warning_code
            message: warning message
    InvoiceNominaPaginated:
      description: Example of a *Nomina* type invoice.
      summary: Invoice Nomina
      value:
        count: 110
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: null
        results:
        - id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
          link: 1bd948f7-245d-4313-b604-34d1044cb908
          collected_at: 2022-02-09T08:45:50.406032Z
          created_at: 2022-02-09T08:46:20.406032Z
          invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
          invoice_date: 2020-12-24
          status: Vigente
          invoice_type: Nómina
          type: INFLOW
          sender_id: GHTF980303F7
          sender_name: ACNE SA DE CV
          sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
          receiver_id: MNMK3203409H1
          receiver_name: Roberto Martinez Diaz
          receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
          cancelation_status: null
          cancelation_update_date: null
          certification_date: 2020-12-24
          certification_authority: FGV330542BG6
          payment_type: "99"
          payment_type_description: null
          payment_method: PUE
          usage: P01
          place_of_issue: "11000"
          version: "3.3"
          invoice_details:
          - description: Pago de nómina
            product_identification: "84111505"
            quantity: 1
            unit_code: ACT
            unit_description: null
            unit_amount: 20400.1
            total_amount: 20400.1
            pre_tax_amount: 20400.1
            tax_percentage: 0
            tax_amount: 0
            retained_taxes: []
            collected_at: 2022-02-09T08:45:50.406032Z
          currency: MXN
          subtotal_amount: 20400.1
          exchange_rate: 1
          tax_amount: 0
          discount_amount: 5000
          total_amount: 15400.1
          payments: []
          payroll:
            days: 30
            type: O
            amount: 20400.1
            date_to: 2020-12-31
            version: "1.2"
            date_from: 2020-12-01
            collected_at: 2022-02-09T08:45:50.406032Z
            payment_date: 2020-12-24
          folio: "28"
          xml: =XML-STRING=
          warnings:
            code: warning_code
            message: warning message
    InvoiceEgresoPaginated:
      description: Example of an *Egreso* type invoice.
      summary: Invoice Egreso
      value:
        count: 110
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: null
        results:
        - id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
          link: 1bd948f7-245d-4313-b604-34d1044cb908
          collected_at: 2022-02-09T08:45:50.406032Z
          created_at: 2022-02-09T08:46:20.406032Z
          invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
          invoice_date: 2020-12-24
          status: Vigente
          invoice_type: Egreso
          type: INFLOW
          sender_id: GHTF980303F7
          sender_name: Roberto Martinez Diaz
          sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
          receiver_id: MNMK3203409H1
          receiver_name: ACNE SA DE CV
          receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
          cancelation_status: null
          cancelation_update_date: null
          certification_date: 2020-12-24
          certification_authority: FGV330542BG6
          payment_type: "04"
          payment_type_description: null
          payment_method: PUE
          usage: G03
          place_of_issue: "11000"
          version: "3.3"
          invoice_details:
          - product_identification: "78111500"
            description: Reembolso del servicio
            unit_code: E48
            unit_description: Unidad de servicio
            quantity: 1
            unit_amount: 25
            pre_tax_amount: 25
            tax_percentage: 16
            tax_amount: 4
            total_amount: 29
            retained_taxes: []
            collected_at: 2022-02-09T08:45:50.406032Z
          currency: MXN
          subtotal_amount: 25
          exchange_rate: 1
          tax_amount: 4
          discount_amount: 0
          total_amount: 29
          payments: []
          payroll: null
          folio: "28"
          xml: =XML-STRING=
          warnings:
            code: warning_code
            message: warning message
    InvoiceTrasladoPaginated:
      description: Example of a *Traslado* type invoice.
      summary: Invoice Traslado
      value:
        count: 110
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: null
        results:
        - id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
          link: 1bd948f7-245d-4313-b604-34d1044cb908
          collected_at: 2022-02-09T08:45:50.406032Z
          created_at: 2022-02-09T08:46:20.406032Z
          invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
          invoice_date: 2020-12-24
          status: Vigente
          invoice_type: Traslado
          type: INFLOW
          sender_id: GHTF980303F7
          sender_name: ACNE SA DE CV
          sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
          receiver_id: MNMK3203409H1
          receiver_name: CARGOS S.A. DE C.V.
          receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
          cancelation_status: null
          cancelation_update_date: null
          certification_date: 2020-12-24
          certification_authority: FGV330542BG6
          payment_type: null
          payment_type_description: null
          payment_method: null
          usage: G03
          place_of_issue: "11000"
          version: "3.3"
          invoice_details:
          - description: FLETE
            product_identification: "78101802"
            quantity: 1
            unit_code: E48
            unit_description: Unidad de servicio
            unit_amount: 21000
            pre_tax_amount: 21000
            tax_percentage: 16
            tax_amount: 0
            total_amount: 21000
            retained_taxes: []
            collected_at: 2022-02-09T08:45:50.406032Z
          currency: MXN
          subtotal_amount: 0
          exchange_rate: 1
          tax_amount: 0
          discount_amount: 0
          total_amount: 0
          payments: []
          payroll: null
          folio: "28"
          xml: =XML-STRING=
          warnings:
            code: warning_code
            message: warning message
    InvoiceIngreso:
      description: Example of an *Igreso* type invoice.
      summary: Invoice Ingreso
      value:
      - id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
        link: 1bd948f7-245d-4313-b604-34d1044cb908
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
        invoice_date: 2020-12-24
        status: Vigente
        invoice_type: Ingreso
        type: OUTFLOW
        sender_id: GHTF980303F7
        sender_name: Roberto Martinez Diaz
        sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
        receiver_id: MNMK3203409H1
        receiver_name: ACNE SA DE CV
        receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
        cancelation_status: null
        cancelation_update_date: null
        certification_date: 2020-12-24
        certification_authority: FGV330542BG6
        payment_type: "04"
        payment_type_description: null
        payment_method: PUE
        usage: G03
        place_of_issue: "11000"
        version: "3.3"
        invoice_details:
        - description: Servicios de mensajería.
          product_identification: "78102206"
          quantity: 1
          unit_code: E48
          unit_description: Unidad de servicio
          unit_amount: 25
          pre_tax_amount: 25
          tax_percentage: 16
          tax_amount: 4
          total_amount: 29
          retained_taxes: []
          collected_at: 2022-02-09T08:45:50.406032Z
        currency: MXN
        subtotal_amount: 25
        exchange_rate: 1
        tax_amount: 4
        discount_amount: 0
        total_amount: 29
        payments: []
        payroll: null
        folio: "28"
        xml: =XML-STRING=
        warnings:
          code: warning_code
          message: warning message
    InvoicePago:
      description: Example of a *Pago* type invoice.
      summary: Invoice Pago
      value:
      - id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
        link: 1bd948f7-245d-4313-b604-34d1044cb908
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
        invoice_date: 2020-12-24
        status: Vigente
        invoice_type: Pago
        type: OUTFLOW
        sender_id: GHTF980303F7
        sender_name: Roberto Martinez Diaz
        sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
        receiver_id: MNMK3203409H1
        receiver_name: ACNE SA DE CV
        receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
        cancelation_status: null
        cancelation_update_date: null
        certification_date: 2020-12-24
        certification_authority: FGV330542BG6
        payment_type: null
        payment_type_description: null
        payment_method: null
        usage: P01
        place_of_issue: "11000"
        version: "3.3"
        invoice_details:
        - description: Pago
          product_identification: "84111506"
          quantity: 1
          unit_amount: 0
          unit_code: ACT
          unit_description: null
          pre_tax_amount: 0
          tax_percentage: 0
          tax_amount: 0
          total_amount: 0
          retained_taxes: []
          collected_at: 2022-02-09T08:45:50.406032Z
        currency: MXN
        subtotal_amount: 0
        exchange_rate: null
        tax_amount: 0
        discount_amount: 0
        total_amount: 0
        payments:
        - date: 2020-03-17T12:00:00.000Z
          payment_type: "03"
          currency: BRL
          exchange_rate: "3.75"
          amount: 8000.5
          operation_number: "831840"
          beneficiary_rfc: BNM840515VB1
          beneficiary_account_number: "12343453245633"
          payer_rfc: BKJM840515VB1
          payer_account_number: "13343663245699"
          payer_bank_name: CITI BANAMEX
          related_documents:
          - invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
            currency: MXN
            payment_method: PPD
            installment: 1
            previous_balance: 18877.84
            amount_paid: 8000
            outstanding_balance: 10877.84
        payroll: null
        folio: "28"
        xml: =XML-STRING=
        warnings:
          code: warning_code
          message: warning message
    InvoiceNomina:
      description: Example of a *Nomina* type invoice.
      summary: Invoice Nomina
      value:
      - id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
        link: 1bd948f7-245d-4313-b604-34d1044cb908
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
        invoice_date: 2020-12-24
        status: Vigente
        invoice_type: Nómina
        type: INFLOW
        sender_id: GHTF980303F7
        sender_name: ACNE SA DE CV
        sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
        receiver_id: MNMK3203409H1
        receiver_name: Roberto Martinez Diaz
        receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
        cancelation_status: null
        cancelation_update_date: null
        certification_date: 2020-12-24
        certification_authority: FGV330542BG6
        payment_type: "99"
        payment_type_description: null
        payment_method: PUE
        usage: P01
        place_of_issue: "11000"
        version: "3.3"
        invoice_details:
        - description: Pago de nómina
          product_identification: "84111505"
          quantity: 1
          unit_code: ACT
          unit_description: null
          unit_amount: 20400.1
          total_amount: 20400.1
          pre_tax_amount: 20400.1
          tax_percentage: 0
          tax_amount: 0
          retained_taxes: []
          collected_at: 2022-02-09T08:45:50.406032Z
        currency: MXN
        subtotal_amount: 20400.1
        exchange_rate: 1
        tax_amount: 0
        discount_amount: 5000
        total_amount: 15400.1
        payments: []
        payroll:
          days: 30
          type: O
          amount: 20400.1
          date_to: 2020-12-31
          version: "1.2"
          date_from: 2020-12-01
          collected_at: 2022-02-09T08:45:50.406032Z
          payment_date: 2020-12-24
        folio: "28"
        xml: =XML-STRING=
        warnings:
          code: warning_code
          message: warning message
    InvoiceEgreso:
      description: Example of an *Egreso* type invoice.
      summary: Invoice Egreso
      value:
      - id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
        link: 1bd948f7-245d-4313-b604-34d1044cb908
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
        invoice_date: 2020-12-24
        status: Vigente
        invoice_type: Egreso
        type: INFLOW
        sender_id: GHTF980303F7
        sender_name: Roberto Martinez Diaz
        sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
        receiver_id: MNMK3203409H1
        receiver_name: ACNE SA DE CV
        receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
        cancelation_status: null
        cancelation_update_date: null
        certification_date: 2020-12-24
        certification_authority: FGV330542BG6
        payment_type: "04"
        payment_type_description: null
        payment_method: PUE
        usage: G03
        place_of_issue: "11000"
        version: "3.3"
        invoice_details:
        - product_identification: "78111500"
          description: Reembolso del servicio
          unit_code: E48
          unit_description: Unidad de servicio
          quantity: 1
          unit_amount: 25
          pre_tax_amount: 25
          tax_percentage: 16
          tax_amount: 4
          total_amount: 29
          retained_taxes: []
          collected_at: 2022-02-09T08:45:50.406032Z
        currency: MXN
        subtotal_amount: 25
        exchange_rate: 1
        tax_amount: 4
        discount_amount: 0
        total_amount: 29
        payments: []
        payroll: null
        folio: "28"
        xml: =XML-STRING=
        warnings:
          code: warning_code
          message: warning message
    InvoiceTraslado:
      description: Example of a *Traslado* type invoice.
      summary: Invoice Traslado
      value:
      - id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
        link: 1bd948f7-245d-4313-b604-34d1044cb908
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
        invoice_date: 2020-12-24
        status: Vigente
        invoice_type: Traslado
        type: INFLOW
        sender_id: GHTF980303F7
        sender_name: ACNE SA DE CV
        sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
        receiver_id: MNMK3203409H1
        receiver_name: CARGOS S.A. DE C.V.
        receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
        cancelation_status: null
        cancelation_update_date: null
        certification_date: 2020-12-24
        certification_authority: FGV330542BG6
        payment_type: null
        payment_type_description: null
        payment_method: null
        usage: G03
        place_of_issue: "11000"
        version: "3.3"
        invoice_details:
        - description: FLETE
          product_identification: "78101802"
          quantity: 1
          unit_code: E48
          unit_description: Unidad de servicio
          unit_amount: 21000
          pre_tax_amount: 21000
          tax_percentage: 16
          tax_amount: 0
          total_amount: 21000
          retained_taxes: []
          collected_at: 2022-02-09T08:45:50.406032Z
        currency: MXN
        subtotal_amount: 0
        exchange_rate: 1
        tax_amount: 0
        discount_amount: 0
        total_amount: 0
        payments: []
        payroll: null
        folio: "28"
        xml: =XML-STRING=
        warnings:
          code: warning_code
          message: warning message
    InvoiceIngresoDetail:
      description: Example of an *Igreso* type invoice.
      summary: Invoice Ingreso
      value:
        id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
        link: 1bd948f7-245d-4313-b604-34d1044cb908
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
        invoice_date: 2020-12-24
        status: Vigente
        invoice_type: Ingreso
        type: OUTFLOW
        sender_id: GHTF980303F7
        sender_name: Roberto Martinez Diaz
        sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
        receiver_id: MNMK3203409H1
        receiver_name: ACNE SA DE CV
        receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
        cancelation_status: null
        cancelation_update_date: null
        certification_date: 2020-12-24
        certification_authority: FGV330542BG6
        payment_type: "04"
        payment_type_description: null
        payment_method: PUE
        usage: G03
        place_of_issue: "11000"
        version: "3.3"
        invoice_details:
        - description: Servicios de mensajería.
          product_identification: "78102206"
          quantity: 1
          unit_code: E48
          unit_description: Unidad de servicio
          unit_amount: 25
          pre_tax_amount: 25
          tax_percentage: 16
          tax_amount: 4
          total_amount: 29
          retained_taxes: []
          collected_at: 2022-02-09T08:45:50.406032Z
        currency: MXN
        subtotal_amount: 25
        exchange_rate: 1
        tax_amount: 4
        discount_amount: 0
        total_amount: 29
        payments: []
        payroll: null
        folio: "28"
        xml: =XML-STRING=
        warnings:
          code: warning_code
          message: warning message
    InvoicePagoDetail:
      description: Example of a *Pago* type invoice.
      summary: Invoice Pago
      value:
        id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
        link: 1bd948f7-245d-4313-b604-34d1044cb908
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
        invoice_date: 2020-12-24
        status: Vigente
        invoice_type: Pago
        type: OUTFLOW
        sender_id: GHTF980303F7
        sender_name: Roberto Martinez Diaz
        sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
        receiver_id: MNMK3203409H1
        receiver_name: ACNE SA DE CV
        receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
        cancelation_status: null
        cancelation_update_date: null
        certification_date: 2020-12-24
        certification_authority: FGV330542BG6
        payment_type: null
        payment_type_description: null
        payment_method: null
        usage: P01
        place_of_issue: "11000"
        version: "3.3"
        invoice_details:
        - description: Pago
          product_identification: "84111506"
          quantity: 1
          unit_amount: 0
          unit_code: ACT
          unit_description: null
          pre_tax_amount: 0
          tax_percentage: 0
          tax_amount: 0
          total_amount: 0
          retained_taxes: []
          collected_at: 2022-02-09T08:45:50.406032Z
        currency: MXN
        subtotal_amount: 0
        exchange_rate: null
        tax_amount: 0
        discount_amount: 0
        total_amount: 0
        payments:
        - date: 2020-03-17T12:00:00.000Z
          payment_type: "03"
          currency: BRL
          exchange_rate: "3.75"
          amount: 8000.5
          operation_number: "831840"
          beneficiary_rfc: BNM840515VB1
          beneficiary_account_number: "12343453245633"
          payer_rfc: BKJM840515VB1
          payer_account_number: "13343663245699"
          payer_bank_name: CITI BANAMEX
          related_documents:
          - invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
            currency: MXN
            payment_method: PPD
            installment: 1
            previous_balance: 18877.84
            amount_paid: 8000
            outstanding_balance: 10877.84
        payroll: null
        folio: "28"
        xml: =XML-STRING=
        warnings:
          code: warning_code
          message: warning message
    InvoiceNominaDetail:
      description: Example of a *Nomina* type invoice.
      summary: Invoice Nomina
      value:
        id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
        link: 1bd948f7-245d-4313-b604-34d1044cb908
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
        invoice_date: 2020-12-24
        status: Vigente
        invoice_type: Nómina
        type: INFLOW
        sender_id: GHTF980303F7
        sender_name: ACNE SA DE CV
        sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
        receiver_id: MNMK3203409H1
        receiver_name: Roberto Martinez Diaz
        receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
        cancelation_status: null
        cancelation_update_date: null
        certification_date: 2020-12-24
        certification_authority: FGV330542BG6
        payment_type: "99"
        payment_type_description: null
        payment_method: PUE
        usage: P01
        place_of_issue: "11000"
        version: "3.3"
        invoice_details:
        - description: Pago de nómina
          product_identification: "84111505"
          quantity: 1
          unit_code: ACT
          unit_description: null
          unit_amount: 20400.1
          total_amount: 20400.1
          pre_tax_amount: 20400.1
          tax_percentage: 0
          tax_amount: 0
          retained_taxes: []
          collected_at: 2022-02-09T08:45:50.406032Z
        currency: MXN
        subtotal_amount: 20400.1
        exchange_rate: 1
        tax_amount: 0
        discount_amount: 5000
        total_amount: 15400.1
        payments: []
        payroll:
          days: 30
          type: O
          amount: 20400.1
          date_to: 2020-12-31
          version: "1.2"
          date_from: 2020-12-01
          collected_at: 2022-02-09T08:45:50.406032Z
          payment_date: 2020-12-24
        folio: "28"
        xml: =XML-STRING=
        warnings:
          code: warning_code
          message: warning message
    InvoiceEgresoDetail:
      description: Example of an *Egreso* type invoice.
      summary: Invoice Egreso
      value:
        id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
        link: 1bd948f7-245d-4313-b604-34d1044cb908
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
        invoice_date: 2020-12-24
        status: Vigente
        invoice_type: Egreso
        type: INFLOW
        sender_id: GHTF980303F7
        sender_name: Roberto Martinez Diaz
        sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
        receiver_id: MNMK3203409H1
        receiver_name: ACNE SA DE CV
        receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
        cancelation_status: null
        cancelation_update_date: null
        certification_date: 2020-12-24
        certification_authority: FGV330542BG6
        payment_type: "04"
        payment_type_description: null
        payment_method: PUE
        usage: G03
        place_of_issue: "11000"
        version: "3.3"
        invoice_details:
        - product_identification: "78111500"
          description: Reembolso del servicio
          unit_code: E48
          unit_description: Unidad de servicio
          quantity: 1
          unit_amount: 25
          pre_tax_amount: 25
          tax_percentage: 16
          tax_amount: 4
          total_amount: 29
          retained_taxes: []
          collected_at: 2022-02-09T08:45:50.406032Z
        currency: MXN
        subtotal_amount: 25
        exchange_rate: 1
        tax_amount: 4
        discount_amount: 0
        total_amount: 29
        payments: []
        payroll: null
        folio: "28"
        xml: =XML-STRING=
        warnings:
          code: warning_code
          message: warning message
    InvoiceTrasladoDetail:
      description: Example of a *Traslado* type invoice.
      summary: Invoice Traslado
      value:
        id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
        link: 1bd948f7-245d-4313-b604-34d1044cb908
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
        invoice_date: 2020-12-24
        status: Vigente
        invoice_type: Traslado
        type: INFLOW
        sender_id: GHTF980303F7
        sender_name: ACNE SA DE CV
        sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
        receiver_id: MNMK3203409H1
        receiver_name: CARGOS S.A. DE C.V.
        receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
        cancelation_status: null
        cancelation_update_date: null
        certification_date: 2020-12-24
        certification_authority: FGV330542BG6
        payment_type: null
        payment_type_description: null
        payment_method: null
        usage: G03
        place_of_issue: "11000"
        version: "3.3"
        invoice_details:
        - description: FLETE
          product_identification: "78101802"
          quantity: 1
          unit_code: E48
          unit_description: Unidad de servicio
          unit_amount: 21000
          pre_tax_amount: 21000
          tax_percentage: 16
          tax_amount: 0
          total_amount: 21000
          retained_taxes: []
          collected_at: 2022-02-09T08:45:50.406032Z
        currency: MXN
        subtotal_amount: 0
        exchange_rate: 1
        tax_amount: 0
        discount_amount: 0
        total_amount: 0
        payments: []
        payroll: null
        folio: "28"
        xml: =XML-STRING=
        warnings:
          code: warning_code
          message: warning message
    TaxReturnPersonalListPaginated:
      description: Example of a list of personal tax returns
      summary: Tax Return Personal
      value:
        count: 101
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: null
        results:
        - id: 02589c41-ba22-4d44-8558-8111cc751318
          link: 19697249-01b8-443e-a451-76bfc5fbeebf
          collected_at: 2022-02-09T08:45:50.406032Z
          created_at: 2022-02-09T08:46:20.406032Z
          informacion_general:
            ejercicio: 2018
            fecha_hora_presentacion: 2020-01-07T17:28:00-05:00
            numero_operacion: "00000000001"
            periodo_declaracion: Del Ejercicio
            rfc: ABCD111111A11
            tipo_declaracion: Normal
            nombre: JOHN DOE
          sueldos_salarios:
            retenedores:
            - rfc_retenedor: ABCD222222A22
              nombre_denominacion_razon_social: ACME CORP
              ingresos_exentos: 118263
              ingreso_anual: 2265
              subsidio_empleo: 0
            impuesto_retenido: 19497
            ingreso_anual: 118263
            ingresos_acumulables: 115998
            ingresos_exentos: 2265
            subsidio_empleo: 0
          servicios_profesionales:
            deducciones_autorizadas:
              deducciones_autorizadas: 11870
              otras_deducciones: null
              detalle_deducciones:
              - tipo_deduccion: GASTOS
                concepto: GASOLINA Y MANTENIMIENTO DE TRANSPORTE
                monto_detallado: 9682
              - tipo_deduccion: GASTOS
                concepto: COMPRAS Y GASTOS GENERALES
                monto_detallado: 2188
              total_deducciones_autorizadas: 11870
            ingresos:
              ingresos_acumulables: 46000
              ingresos_exentos: null
              otros_ingresos: null
              total_ingresos: 46000
            resultado_fiscal:
              utilidad_fiscal: 34130
              ptu_pagada_ejercicio: 0
              perdidas_fiscales_ejercicios_anteriores_aplicadas: 0
              utilidad_gravable: 34130
            pagos_provisionales:
              pagos_provisionales_efectuados_en_ejercicio: 0
            retenciones_isr:
              isr_retenido_personas_morales: 4600
          deducciones_personales:
            honorarios_medicos_dentales_hospitalarios:
            - rfc_emisor: ABC333333A33
              monto_deducible: 258.83
            - rfc_emisor: ABC333333A33
              monto_deducible: 258.83
            - rfc_emisor: ABC444444A44
              monto_deducible: 1000
            - rfc_emisor: ABC333333A33
              monto_deducible: 258.83
            - rfc_emisor: ABC333333A33
              monto_deducible: 258.83
            - rfc_emisor: ABC333333A33
              monto_deducible: 258.83
            - rfc_emisor: ABC333333A33
              monto_deducible: 258.83
            - rfc_emisor: ABC444444A44
              monto_deducible: 502.34
            - rfc_emisor: ABC333333A33
              monto_deducible: 258.83
            - rfc_emisor: ABC333333A33
              monto_deducible: 258.83
            - rfc_emisor: ABC333333A33
              monto_deducible: 258.83
            - rfc_emisor: ABC444444A55
              monto_deducible: 14183.1
            - rfc_emisor: ABC444444A66
              monto_deducible: 1658
            - rfc_emisor: ABC444444A77
              monto_deducible: 1600
            - rfc_emisor: ABC444444A88
              monto_deducible: 1064
            - rfc_emisor: ABC444444A99
              monto_deducible: 927.57
            donativos:
            - rfc_emisor: ABC555555A99
              monto_deducible: 10.03
            aportaciones_voluntarias_complementarias_al_sar:
            - rfc_emisor: ABC666666A99
              monto_deducible: 12.03
            - rfc_emisor: ABC777777A99
              monto_deducible: 87.22
            primas_por_seguros_de_gasto_medico:
            - rfc_emisor: ABC777777A99
              monto_deducible: 20.03
          determinacion_impuesto:
            base_gravable: 126864
            deducciones_personales: 23264
            ingresos_acumulables: 150128
            isr_favorable: 10308
            isr_conforme_tarifa_final: 13789
            isr_retenido: 24097
            num_clabe: "000000000000000001"
            nombre_banco: BANCO SA
            pagos_provisionales: 0
            titular_clabe_permite_verificacion: SÍ
            accion_saldo_a_favor: DEVOLUCIÓN
          retenciones:
            sueldos_salarios:
            - rfc_retenedor: ABC444444A99
              monto_retenciones: 118263
              retenciones_isr: 19497
            dividendos: []
            servicios_profesionales:
            - rfc_retenedor: ABC444444A00
              monto_retenciones: 46000
              retenciones_isr: 4600
          dividendos:
            monto_acumulable_dividendos_utilidades: null
            monto_total_isr_pagado_sociedad: null
          datos_informativos:
            credito_fiscal_autorizado_proyectos_investigacion_desarrollo: 0
            credito_fiscal_autorizado_proyectos_apoyo_deporte_alto_rendimiento: 0
            credito_fiscal_autorizado_proyectos_inversion_artes: 0
            credito_fiscal_autorizado_inversion_equipos_fijos: 0
            credito_fiscal_autorizado_produccion_distribucion_cinematografica: 0
            saldo_credito_fiscal_autorizado_anteriores_investigacion_desarrollo: 0
            saldo_credito_fiscal_anteriores_proyectos_inversion_artes: 0
            saldo_credito_fiscal_anteriores_produccion_distribucion_cinematografica: 0
          pdf: =PDF-STRING=
          receipt_pdf: =PDF-STRING=
          type: yearly
        - collected_at: 2022-02-09T08:45:50.406032Z
          informacion_general:
            rfc: null
            nombre: null
            tipo_declaracion: null
            ejercicio: null
            periodo_declaracion: null
            fecha_hora_presentacion: null
            numero_operacion: null
          isr_pfae:
            determinacion:
              ingresos_periodos_anteriores: 0
              ingresos_periodo: 0
              total_ingresos: 0
              compras_gastos_periodos_anteriores: 1596
              compra_gastos_periodo: 399
              total_compras_gastos: 1995
              base_gravable_pago_provisional: 0
              isr_causado: 0
              pagos_provisionales_efectuados_anterioridad: 0
              isr_retenido_periodos_anteriores: 0
              impuesto_retenido: 0
              isr_cargo: 0
            detalle_del_pago:
              a_cargo: 0
              total_contribuciones: 0
              total_aplicaciones: 0
              cantidad_a_cargo: 0
              cantidad_a_pagar: 0
          iva:
            determinacion:
              actividades_gravadas_tasa_16: 0
              actividades_gravadas_tasa_0: 0
              actividades_exentas: 0
              iva_cobrado_periodo_tasa_16: 0
              iva_acreditable_periodo: 0
              iva_retenido: 0
              saldo_a_favor: null
              impuesto_a_favor: null
            detalle_del_pago:
              total_contribuciones: 0
              total_aplicaciones: 0
              cantidad_a_cargo: 0
              cantidad_a_pagar: 0
              a_favor: null
          pdf: ===PDF_BINARY====
          receipt_pdf: ===PDF_BINARY====
          type: monthly
    TaxReturnPersonalListMonthlyPaginatedPFAE:
      description: Example of a list of PFAE-type monthly personal tax returns
      summary: Tax Return Personal Monthly (PFAe)
      value:
        count: 101
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: null
        results:
        - collected_at: 2022-02-09T08:45:50.406032Z
          created_at: 2022-02-09T08:46:20.406032Z
          informacion_general:
            rfc: null
            nombre: null
            tipo_declaracion: null
            ejercicio: null
            periodo_declaracion: null
            fecha_hora_presentacion: null
            numero_operacion: null
          isr:
            tipo: PFAE
            determinacion:
              ingresos_periodos_anteriores: 0
              ingresos_periodo: 0
              total_ingresos: 0
              compras_gastos_periodos_anteriores: 1596
              compra_gastos_periodo: 399
              total_compras_gastos: 1995
              base_gravable_pago_provisional: 0
              isr_causado: 0
              pagos_provisionales_efectuados_anterioridad: 0
              isr_retenido_periodos_anteriores: 0
              impuesto_retenido: 0
              isr_cargo: 0
            detalle_del_pago:
              a_cargo: 0
              parte_actualizada: 0
              recargos: 0
              total_contribuciones: 0
              total_aplicaciones: 0
              cantidad_a_cargo: 0
              cantidad_a_pagar: 0
          iva:
            determinacion:
              actividades_gravadas_tasa_16: 0
              actividades_gravadas_tasa_0: 0
              actividades_exentas: 0
              iva_cobrado_periodo_tasa_16: 0
              iva_acreditable_periodo: 0
              iva_retenido: 0
              saldo_a_favor: null
              impuesto_a_favor: null
            detalle_del_pago:
              total_contribuciones: 0
              total_aplicaciones: 0
              cantidad_a_cargo: 0
              cantidad_a_pagar: 0
              a_favor: null
          pdf: ===PDF_BINARY====
          receipt_pdf: ===PDF_BINARY====
          type: monthly
    TaxReturnPersonalListMonthlyPaginatedPFAI:
      description: Example of a list of PFAI-type monthly personal tax returns
      summary: Tax Return Personal Monthly (PFAI)
      value:
        count: 101
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: null
        results:
        - collected_at: 2022-02-09T08:45:50.406032Z
          created_at: 2022-02-09T08:46:20.406032Z
          informacion_general:
            rfc: null
            nombre: null
            tipo_declaracion: null
            ejercicio: null
            periodo_declaracion: null
            fecha_hora_presentacion: null
            numero_operacion: null
          isr:
            tipo: PFAE
            determinacion:
              ingresos_periodos_anteriores: 0
              ingresos_periodo: 0
              total_ingresos: 0
              compras_gastos_periodos_anteriores: 1596
              compra_gastos_periodo: 399
              total_compras_gastos: 1995
              base_gravable_pago_provisional: 0
              isr_causado: 0
              pagos_provisionales_efectuados_anterioridad: 0
              isr_retenido_periodos_anteriores: 0
              impuesto_retenido: 0
              isr_cargo: 0
              tipo_de_deduccíon: dedduccíon opicional
              optas_por_el_cálculo_acumulado: "NO"
              deduccíon_opcional: 700
              impuesto_predial: 0
              total_deducciones_autorizadas: 700
              tienes_facilidades_administrativas_o_estímulos_deducibles: "NO"
            detalle_del_pago:
              a_cargo: 0
              parte_actualizada: 0
              recargos: 0
              total_contribuciones: 0
              total_aplicaciones: 0
              cantidad_a_cargo: 0
              cantidad_a_pagar: 0
          iva:
            determinacion:
              actividades_gravadas_tasa_16: 0
              actividades_gravadas_tasa_0: 0
              actividades_exentas: 0
              iva_cobrado_periodo_tasa_16: 0
              iva_acreditable_periodo: 0
              iva_retenido: 0
              saldo_a_favor: null
              impuesto_a_favor: null
              impuesto_a_cargo: 54
              cantidad_a_cargo: 54
            detalle_del_pago:
              total_contribuciones: 0
              total_aplicaciones: 0
              cantidad_a_cargo: 0
              cantidad_a_pagar: 0
              a_favor: null
          pdf: ===PDF_BINARY====
          receipt_pdf: ===PDF_BINARY====
          type: monthly
    TaxReturnBusinessListPaginated:
      description: Example of a list of business tax returns
      summary: Tax Return Business
      value:
        count: 101
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: null
        results:
        - id: 02589c41-ba22-4d44-8558-8111cc751318
          link: 19697249-01b8-443e-a451-76bfc5fbeebf
          collected_at: 2022-02-09T08:45:50.406032Z
          created_at: 2022-02-09T08:46:20.406032Z
          informacion_general:
            ejercicio: 2018
            fecha_hora_presentacion: 2020-01-07T16:55:00-06:00
            numero_operacion: "000000000001"
            periodo_declaracion: Del Ejercicio
            rfc: ABC1111111A1
            tipo_declaracion: Normal
            tipo_complementaria: null
            denominacion_razon_social: ACME CORP
          datos_adicionales:
            indica_si_optas_por_dictaminar_tus_estados_financieros: "NO"
            estas_obligado_a_presentar_la_informacion_sobre_tu_situacion_fiscal: "NO"
            estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero: SIN
              SELECCIÓN
            estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero_inferiores_100mdp: SIN
              SELECCIÓN
            optas_por_presentar_informacion_sobre_tu_situacion_fiscal: SIN SELECCIÓN
            indica_si_te_dedicas_exclisivamente_a_generacion_energia_fuentes_renovables_o_cogeneracion_electricidad_eficiente: "NO"
          estado_resultados:
            ventas_servicios_nacionales:
              partes_relacionadas: null
              partes_no_relacionadas: 911165
              total: 911165
            ventas_servicios_extranjero:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            devoluciones_descuentos_bonificaciones_ventas_nacionales:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            devoluciones_descuentos_bonificaciones_ventas_extranjero:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            ingresos_netos:
              partes_relacionadas: null
              partes_no_relacionadas: 911165
              total: 911165
            inventario_inicial: null
            compras_netas_nacionales:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            compras_netas_importacion:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            inventario_final: null
            costo_mercancias: null
            mano_de_obra:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            maquilas:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            gastos_indirectos_fabricacion:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            costo_ventas_servicios: null
            utilidad_bruta: 911165
            perdida_bruta: null
            gastos_operacion:
              partes_relacionadas: null
              partes_no_relacionadas: 499540
              total: 499540
            utilidad_operacion: 411625
            perdida_operacion: null
            intereses_devengados_a_favor_nacionales:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            intereses_devengados_a_favor_extranjero:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            intereses_moratorios_a_favor_nacionales:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            intereses_moratorios_a_favor_extranjero:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            ganancia_cambiaria:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            intereses_devengados_a_cargo_nacionales:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            intereses_devengados_a_cargo_extranjero:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            intereses_moratorios_a_cargo_nacionales:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            intereses_moratorios_a_cargo_extranjero:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            perdida_cambiaria:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            resultado_posicion_monetaria_favorable:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            resultado_posicion_monetaria_desfavorable:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            otras_operaciones_financieras_nacionales:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            otras_operaciones_financieras_extranjero:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            otras_operaciones_financieras: null
            resultado_integral_financiamiento: null
            otros_gastos_nacionales: null
            otros_gastos_extranjero: null
            otros_gastos: null
            otros_productos_nacionales: null
            otros_productos_extranjero: null
            otros_productos: null
            ingresos_partidas_discontinuas_extraordinarias: null
            gastos_partidas_discontinuas_extraordinarias: null
            utilidad_antes_impuesto: 411625
            perdida_antes_impuesto: null
            isr: 113002
            ietu: null
            impac: null
            ptu: null
            utilidad_participacion_subsidiaria: null
            perdida_participacion_subsidiaria: null
            efectos_reexpresion_favorables_excepto_resultado_posicion_monetaria: null
            efectos_reexpresion_desfavorables_excepto_resultado_posicion_monetaria: null
            utilidad_neta: 298623
            perdida_neta: null
          estado_posicion_financiera_balance:
            activo:
              efectivo_caja_depositos_instituciones_credito_nacionales: 726644
              efectivo_caja_depositos_instituciones_credito_extranjero: null
              inversiones_valores_instituciones_nacionales_excepto_acciones: null
              inversiones_valores_instituciones_extranjero_excepto_acciones: null
              cuentas_documentos_por_cobrar_nacionales:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              cuentas_documentos_por_cobrar_extranjero:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              contribuciones_a_favor: null
              inventarios: null
              otros_activos_circulantes: 13277
              inversiones_en_acciones_nacionales: null
              inversiones_en_acciones_extranjero: null
              inversiones_en_acciones_total: null
              terrenos: null
              construcciones: null
              construcciones_en_proceso: null
              maquinaria_y_equipo: null
              mobiliario_y_equipo_oficina: null
              equipo_de_computo: null
              equipo_de_transporte: null
              otros_activos_fijos: 12756
              depreciacion_acumulada: -106
              cargos_y_gastos_diferidos: 9319
              amortizacion_acumulada: null
              suma_activo: 761890
            pasivo:
              cuentas_documentos_por_pagar_nacionales:
                partes_relacionadas: null
                partes_no_relacionadas: 268227
                total: 268227
              cuentas_documentos_por_pagar_extranjero:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              contribuciones_por_pagar: 223490
              anticipos_de_clientes:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              aportaciones_futuros_aumentos_de_capital: null
              otros_pasivos: null
              suma_pasivo: 491717
            capital_contable:
              capital_social_proveniente_aportaciones: 10000
              capital_social_proveniente_capitalizacion: null
              reservas: null
              otras_cuentas_capital: null
              aportaciones_futuros_aumentos_de_capital: null
              utilidades_acumuladas: null
              utilidad_del_ejercicio: 298623
              perdidas_acumuladas: -38450
              perdida_del_ejercicio: null
              exceso_en_actualizacion_capital: null
              insuficiencia_en_actualizacion_capital: null
              actualizacion_del_capital_contable: null
              suma_capital_contable: 270173
              suma_pasivo_mas_capital_contable: 761890
          conciliacion_entre_resultado_contable_fiscal:
            utilidad_o_perdida_neta: 298623
            efectos_reexpresion: null
            resultado_posicion_monetaria: null
            utilidad_o_perdida_neta_historica: 298623
            ingresos_fiscales_no_contables: 95
            ajuste_anual_inflacion_acumulable: 95
            anticipos_de_clientes: null
            intereses_moratorios_efectivamente_cobrados: null
            ganancia_en_enajenacion_acciones_por_reembolso_capital: null
            ganancia_en_enajenacion_de_terrenos_y_activo_fijo: null
            inventario_acumulable_del_ejercicio: null
            otros_ingresos_fiscales_no_contables: null
            deducciones_contables_no_fiscales: 117415
            costo_de_ventas_contable: null
            depreciacion_y_amortizacion_contable: 106
            gastos_que_no_reunen_requisitos_fiscales: 4307
            isr_ietu_impac_ptu: 113002
            perdida_contable_enajenacion_de_acciones: null
            perdida_contable_enajenacion_de_activo_fijo: null
            perdida_en_participacion_subsidiaria: null
            intereses_devengados_que_exceden_valor_mercado_y_moratorios_pagados_o_no: 0
            otras_deducciones_contables_no_fiscales: 0
            deducciones_fiscales_no_contables: 0
            ajuste_anual_inflacion_deducible: null
            costo_vendido_fiscal: null
            deduccion_inversiones: null
            estimulo_fiscal_por_deduccion_inmediata_inversiones: null
            donacion_bienes_basicos_subsistencia_humana: 0
            estimulo_fiscal_contratacion_personas_discapacidad_yo_mayores: 0
            deduccion_impuesto_sobre_renta_retenido_personas_discapacidad_yo_mayores: 0
            perdida_fiscal_en_enajenacion_acciones: null
            perdida_fiscal_en_enajenacion_de_terrenos_y_activo_fijo: null
            intereses_moratorios_efectivamente_pagados: null
            otras_deducciones_fiscales_no_contables: null
            ingresos_contables_no_fiscales: null
            intereses_moratorios_devengados_a_favor_cobrados_o_no: null
            anticipos_de_clientes_ejercicios_anteriores: null
            saldos_a_favor_impuestos_y_su_actualizacion: null
            utilidad_contable_enajenacion_de_activo_fijo: null
            utilidad_contable_enajenacion_de_acciones: null
            utilidad_en_participacion_subsidiaria: null
            otros_ingresos_contables_no_fiscales: null
            utilidad_o_perdida_fiscal_antes_de_ptu: 416133
          deducciones_autorizadas:
            sueldos_salarios: null
            honorarios_pagados_a_personas_fisicas: null
            regalias_y_asistencia_tecnica: null
            donativos_otorgados: null
            uso_o_goce_temporal_de_bienes_pagados_a_personas_fisicas: null
            fletes_y_acarreos_pagados_a_parsonas_fisicas: null
            contribuciones_pagadas_excepto_isr_ietu_impac_iva_ieps: null
            seguros_fianzas: null
            perdida_por_creditos_incobrables: null
            viaticos_y_gastos_viaje: 59527
            combustible_y_lubricantes: null
            credito_al_salario_no_disminuido_de_contribuciones: null
            aportaciones_sar_infonavit_y_jubilaciones_vejez: null
            aportaciones_para_fondos_de_pensiones_y_jubilaciones: null
            cuotas_imss: null
            consumos_en_restaurantes: 11254
            perdida_por_operaciones_financieras_derivadas: null
            deduccion_por_concepto_de_ayuda_alimentaria_para_trabajadores: null
            monto_total_pagos_que_sean_ingresos_exentos_para_trabajador: null
            monto_deducible_al_47_pagos_son_ingresos_exentos_para_trabajador: null
            monto_deducible_al_53_pagos_son_ingresos_exentos_para_trabajador: null
            uso_o_goce_temporal_de_automoviles_baterias_electricas_o_electricos_con_motor_combustion_o_hidrogeno: null
            otras_deducciones_autorizadas: 424346
            total_deducciones_autorizadas: 495127
          cifras_cierre_ejercicio:
            perdidas_fiscales_de_ejercicios_anteriores_pendientes_de_amortizar_actualiazadas: null
            saldo_promedio_anual_de_creditos: 142795
            saldo_promedio_anual_de_deudas: 144765
            coeficiente_de_utilidad_por_aplicar_en_ejercicio_siguiente: 0.4567
            porcentaje_de_participacion_consolidable: null
            isr_causado_en_exceso_del_impac_en_los_3_ejercicios_anteriores_pendientes_aplicar: null
            saldo_actualizado_de_cuenta_de_utilidad_fiscal_neta_2013_y_anteriores: null
            saldo_actualizado_de_cuenta_de_utilidad_fiscal_neta_a_partir_2014_y_anteriores: null
            saldo_actualizado_de_cuenta_de_utilidad_fiscal_reinvertida: null
            saldo_actualizado_de_cuenta_de_capital_de_aportacion: null
            saldo_de_cuenta_de_utilidad_fiscal_neta_por_inversion_en_renovables: null
          determinacion_del_impuesto_sobre_la_renta:
            determinacion_del_impuesto_sobre_la_renta:
              total_ingresos_acumulables: 911260
              total_deducciones_autorizadas_y_deduccion_inmediata_inversiones: 495126
              deduccion_adicional_por_pago_servicios_personales_en_operacion_maquila: null
              utilidad_o_perdida_fiscal_antes_de_ptu: 416134
              ptu_pagada_en_el_ejercicio: null
              utilidad_fiscal_del_ejercicio: 416134
              perdidas_fiscales_de_ejercicios_anteriores_que_se_aplican_en_ejercicio: 39462
              resultado_fiscal: 376672
              impuesto_causado_en_ejercicio: 113002
              tienes_estimulos_fiscales_a_acreditar: SIN SELECCIÓN
              impuesto_sobre_la_renta_del_ejercicio: 113002
              pagos_provisionales_efectuados_enterados_a_federacion: null
              impuesto_retenido_al_contribuyente: null
              impuesto_acreditable_pagado_en_extranjero: null
              impuesto_acreditable_por_dividendos_o_utilidades_distribuidos: null
              otras_cantidades_a_cargo: null
              otras_cantidades_a_favor: null
              diferencia_a_cargo: 113002
              isr_a_cargo_del_ejercicio: 113002
              isr_a_favor_del_ejercicio: null
            impuesto_sobre_ingresos_sujetos_a_regimenes_fiscales_preferentes: null
            datos_informativos_ejercicio:
              monto_aplicado_del_estimulo_fiscal_de_chatarrizacion: 0
              monto_deducible_de_pagos_efectuados_por_uso_o_goce_temporal_automoviles: 0
              impac_recuperado_en_ejercicio_derivado_de_deconsolidacion: 0
              ingresos_obtenidos_por_apoyos_gubernamentales: 0
              gastos_realidados_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico: 0
              credito_fiscal_autorizado_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico_pendiente_aplicar: 0
              credito_fiscal_autorizado_en_ejercicio_por_proyectos_de_inversion_en_artes_pendiente_aplicar: 0
              credito_fiscal_autorizado_en_ejercicio_por_inversion_en_proyectos_programas_para_deporte_de_alto_rendimiento_pendiente_aplicar: 0
              saldo_pendiente_aplicar_por_inversion_en_equipos_de_alimentacion_vehiculos_electricos: 0
              credito_fiscal_autorizado_en_ejercicio_a_produccion_distribucion_cinematografica_nacional_pendiente_aplicar: 0
            datos_informativos_ejercicios_anteriores_aplicados_en_ejercicio:
              total_estimulo_produccion_y_distribucion_cinematografica_nacional_ejercicios_anteriores_aplicado_en_ejercicio: null
              ? saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_inversion_en_proyectos_programas_para_deporte_alto_rendimiento_pendiente_aplicar
              : 0
              saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_investigacion_desarrollo_tecnologico_pendiente_aplicar: 0
              saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_inversion_artes_pendiente_aplicar: 0
              saldo_credito_fiscal_autorizado_ejercicios_anteriores_a_produccion_distribucion_nacional_pendiente_aplicar: 0
          dividendos_o_utilidades_distribuidos:
            provenientes_de_cuenta_de_utilidad_fisica_neta_cufin_generada_en_2013_y_anteriores: null
            provenientes_de_cuenta_de_utilidad_fisica_neta_cufin_generada_a_partir_de_2014: null
            provenientes_de_cuenta_de_utilidad_fisica_neta_reinvertida_cufinre: null
            no_provenientes_de_cufin_ni_cufinre_en_efectivo: null
            no_provenientes_de_cufin_ni_cufinre_en_acciones: null
            monto_del_impuesto_pagado_no_proveniente_de_cufin_ni_cufinre: null
            monto_del_impuesto_pagado_de_utilidades_provenientes_de_cufinre: null
            ? provenientes_de_cuenta_de_utilidad_fiscal_neta_por_inversion_en_energia_de_fuentes_renovables_o_sistemas_cogeneracion_electricidad_eficiente
            : null
          detalle_pago_r1_isr_personas_morales:
            a_cargo: 113002
            parte_actualizada: null
            recargos: null
            multa_por_correccion: null
            total_contribuciones: 113002
            desea_aplicar_alguna_compensacion_o_estimulo: "NO"
            cantidad_a_cargo: 113002
            opta_por_pagar_parcialidades: SIN SELECCIÓN
            importe_de_primera_parcialidad: null
            importe_sin_primera_parcialidad: null
            cantidad_a_favor: null
            cantidad_a_pagar: 113002
          pdf: =PDF-STRING=
          receipt_pdf: =PDF-STRING=
          type: yearly
        - collected_at: 2022-02-09T08:45:50.406032Z
          informacion_general:
            rfc: DPA950805RR2
            denominacion_razon_social: Aloha Mahalo SC
            tipo_declaracion: Normal
            ejercicio: 2020
            periodo_declaracion: Diciembre
            fecha_hora_presentacion: 2021-01-18T19:24:00-06:00
            numero_operacion: "400475119"
            tipo_complementaria: null
          determinacion_isr:
            personas_morales_regimen_general:
              suma_ingresos_nominales_meses_anteriores_ejercicio: 69848414
              estimulos_acreditables: null
              ingresos_nominales_mes_que_declara: 6482479
              reducciones: null
              total_ingresos_nominales: 76330893
              impuestos_del_periodo: 284098
              coeficiente_utilidad: 0.2318
              pagos_provisionales_efectuados_anterioridad: 303039
              utilidad_fiscal_pago_provisional: 17693501
              impuesto_retenido: 29925
              ptu: null
              otras_cantidades_a_cargo_contribuyente: null
              iventario_acumulable: null
              otras_cantidades_a_favor_contribuyente: null
              anticipos_rendimientos_distribuidos_periodo: 16746509
              diferencia_a_cargo: 0
              perdidas_fiscales_ejercicios_anteriores_pendientes: null
              estimulo_fiscal_deduccion_inmediata: null
              impuesto_correspondiente_participacion_consolidable: null
              deduccion_adicional_fomento_primer_empleo: null
              porcentaje_participacion_consolidable: null
              base_gravable_pago_provisional: 946992
              impuesto_a_cargo: 0
              isr_causado: 284098
              ieps_alcohol: null
          detalle_pago_isr:
            r1_isr_personas_morales:
              a_cargo: 0
              acreditamiento_sorteo_buen_fin: null
              parte_actualizada: null
              diesel_marino: null
              recargos: null
              total_aplicaciones: 0
              multa_por_correccion: null
              fecha_pago_realizado_anterioridad: null
              total_de_contribuciones: 0
              monto_pagado_anterioridad: null
              credito_al_salario: null
              importe_pagado_ultimas_48_hrs: null
              subsidio_empleo: null
              cantidad_a_cargo: 0
              impuesto_a_depositos_efectivo_acreditable: null
              aplica_primera_parcialidad: "NO"
              compensaciones: null
              credito_ieps_diesel: null
              diesel_automotriz_transporte: null
              cantidad_a_favor: null
              uso_infraestructura_carretera_cuota: null
              cantidad_a_pagar: 0
              otros_estimulos: null
              importe_1ra_parcialidad: null
              importe_sin_1ra_parcialidad: null
            r12_isr_retenciones_por_salarios:
              a_cargo: 415945
              acreditamiento_sorteos: null
              parte_actualizada: 0
              diesel_marino: null
              recargos: 0
              total_aplicaciones: 379
              multa_por_correccion: null
              fecha_pago_realizado_anterioridad: null
              total_de_contribuciones: 415945
              monto_pagado_anterioridad: null
              credito_al_salario: null
              importe_pagado_ultimas_48_hrs: null
              subsidio_empleo: 379
              cantidad_a_cargo: 415566
              impuesto_a_depositos_efectivo_acreditable: null
              aplica_primera_parcialidad: "NO"
              compensaciones: null
              credito_ieps_diesel: null
              diesel_automotriz_transporte: null
              cantidad_a_favor: null
              otros_estimulos: null
              cantidad_a_pagar: 415566
              importe_1ra_parcialidad: null
              importe_sin_1ra_parcialidad: null
            r13_isr_retenciones_por_asimilados_a_salarios:
              a_cargo: 254588
              acreditamiento_sorteos: null
              parte_actualizada: 0
              diesel_marino: null
              recargos: 0
              total_aplicaciones: 0
              multa_por_correccion: null
              fecha_pago_realizado_anterioridad: null
              total_de_contribuciones: 254588
              monto_pagado_anterioridad: null
              credito_al_salario: null
              importe_pagado_ultimas_48_hrs: null
              subsidio_empleo: null
              cantidad_a_cargo: 254588
              impuesto_a_depositos_efectivo_acreditable: null
              aplica_primera_parcialidad: "NO"
              compensaciones: null
              credito_ieps_diesel: null
              diesel_automotriz_transporte: null
              cantidad_a_favor: null
              otros_estimulos: null
              cantidad_a_pagar: 254588
              importe_1ra_parcialidad: null
              importe_sin_1ra_parcialidad: null
            r14_isr_retenciones_por_servicios_profesionales:
              a_cargo: 104482
              acreditamiento_sorteos: null
              parte_actualizada: 0
              diesel_marino: null
              recargos: 0
              total_aplicaciones: 0
              multa_por_correccion: null
              fecha_pago_realizado_anterioridad: null
              total_de_contribuciones: 104482
              monto_pagado_anterioridad: null
              credito_al_salario: null
              importe_pagado_ultimas_48_hrs: null
              subsidio_empleo: null
              cantidad_a_cargo: 104482
              impuesto_a_depositos_efectivo_acreditable: null
              aplica_primera_parcialidad: "NO"
              compensaciones: null
              credito_ieps_diesel: null
              diesel_automotriz_transporte: null
              cantidad_a_favor: null
              otros_estimulos: null
              cantidad_a_pagar: 104482
              importe_1ra_parcialidad: null
              importe_sin_1ra_parcialidad: null
          determinacion_iva:
            montos_actos_actividades_pagados:
              total_actos_actividades_pagados_tasa_16: 2094706
              total_actos_actividades_pagados_importacion_bienes_tasa_11: null
              total_actos_actividades_sujetos_estimulo_rfn: 0
              total_actos_actividades_pagados_tasa_0: 0
              total_actos_actividades_pagados_importacion_bienes_tasa_16: null
              total_actos_actividades_pagados_no_paga_iva: 0
            detalle_total_actos_actividades_pagados_tasa_16:
              intereses_pagados_tasa_16: null
              otros_actos_pagados_tasa_16: 2094706
              regalias_pagadas_tasa_16: null
              total_actos_pagados_tasa_16: 2094706
            determinacion_iva_acreditable:
              total_iva_actos_actividades_pagados_tasa_16: 335153
              iva_trasladado_o_pagado_adquisicion_bienes_distintos_inversiones_actos_no_obligados_pago_impuesto: null
              iva_pagado_sujeto_estimulo_rfn: null
              iva_trasladado_o_pagado_importacion_inversiones_actos_no_obligados_pago_impuesto: null
              total_actos_actividades_pagados_importacion_bienes_tasa_16: 0
              iva_bienes_utilizados_indistintamente_actos_gravados_o_actos_no_obligados_pago_impuesto: 0
              proporcion_utilizada_conforme_art_5: null
              total_iva_trasladado_contribuyente: 335153
              proporcion_utilizada_conforme_art_5_b: null
              iva_trasladado_adquisicion_bienes_distintos_inversiones_actos_gravados: 335153
              iva_pagado_importacion_adquisicion_bienes_distintos_inversiones_actos_gravados: null
              iva_acreditable: 335153
              monto_acreditable_actualizado_a_incrementar_derivado_ajuste: null
              iva_pagado_importacion_inversiones_actos_gravados: null
              total_iva_acreditable_periodo: 335153
              total_iva_actos_actividades_gravados: 335153
              total_actos_actividades_pagados_importacion_bienes_tasa_11: null
              iva_trasladado_adquisicion_inversiones_actos_gravados: null
              iva_acreditable_bienes_utilizados_indistintamente_actos_gravados_o_actos_no_obligados_pago_impuesto: null
            determinacion_iva:
              valor_actos_actividades_gravados_tasa_16: 6457950
              otras_cantidades_a_favor_contribuyente: null
              valor_actos_actividades_gravados_tasa_11: null
              cantidad_a_cargo: 312421
              valor_actos_actividades_gravados_tasa_0_exportacion: null
              saldo_a_favor: null
              valor_actos_actividades_gravados_tasa_9_otros: null
              devolucion_inmediata_obtenida: null
              suma_actos_actividades_gravados: 6457950
              saldo_a_favor_periodo: 0
              valor_actos_actividades_no_se_deba_pagar_impuesto_exentos: null
              acreditamiento_saldo_favor_periodos_anteriores: null
              impuesto_causado: 1033272
              diferencia_a_cargo: 312421
              cantidad_actualizada_a_reintegrarse_derivada_de_ajuste: null
              ieps_acreditable_alcohol: null
              iva_retenido_al_contribuyente: 385698
              impuesto_a_cargo: 312421
              total_iva_acreditable: 335153
              remanente_saldo_favor_ieps_alcohol: null
              otras_cantidades_a_cargo_contribuyente: null
            detalle_valor_actos_actividades_gravados_tasa_16:
              intereses_cobrados_tasa_16: null
              otros_actos_actividades_gravados_tasa_16: 6457950
              regalias_entre_partes_relacionadas_tasa_16: null
              total_actos_actividades_gravados_tasa_16: 6457950
          detalle_pago_iva:
            r21_iva:
              a_cargo: 312421
              cretificados_tesofe: null
              a_favor: null
              diesel_marino: null
              parte_actualizada: 0
              total_aplicaciones: 0
              recargos: 0
              fecha_pago_realizado_anterioridad: null
              multa_por_correccion: null
              monto_pagado_anterioridad: null
              total_de_contribuciones: 312421
              importe_pagado_ultimas_48_hrs: null
              credito_al_salario: null
              cantidad_a_cargo: 312421
              subsidio_empleo: null
              aplica_primera_parcialidad: "NO"
              compensaciones: null
              diesel_automotriz_transporte: null
              uso_infraestructura_carretera_cuota: null
              cantidad_a_favor: null
              otros_estimulos: null
              cantidad_a_pagar: 312421
              importe_1ra_parcialidad: null
              importe_sin_1ra_parcialidad: null
            r21_iva_retenciones:
              a_cargo: 111448
              diesel_marino: null
              parte_actualizada: 0
              total_aplicaciones: 0
              recargos: 0
              fecha_pago_realizado_anterioridad: null
              multa_por_correccion: null
              monto_pagado_anterioridad: null
              total_de_contribuciones: 111448
              importe_pagado_ultimas_48_hrs: null
              credito_al_salario: null
              cantidad_a_cargo: 111448
              subsidio_empleo: null
              aplica_primera_parcialidad: "NO"
              compensaciones: null
              credito_ieps_diesel: null
              otros_estimulos: null
              cantidad_a_favor: null
              cretificados_tesofe: null
              cantidad_a_pagar: 111448
              importe_1ra_parcialidad: null
              importe_sin_1ra_parcialidad: null
          pdf: ===PDF_BINARY====
          receipt_pdf: ===PDF_BINARY====
          type: monthly
    TaxReturnBusinessListMonthlyPaginated:
      description: Example of a list of monthly business tax returns
      summary: Tax Return Business Monthly
      value:
        count: 101
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: null
        results:
        - collected_at: 2022-02-09T08:45:50.406032Z
          created_at: 2022-02-09T08:46:20.406032Z
          informacion_general:
            rfc: DPA950805RR2
            denominacion_razon_social: Aloha Mahalo SC
            tipo_declaracion: Normal
            ejercicio: 2020
            periodo_declaracion: Diciembre
            fecha_hora_presentacion: 2021-01-18T19:24:00-06:00
            numero_operacion: "400475119"
            tipo_complementaria: null
          determinacion_isr:
            personas_morales_regimen_general:
              suma_ingresos_nominales_meses_anteriores_ejercicio: 69848414
              estimulos_acreditables: null
              ingresos_nominales_mes_que_declara: 6482479
              reducciones: null
              total_ingresos_nominales: 76330893
              impuestos_del_periodo: 284098
              coeficiente_utilidad: 0.2318
              pagos_provisionales_efectuados_anterioridad: 303039
              utilidad_fiscal_pago_provisional: 17693501
              impuesto_retenido: 29925
              ptu: null
              otras_cantidades_a_cargo_contribuyente: null
              iventario_acumulable: null
              otras_cantidades_a_favor_contribuyente: null
              anticipos_rendimientos_distribuidos_periodo: 16746509
              diferencia_a_cargo: 0
              perdidas_fiscales_ejercicios_anteriores_pendientes: null
              estimulo_fiscal_deduccion_inmediata: null
              impuesto_correspondiente_participacion_consolidable: null
              deduccion_adicional_fomento_primer_empleo: null
              porcentaje_participacion_consolidable: null
              base_gravable_pago_provisional: 946992
              impuesto_a_cargo: 0
              isr_causado: 284098
              ieps_alcohol: null
          detalle_pago_isr:
            r1_isr_personas_morales:
              a_cargo: 0
              acreditamiento_sorteo_buen_fin: null
              parte_actualizada: null
              diesel_marino: null
              recargos: null
              total_aplicaciones: 0
              multa_por_correccion: null
              fecha_pago_realizado_anterioridad: null
              total_de_contribuciones: 0
              monto_pagado_anterioridad: null
              credito_al_salario: null
              importe_pagado_ultimas_48_hrs: null
              subsidio_empleo: null
              cantidad_a_cargo: 0
              impuesto_a_depositos_efectivo_acreditable: null
              aplica_primera_parcialidad: "NO"
              compensaciones: null
              credito_ieps_diesel: null
              diesel_automotriz_transporte: null
              cantidad_a_favor: null
              uso_infraestructura_carretera_cuota: null
              cantidad_a_pagar: 0
              otros_estimulos: null
              importe_1ra_parcialidad: null
              importe_sin_1ra_parcialidad: null
            r12_isr_retenciones_por_salarios:
              a_cargo: 415945
              acreditamiento_sorteos: null
              parte_actualizada: 0
              diesel_marino: null
              recargos: 0
              total_aplicaciones: 379
              multa_por_correccion: null
              fecha_pago_realizado_anterioridad: null
              total_de_contribuciones: 415945
              monto_pagado_anterioridad: null
              credito_al_salario: null
              importe_pagado_ultimas_48_hrs: null
              subsidio_empleo: 379
              cantidad_a_cargo: 415566
              impuesto_a_depositos_efectivo_acreditable: null
              aplica_primera_parcialidad: "NO"
              compensaciones: null
              credito_ieps_diesel: null
              diesel_automotriz_transporte: null
              cantidad_a_favor: null
              otros_estimulos: null
              cantidad_a_pagar: 415566
              importe_1ra_parcialidad: null
              importe_sin_1ra_parcialidad: null
            r13_isr_retenciones_por_asimilados_a_salarios:
              a_cargo: 254588
              acreditamiento_sorteos: null
              parte_actualizada: 0
              diesel_marino: null
              recargos: 0
              total_aplicaciones: 0
              multa_por_correccion: null
              fecha_pago_realizado_anterioridad: null
              total_de_contribuciones: 254588
              monto_pagado_anterioridad: null
              credito_al_salario: null
              importe_pagado_ultimas_48_hrs: null
              subsidio_empleo: null
              cantidad_a_cargo: 254588
              impuesto_a_depositos_efectivo_acreditable: null
              aplica_primera_parcialidad: "NO"
              compensaciones: null
              credito_ieps_diesel: null
              diesel_automotriz_transporte: null
              cantidad_a_favor: null
              otros_estimulos: null
              cantidad_a_pagar: 254588
              importe_1ra_parcialidad: null
              importe_sin_1ra_parcialidad: null
            r14_isr_retenciones_por_servicios_profesionales:
              a_cargo: 104482
              acreditamiento_sorteos: null
              parte_actualizada: 0
              diesel_marino: null
              recargos: 0
              total_aplicaciones: 0
              multa_por_correccion: null
              fecha_pago_realizado_anterioridad: null
              total_de_contribuciones: 104482
              monto_pagado_anterioridad: null
              credito_al_salario: null
              importe_pagado_ultimas_48_hrs: null
              subsidio_empleo: null
              cantidad_a_cargo: 104482
              impuesto_a_depositos_efectivo_acreditable: null
              aplica_primera_parcialidad: "NO"
              compensaciones: null
              credito_ieps_diesel: null
              diesel_automotriz_transporte: null
              cantidad_a_favor: null
              otros_estimulos: null
              cantidad_a_pagar: 104482
              importe_1ra_parcialidad: null
              importe_sin_1ra_parcialidad: null
          determinacion_iva:
            montos_actos_actividades_pagados:
              total_actos_actividades_pagados_tasa_16: 2094706
              total_actos_actividades_pagados_importacion_bienes_tasa_11: null
              total_actos_actividades_sujetos_estimulo_rfn: 0
              total_actos_actividades_pagados_tasa_0: 0
              total_actos_actividades_pagados_importacion_bienes_tasa_16: null
              total_actos_actividades_pagados_no_paga_iva: 0
            detalle_total_actos_actividades_pagados_tasa_16:
              intereses_pagados_tasa_16: null
              otros_actos_pagados_tasa_16: 2094706
              regalias_pagadas_tasa_16: null
              total_actos_pagados_tasa_16: 2094706
            determinacion_iva_acreditable:
              total_iva_actos_actividades_pagados_tasa_16: 335153
              iva_trasladado_o_pagado_adquisicion_bienes_distintos_inversiones_actos_no_obligados_pago_impuesto: null
              iva_pagado_sujeto_estimulo_rfn: null
              iva_trasladado_o_pagado_importacion_inversiones_actos_no_obligados_pago_impuesto: null
              total_actos_actividades_pagados_importacion_bienes_tasa_16: 0
              iva_bienes_utilizados_indistintamente_actos_gravados_o_actos_no_obligados_pago_impuesto: 0
              proporcion_utilizada_conforme_art_5: null
              total_iva_trasladado_contribuyente: 335153
              proporcion_utilizada_conforme_art_5_b: null
              iva_trasladado_adquisicion_bienes_distintos_inversiones_actos_gravados: 335153
              iva_pagado_importacion_adquisicion_bienes_distintos_inversiones_actos_gravados: null
              iva_acreditable: 335153
              monto_acreditable_actualizado_a_incrementar_derivado_ajuste: null
              iva_pagado_importacion_inversiones_actos_gravados: null
              total_iva_acreditable_periodo: 335153
              total_iva_actos_actividades_gravados: 335153
              total_actos_actividades_pagados_importacion_bienes_tasa_11: null
              iva_trasladado_adquisicion_inversiones_actos_gravados: null
              iva_acreditable_bienes_utilizados_indistintamente_actos_gravados_o_actos_no_obligados_pago_impuesto: null
            determinacion_iva:
              valor_actos_actividades_gravados_tasa_16: 6457950
              otras_cantidades_a_favor_contribuyente: null
              valor_actos_actividades_gravados_tasa_11: null
              cantidad_a_cargo: 312421
              valor_actos_actividades_gravados_tasa_0_exportacion: null
              saldo_a_favor: null
              valor_actos_actividades_gravados_tasa_9_otros: null
              devolucion_inmediata_obtenida: null
              suma_actos_actividades_gravados: 6457950
              saldo_a_favor_periodo: 0
              valor_actos_actividades_no_se_deba_pagar_impuesto_exentos: null
              acreditamiento_saldo_favor_periodos_anteriores: null
              impuesto_causado: 1033272
              diferencia_a_cargo: 312421
              cantidad_actualizada_a_reintegrarse_derivada_de_ajuste: null
              ieps_acreditable_alcohol: null
              iva_retenido_al_contribuyente: 385698
              impuesto_a_cargo: 312421
              total_iva_acreditable: 335153
              remanente_saldo_favor_ieps_alcohol: null
              otras_cantidades_a_cargo_contribuyente: null
            detalle_valor_actos_actividades_gravados_tasa_16:
              intereses_cobrados_tasa_16: null
              otros_actos_actividades_gravados_tasa_16: 6457950
              regalias_entre_partes_relacionadas_tasa_16: null
              total_actos_actividades_gravados_tasa_16: 6457950
          detalle_pago_iva:
            r21_iva:
              a_cargo: 312421
              cretificados_tesofe: null
              a_favor: null
              diesel_marino: null
              parte_actualizada: 0
              total_aplicaciones: 0
              recargos: 0
              fecha_pago_realizado_anterioridad: null
              multa_por_correccion: null
              monto_pagado_anterioridad: null
              total_de_contribuciones: 312421
              importe_pagado_ultimas_48_hrs: null
              credito_al_salario: null
              cantidad_a_cargo: 312421
              subsidio_empleo: null
              aplica_primera_parcialidad: "NO"
              compensaciones: null
              diesel_automotriz_transporte: null
              uso_infraestructura_carretera_cuota: null
              cantidad_a_favor: null
              otros_estimulos: null
              cantidad_a_pagar: 312421
              importe_1ra_parcialidad: null
              importe_sin_1ra_parcialidad: null
            r21_iva_retenciones:
              a_cargo: 111448
              diesel_marino: null
              parte_actualizada: 0
              total_aplicaciones: 0
              recargos: 0
              fecha_pago_realizado_anterioridad: null
              multa_por_correccion: null
              monto_pagado_anterioridad: null
              total_de_contribuciones: 111448
              importe_pagado_ultimas_48_hrs: null
              credito_al_salario: null
              cantidad_a_cargo: 111448
              subsidio_empleo: null
              aplica_primera_parcialidad: "NO"
              compensaciones: null
              credito_ieps_diesel: null
              otros_estimulos: null
              cantidad_a_favor: null
              cretificados_tesofe: null
              cantidad_a_pagar: 111448
              importe_1ra_parcialidad: null
              importe_sin_1ra_parcialidad: null
          pdf: ===PDF_BINARY====
          receipt_pdf: ===PDF_BINARY====
          type: monthly
    TaxReturnPersonalList:
      description: Example of a list of personal tax returns
      summary: Tax Return Personal
      value:
      - id: 02589c41-ba22-4d44-8558-8111cc751318
        link: 19697249-01b8-443e-a451-76bfc5fbeebf
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        informacion_general:
          ejercicio: 2018
          fecha_hora_presentacion: 2020-01-07T17:28:00-05:00
          numero_operacion: "00000000001"
          periodo_declaracion: Del Ejercicio
          rfc: ABCD111111A11
          tipo_declaracion: Normal
          nombre: JOHN DOE
        sueldos_salarios:
          retenedores:
          - rfc_retenedor: ABCD222222A22
            nombre_denominacion_razon_social: ACME CORP
            ingresos_exentos: 118263
            ingreso_anual: 2265
            subsidio_empleo: 0
          impuesto_retenido: 19497
          ingreso_anual: 118263
          ingresos_acumulables: 115998
          ingresos_exentos: 2265
          subsidio_empleo: 0
        servicios_profesionales:
          deducciones_autorizadas:
            deducciones_autorizadas: 11870
            otras_deducciones: null
            detalle_deducciones:
            - tipo_deduccion: GASTOS
              concepto: GASOLINA Y MANTENIMIENTO DE TRANSPORTE
              monto_detallado: 9682
            - tipo_deduccion: GASTOS
              concepto: COMPRAS Y GASTOS GENERALES
              monto_detallado: 2188
            total_deducciones_autorizadas: 11870
          ingresos:
            ingresos_acumulables: 46000
            ingresos_exentos: null
            otros_ingresos: null
            total_ingresos: 46000
          resultado_fiscal:
            utilidad_fiscal: 34130
            ptu_pagada_ejercicio: 0
            perdidas_fiscales_ejercicios_anteriores_aplicadas: 0
            utilidad_gravable: 34130
          pagos_provisionales:
            pagos_provisionales_efectuados_en_ejercicio: 0
          retenciones_isr:
            isr_retenido_personas_morales: 4600
        deducciones_personales:
          honorarios_medicos_dentales_hospitalarios:
          - rfc_emisor: ABC333333A33
            monto_deducible: 258.83
          - rfc_emisor: ABC333333A33
            monto_deducible: 258.83
          - rfc_emisor: ABC444444A44
            monto_deducible: 1000
          - rfc_emisor: ABC333333A33
            monto_deducible: 258.83
          - rfc_emisor: ABC333333A33
            monto_deducible: 258.83
          - rfc_emisor: ABC333333A33
            monto_deducible: 258.83
          - rfc_emisor: ABC333333A33
            monto_deducible: 258.83
          - rfc_emisor: ABC444444A44
            monto_deducible: 502.34
          - rfc_emisor: ABC333333A33
            monto_deducible: 258.83
          - rfc_emisor: ABC333333A33
            monto_deducible: 258.83
          - rfc_emisor: ABC333333A33
            monto_deducible: 258.83
          - rfc_emisor: ABC444444A55
            monto_deducible: 14183.1
          - rfc_emisor: ABC444444A66
            monto_deducible: 1658
          - rfc_emisor: ABC444444A77
            monto_deducible: 1600
          - rfc_emisor: ABC444444A88
            monto_deducible: 1064
          - rfc_emisor: ABC444444A99
            monto_deducible: 927.57
          donativos:
          - rfc_emisor: ABC555555A99
            monto_deducible: 10.03
          aportaciones_voluntarias_complementarias_al_sar:
          - rfc_emisor: ABC666666A99
            monto_deducible: 12.03
          - rfc_emisor: ABC777777A99
            monto_deducible: 87.22
          primas_por_seguros_de_gasto_medico:
          - rfc_emisor: ABC777777A99
            monto_deducible: 20.03
        determinacion_impuesto:
          base_gravable: 126864
          deducciones_personales: 23264
          ingresos_acumulables: 150128
          isr_favorable: 10308
          isr_conforme_tarifa_final: 13789
          isr_retenido: 24097
          num_clabe: "000000000000000001"
          nombre_banco: BANCO SA
          pagos_provisionales: 0
          titular_clabe_permite_verificacion: SÍ
          accion_saldo_a_favor: DEVOLUCIÓN
        retenciones:
          sueldos_salarios:
          - rfc_retenedor: ABC444444A99
            monto_retenciones: 118263
            retenciones_isr: 19497
          dividendos: []
          servicios_profesionales:
          - rfc_retenedor: ABC444444A00
            monto_retenciones: 46000
            retenciones_isr: 4600
        dividendos:
          monto_acumulable_dividendos_utilidades: null
          monto_total_isr_pagado_sociedad: null
        datos_informativos:
          credito_fiscal_autorizado_proyectos_investigacion_desarrollo: 0
          credito_fiscal_autorizado_proyectos_apoyo_deporte_alto_rendimiento: 0
          credito_fiscal_autorizado_proyectos_inversion_artes: 0
          credito_fiscal_autorizado_inversion_equipos_fijos: 0
          credito_fiscal_autorizado_produccion_distribucion_cinematografica: 0
          saldo_credito_fiscal_autorizado_anteriores_investigacion_desarrollo: 0
          saldo_credito_fiscal_anteriores_proyectos_inversion_artes: 0
          saldo_credito_fiscal_anteriores_produccion_distribucion_cinematografica: 0
        pdf: =PDF-STRING=
        receipt_pdf: =PDF-STRING=
    TaxReturnPersonalListMonthlyPFAE:
      description: Example of a PFAE-type monthly personal tax return
      summary: Tax Return Personal Monthly (PFAE)
      value:
      - collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        informacion_general:
          rfc: null
          nombre: null
          tipo_declaracion: null
          ejercicio: null
          periodo_declaracion: null
          fecha_hora_presentacion: null
          numero_operacion: null
        isr:
          tipo: PFAE
          determinacion:
            ingresos_periodos_anteriores: 0
            ingresos_periodo: 0
            total_ingresos: 0
            compras_gastos_periodos_anteriores: 1596
            compra_gastos_periodo: 399
            total_compras_gastos: 1995
            base_gravable_pago_provisional: 0
            isr_causado: 0
            pagos_provisionales_efectuados_anterioridad: 0
            isr_retenido_periodos_anteriores: 0
            impuesto_retenido: 0
            isr_cargo: 0
          detalle_del_pago:
            a_cargo: 0
            parte_actualizada: 0
            recargos: 0
            total_contribuciones: 0
            total_aplicaciones: 0
            cantidad_a_cargo: 0
            cantidad_a_pagar: 0
        iva:
          determinacion:
            actividades_gravadas_tasa_16: 0
            actividades_gravadas_tasa_0: 0
            actividades_exentas: 0
            iva_cobrado_periodo_tasa_16: 0
            iva_acreditable_periodo: 0
            iva_retenido: 0
            saldo_a_favor: null
            impuesto_a_favor: null
          detalle_del_pago:
            total_contribuciones: 0
            total_aplicaciones: 0
            cantidad_a_cargo: 0
            cantidad_a_pagar: 0
            a_favor: null
        pdf: ===PDF_BINARY====
        receipt_pdf: ===PDF_BINARY====
        type: monthly
    TaxReturnPersonalListMonthlyPFAI:
      description: Example of a PFAI-type monthly personal tax return
      summary: Tax Return Personal Monthly (PFAI)
      value:
      - collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        informacion_general:
          rfc: null
          nombre: null
          tipo_declaracion: null
          ejercicio: null
          periodo_declaracion: null
          fecha_hora_presentacion: null
          numero_operacion: null
        isr:
          tipo: PFAE
          determinacion:
            ingresos_periodos_anteriores: 0
            ingresos_periodo: 0
            total_ingresos: 0
            compras_gastos_periodos_anteriores: 1596
            compra_gastos_periodo: 399
            total_compras_gastos: 1995
            base_gravable_pago_provisional: 0
            isr_causado: 0
            pagos_provisionales_efectuados_anterioridad: 0
            isr_retenido_periodos_anteriores: 0
            impuesto_retenido: 0
            isr_cargo: 0
            tipo_de_deduccíon: dedduccíon opicional
            optas_por_el_cálculo_acumulado: "NO"
            deduccíon_opcional: 700
            impuesto_predial: 0
            total_deducciones_autorizadas: 700
            tienes_facilidades_administrativas_o_estímulos_deducibles: "NO"
          detalle_del_pago:
            a_cargo: 0
            parte_actualizada: 0
            recargos: 0
            total_contribuciones: 0
            total_aplicaciones: 0
            cantidad_a_cargo: 0
            cantidad_a_pagar: 0
        iva:
          determinacion:
            actividades_gravadas_tasa_16: 0
            actividades_gravadas_tasa_0: 0
            actividades_exentas: 0
            iva_cobrado_periodo_tasa_16: 0
            iva_acreditable_periodo: 0
            iva_retenido: 0
            saldo_a_favor: null
            impuesto_a_favor: null
            impuesto_a_cargo: 54
            cantidad_a_cargo: 54
          detalle_del_pago:
            total_contribuciones: 0
            total_aplicaciones: 0
            cantidad_a_cargo: 0
            cantidad_a_pagar: 0
            a_favor: null
        pdf: ===PDF_BINARY====
        receipt_pdf: ===PDF_BINARY====
        type: monthly
    TaxReturnBusinessList:
      description: Example of a list of business tax returns
      summary: Tax Return Business
      value:
      - id: 02589c41-ba22-4d44-8558-8111cc751318
        link: 19697249-01b8-443e-a451-76bfc5fbeebf
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        informacion_general:
          ejercicio: 2018
          fecha_hora_presentacion: 2020-01-07T16:55:00-06:00
          numero_operacion: "000000000001"
          periodo_declaracion: Del Ejercicio
          rfc: ABC1111111A1
          tipo_declaracion: Normal
          tipo_complementaria: null
          denominacion_razon_social: ACME CORP
        datos_adicionales:
          indica_si_optas_por_dictaminar_tus_estados_financieros: "NO"
          estas_obligado_a_presentar_la_informacion_sobre_tu_situacion_fiscal: "NO"
          estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero: SIN
            SELECCIÓN
          estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero_inferiores_100mdp: SIN
            SELECCIÓN
          optas_por_presentar_informacion_sobre_tu_situacion_fiscal: SIN SELECCIÓN
          indica_si_te_dedicas_exclisivamente_a_generacion_energia_fuentes_renovables_o_cogeneracion_electricidad_eficiente: "NO"
        estado_resultados:
          ventas_servicios_nacionales:
            partes_relacionadas: null
            partes_no_relacionadas: 911165
            total: 911165
          ventas_servicios_extranjero:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          devoluciones_descuentos_bonificaciones_ventas_nacionales:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          devoluciones_descuentos_bonificaciones_ventas_extranjero:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          ingresos_netos:
            partes_relacionadas: null
            partes_no_relacionadas: 911165
            total: 911165
          inventario_inicial: null
          compras_netas_nacionales:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          compras_netas_importacion:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          inventario_final: null
          costo_mercancias: null
          mano_de_obra:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          maquilas:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          gastos_indirectos_fabricacion:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          costo_ventas_servicios: null
          utilidad_bruta: 911165
          perdida_bruta: null
          gastos_operacion:
            partes_relacionadas: null
            partes_no_relacionadas: 499540
            total: 499540
          utilidad_operacion: 411625
          perdida_operacion: null
          intereses_devengados_a_favor_nacionales:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          intereses_devengados_a_favor_extranjero:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          intereses_moratorios_a_favor_nacionales:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          intereses_moratorios_a_favor_extranjero:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          ganancia_cambiaria:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          intereses_devengados_a_cargo_nacionales:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          intereses_devengados_a_cargo_extranjero:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          intereses_moratorios_a_cargo_nacionales:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          intereses_moratorios_a_cargo_extranjero:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          perdida_cambiaria:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          resultado_posicion_monetaria_favorable:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          resultado_posicion_monetaria_desfavorable:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          otras_operaciones_financieras_nacionales:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          otras_operaciones_financieras_extranjero:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          otras_operaciones_financieras: null
          resultado_integral_financiamiento: null
          otros_gastos_nacionales: null
          otros_gastos_extranjero: null
          otros_gastos: null
          otros_productos_nacionales: null
          otros_productos_extranjero: null
          otros_productos: null
          ingresos_partidas_discontinuas_extraordinarias: null
          gastos_partidas_discontinuas_extraordinarias: null
          utilidad_antes_impuesto: 411625
          perdida_antes_impuesto: null
          isr: 113002
          ietu: null
          impac: null
          ptu: null
          utilidad_participacion_subsidiaria: null
          perdida_participacion_subsidiaria: null
          efectos_reexpresion_favorables_excepto_resultado_posicion_monetaria: null
          efectos_reexpresion_desfavorables_excepto_resultado_posicion_monetaria: null
          utilidad_neta: 298623
          perdida_neta: null
        estado_posicion_financiera_balance:
          activo:
            efectivo_caja_depositos_instituciones_credito_nacionales: 726644
            efectivo_caja_depositos_instituciones_credito_extranjero: null
            inversiones_valores_instituciones_nacionales_excepto_acciones: null
            inversiones_valores_instituciones_extranjero_excepto_acciones: null
            cuentas_documentos_por_cobrar_nacionales:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            cuentas_documentos_por_cobrar_extranjero:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            contribuciones_a_favor: null
            inventarios: null
            otros_activos_circulantes: 13277
            inversiones_en_acciones_nacionales: null
            inversiones_en_acciones_extranjero: null
            inversiones_en_acciones_total: null
            terrenos: null
            construcciones: null
            construcciones_en_proceso: null
            maquinaria_y_equipo: null
            mobiliario_y_equipo_oficina: null
            equipo_de_computo: null
            equipo_de_transporte: null
            otros_activos_fijos: 12756
            depreciacion_acumulada: -106
            cargos_y_gastos_diferidos: 9319
            amortizacion_acumulada: null
            suma_activo: 761890
          pasivo:
            cuentas_documentos_por_pagar_nacionales:
              partes_relacionadas: null
              partes_no_relacionadas: 268227
              total: 268227
            cuentas_documentos_por_pagar_extranjero:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            contribuciones_por_pagar: 223490
            anticipos_de_clientes:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            aportaciones_futuros_aumentos_de_capital: null
            otros_pasivos: null
            suma_pasivo: 491717
          capital_contable:
            capital_social_proveniente_aportaciones: 10000
            capital_social_proveniente_capitalizacion: null
            reservas: null
            otras_cuentas_capital: null
            aportaciones_futuros_aumentos_de_capital: null
            utilidades_acumuladas: null
            utilidad_del_ejercicio: 298623
            perdidas_acumuladas: -38450
            perdida_del_ejercicio: null
            exceso_en_actualizacion_capital: null
            insuficiencia_en_actualizacion_capital: null
            actualizacion_del_capital_contable: null
            suma_capital_contable: 270173
            suma_pasivo_mas_capital_contable: 761890
        conciliacion_entre_resultado_contable_fiscal:
          utilidad_o_perdida_neta: 298623
          efectos_reexpresion: null
          resultado_posicion_monetaria: null
          utilidad_o_perdida_neta_historica: 298623
          ingresos_fiscales_no_contables: 95
          ajuste_anual_inflacion_acumulable: 95
          anticipos_de_clientes: null
          intereses_moratorios_efectivamente_cobrados: null
          ganancia_en_enajenacion_acciones_por_reembolso_capital: null
          ganancia_en_enajenacion_de_terrenos_y_activo_fijo: null
          inventario_acumulable_del_ejercicio: null
          otros_ingresos_fiscales_no_contables: null
          deducciones_contables_no_fiscales: 117415
          costo_de_ventas_contable: null
          depreciacion_y_amortizacion_contable: 106
          gastos_que_no_reunen_requisitos_fiscales: 4307
          isr_ietu_impac_ptu: 113002
          perdida_contable_enajenacion_de_acciones: null
          perdida_contable_enajenacion_de_activo_fijo: null
          perdida_en_participacion_subsidiaria: null
          intereses_devengados_que_exceden_valor_mercado_y_moratorios_pagados_o_no: 0
          otras_deducciones_contables_no_fiscales: 0
          deducciones_fiscales_no_contables: 0
          ajuste_anual_inflacion_deducible: null
          costo_vendido_fiscal: null
          deduccion_inversiones: null
          estimulo_fiscal_por_deduccion_inmediata_inversiones: null
          donacion_bienes_basicos_subsistencia_humana: 0
          estimulo_fiscal_contratacion_personas_discapacidad_yo_mayores: 0
          deduccion_impuesto_sobre_renta_retenido_personas_discapacidad_yo_mayores: 0
          perdida_fiscal_en_enajenacion_acciones: null
          perdida_fiscal_en_enajenacion_de_terrenos_y_activo_fijo: null
          intereses_moratorios_efectivamente_pagados: null
          otras_deducciones_fiscales_no_contables: null
          ingresos_contables_no_fiscales: null
          intereses_moratorios_devengados_a_favor_cobrados_o_no: null
          anticipos_de_clientes_ejercicios_anteriores: null
          saldos_a_favor_impuestos_y_su_actualizacion: null
          utilidad_contable_enajenacion_de_activo_fijo: null
          utilidad_contable_enajenacion_de_acciones: null
          utilidad_en_participacion_subsidiaria: null
          otros_ingresos_contables_no_fiscales: null
          utilidad_o_perdida_fiscal_antes_de_ptu: 416133
        deducciones_autorizadas:
          sueldos_salarios: null
          honorarios_pagados_a_personas_fisicas: null
          regalias_y_asistencia_tecnica: null
          donativos_otorgados: null
          uso_o_goce_temporal_de_bienes_pagados_a_personas_fisicas: null
          fletes_y_acarreos_pagados_a_parsonas_fisicas: null
          contribuciones_pagadas_excepto_isr_ietu_impac_iva_ieps: null
          seguros_fianzas: null
          perdida_por_creditos_incobrables: null
          viaticos_y_gastos_viaje: 59527
          combustible_y_lubricantes: null
          credito_al_salario_no_disminuido_de_contribuciones: null
          aportaciones_sar_infonavit_y_jubilaciones_vejez: null
          aportaciones_para_fondos_de_pensiones_y_jubilaciones: null
          cuotas_imss: null
          consumos_en_restaurantes: 11254
          perdida_por_operaciones_financieras_derivadas: null
          deduccion_por_concepto_de_ayuda_alimentaria_para_trabajadores: null
          monto_total_pagos_que_sean_ingresos_exentos_para_trabajador: null
          monto_deducible_al_47_pagos_son_ingresos_exentos_para_trabajador: null
          monto_deducible_al_53_pagos_son_ingresos_exentos_para_trabajador: null
          uso_o_goce_temporal_de_automoviles_baterias_electricas_o_electricos_con_motor_combustion_o_hidrogeno: null
          otras_deducciones_autorizadas: 424346
          total_deducciones_autorizadas: 495127
        cifras_cierre_ejercicio:
          perdidas_fiscales_de_ejercicios_anteriores_pendientes_de_amortizar_actualiazadas: null
          saldo_promedio_anual_de_creditos: 142795
          saldo_promedio_anual_de_deudas: 144765
          coeficiente_de_utilidad_por_aplicar_en_ejercicio_siguiente: 0.4567
          porcentaje_de_participacion_consolidable: null
          isr_causado_en_exceso_del_impac_en_los_3_ejercicios_anteriores_pendientes_aplicar: null
          saldo_actualizado_de_cuenta_de_utilidad_fiscal_neta_2013_y_anteriores: null
          saldo_actualizado_de_cuenta_de_utilidad_fiscal_neta_a_partir_2014_y_anteriores: null
          saldo_actualizado_de_cuenta_de_utilidad_fiscal_reinvertida: null
          saldo_actualizado_de_cuenta_de_capital_de_aportacion: null
          saldo_de_cuenta_de_utilidad_fiscal_neta_por_inversion_en_renovables: null
        determinacion_del_impuesto_sobre_la_renta:
          determinacion_del_impuesto_sobre_la_renta:
            total_ingresos_acumulables: 911260
            total_deducciones_autorizadas_y_deduccion_inmediata_inversiones: 495126
            deduccion_adicional_por_pago_servicios_personales_en_operacion_maquila: null
            utilidad_o_perdida_fiscal_antes_de_ptu: 416134
            ptu_pagada_en_el_ejercicio: null
            utilidad_fiscal_del_ejercicio: 416134
            perdidas_fiscales_de_ejercicios_anteriores_que_se_aplican_en_ejercicio: 39462
            resultado_fiscal: 376672
            impuesto_causado_en_ejercicio: 113002
            tienes_estimulos_fiscales_a_acreditar: SIN SELECCIÓN
            impuesto_sobre_la_renta_del_ejercicio: 113002
            pagos_provisionales_efectuados_enterados_a_federacion: null
            impuesto_retenido_al_contribuyente: null
            impuesto_acreditable_pagado_en_extranjero: null
            impuesto_acreditable_por_dividendos_o_utilidades_distribuidos: null
            otras_cantidades_a_cargo: null
            otras_cantidades_a_favor: null
            diferencia_a_cargo: 113002
            isr_a_cargo_del_ejercicio: 113002
            isr_a_favor_del_ejercicio: null
          impuesto_sobre_ingresos_sujetos_a_regimenes_fiscales_preferentes: null
          datos_informativos_ejercicio:
            monto_aplicado_del_estimulo_fiscal_de_chatarrizacion: 0
            monto_deducible_de_pagos_efectuados_por_uso_o_goce_temporal_automoviles: 0
            impac_recuperado_en_ejercicio_derivado_de_deconsolidacion: 0
            ingresos_obtenidos_por_apoyos_gubernamentales: 0
            gastos_realidados_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico: 0
            credito_fiscal_autorizado_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico_pendiente_aplicar: 0
            credito_fiscal_autorizado_en_ejercicio_por_proyectos_de_inversion_en_artes_pendiente_aplicar: 0
            credito_fiscal_autorizado_en_ejercicio_por_inversion_en_proyectos_programas_para_deporte_de_alto_rendimiento_pendiente_aplicar: 0
            saldo_pendiente_aplicar_por_inversion_en_equipos_de_alimentacion_vehiculos_electricos: 0
            credito_fiscal_autorizado_en_ejercicio_a_produccion_distribucion_cinematografica_nacional_pendiente_aplicar: 0
          datos_informativos_ejercicios_anteriores_aplicados_en_ejercicio:
            total_estimulo_produccion_y_distribucion_cinematografica_nacional_ejercicios_anteriores_aplicado_en_ejercicio: null
            ? saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_inversion_en_proyectos_programas_para_deporte_alto_rendimiento_pendiente_aplicar
            : 0
            saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_investigacion_desarrollo_tecnologico_pendiente_aplicar: 0
            saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_inversion_artes_pendiente_aplicar: 0
            saldo_credito_fiscal_autorizado_ejercicios_anteriores_a_produccion_distribucion_nacional_pendiente_aplicar: 0
        dividendos_o_utilidades_distribuidos:
          provenientes_de_cuenta_de_utilidad_fisica_neta_cufin_generada_en_2013_y_anteriores: null
          provenientes_de_cuenta_de_utilidad_fisica_neta_cufin_generada_a_partir_de_2014: null
          provenientes_de_cuenta_de_utilidad_fisica_neta_reinvertida_cufinre: null
          no_provenientes_de_cufin_ni_cufinre_en_efectivo: null
          no_provenientes_de_cufin_ni_cufinre_en_acciones: null
          monto_del_impuesto_pagado_no_proveniente_de_cufin_ni_cufinre: null
          monto_del_impuesto_pagado_de_utilidades_provenientes_de_cufinre: null
          ? provenientes_de_cuenta_de_utilidad_fiscal_neta_por_inversion_en_energia_de_fuentes_renovables_o_sistemas_cogeneracion_electricidad_eficiente
          : null
        detalle_pago_r1_isr_personas_morales:
          a_cargo: 113002
          parte_actualizada: null
          recargos: null
          multa_por_correccion: null
          total_contribuciones: 113002
          desea_aplicar_alguna_compensacion_o_estimulo: "NO"
          cantidad_a_cargo: 113002
          opta_por_pagar_parcialidades: SIN SELECCIÓN
          importe_de_primera_parcialidad: null
          importe_sin_primera_parcialidad: null
          cantidad_a_favor: null
          cantidad_a_pagar: 113002
        pdf: =PDF-STRING=
        receipt_pdf: =PDF-STRING=
    TaxReturnBusinessListMonthly:
      description: Example of a monthly business tax return
      summary: Tax Return Business Monthly
      value:
      - collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        informacion_general:
          rfc: DPA950805RR2
          denominacion_razon_social: Aloha Mahalo SC
          tipo_declaracion: Normal
          ejercicio: 2020
          periodo_declaracion: Diciembre
          fecha_hora_presentacion: 2021-01-18T19:24:00-06:00
          numero_operacion: "400475119"
          tipo_complementaria: null
        determinacion_isr:
          personas_morales_regimen_general:
            suma_ingresos_nominales_meses_anteriores_ejercicio: 69848414
            estimulos_acreditables: null
            ingresos_nominales_mes_que_declara: 6482479
            reducciones: null
            total_ingresos_nominales: 76330893
            impuestos_del_periodo: 284098
            coeficiente_utilidad: 0.2318
            pagos_provisionales_efectuados_anterioridad: 303039
            utilidad_fiscal_pago_provisional: 17693501
            impuesto_retenido: 29925
            ptu: null
            otras_cantidades_a_cargo_contribuyente: null
            iventario_acumulable: null
            otras_cantidades_a_favor_contribuyente: null
            anticipos_rendimientos_distribuidos_periodo: 16746509
            diferencia_a_cargo: 0
            perdidas_fiscales_ejercicios_anteriores_pendientes: null
            estimulo_fiscal_deduccion_inmediata: null
            impuesto_correspondiente_participacion_consolidable: null
            deduccion_adicional_fomento_primer_empleo: null
            porcentaje_participacion_consolidable: null
            base_gravable_pago_provisional: 946992
            impuesto_a_cargo: 0
            isr_causado: 284098
            ieps_alcohol: null
        detalle_pago_isr:
          r1_isr_personas_morales:
            a_cargo: 0
            acreditamiento_sorteo_buen_fin: null
            parte_actualizada: null
            diesel_marino: null
            recargos: null
            total_aplicaciones: 0
            multa_por_correccion: null
            fecha_pago_realizado_anterioridad: null
            total_de_contribuciones: 0
            monto_pagado_anterioridad: null
            credito_al_salario: null
            importe_pagado_ultimas_48_hrs: null
            subsidio_empleo: null
            cantidad_a_cargo: 0
            impuesto_a_depositos_efectivo_acreditable: null
            aplica_primera_parcialidad: "NO"
            compensaciones: null
            credito_ieps_diesel: null
            diesel_automotriz_transporte: null
            cantidad_a_favor: null
            uso_infraestructura_carretera_cuota: null
            cantidad_a_pagar: 0
            otros_estimulos: null
            importe_1ra_parcialidad: null
            importe_sin_1ra_parcialidad: null
          r12_isr_retenciones_por_salarios:
            a_cargo: 415945
            acreditamiento_sorteos: null
            parte_actualizada: 0
            diesel_marino: null
            recargos: 0
            total_aplicaciones: 379
            multa_por_correccion: null
            fecha_pago_realizado_anterioridad: null
            total_de_contribuciones: 415945
            monto_pagado_anterioridad: null
            credito_al_salario: null
            importe_pagado_ultimas_48_hrs: null
            subsidio_empleo: 379
            cantidad_a_cargo: 415566
            impuesto_a_depositos_efectivo_acreditable: null
            aplica_primera_parcialidad: "NO"
            compensaciones: null
            credito_ieps_diesel: null
            diesel_automotriz_transporte: null
            cantidad_a_favor: null
            otros_estimulos: null
            cantidad_a_pagar: 415566
            importe_1ra_parcialidad: null
            importe_sin_1ra_parcialidad: null
          r13_isr_retenciones_por_asimilados_a_salarios:
            a_cargo: 254588
            acreditamiento_sorteos: null
            parte_actualizada: 0
            diesel_marino: null
            recargos: 0
            total_aplicaciones: 0
            multa_por_correccion: null
            fecha_pago_realizado_anterioridad: null
            total_de_contribuciones: 254588
            monto_pagado_anterioridad: null
            credito_al_salario: null
            importe_pagado_ultimas_48_hrs: null
            subsidio_empleo: null
            cantidad_a_cargo: 254588
            impuesto_a_depositos_efectivo_acreditable: null
            aplica_primera_parcialidad: "NO"
            compensaciones: null
            credito_ieps_diesel: null
            diesel_automotriz_transporte: null
            cantidad_a_favor: null
            otros_estimulos: null
            cantidad_a_pagar: 254588
            importe_1ra_parcialidad: null
            importe_sin_1ra_parcialidad: null
          r14_isr_retenciones_por_servicios_profesionales:
            a_cargo: 104482
            acreditamiento_sorteos: null
            parte_actualizada: 0
            diesel_marino: null
            recargos: 0
            total_aplicaciones: 0
            multa_por_correccion: null
            fecha_pago_realizado_anterioridad: null
            total_de_contribuciones: 104482
            monto_pagado_anterioridad: null
            credito_al_salario: null
            importe_pagado_ultimas_48_hrs: null
            subsidio_empleo: null
            cantidad_a_cargo: 104482
            impuesto_a_depositos_efectivo_acreditable: null
            aplica_primera_parcialidad: "NO"
            compensaciones: null
            credito_ieps_diesel: null
            diesel_automotriz_transporte: null
            cantidad_a_favor: null
            otros_estimulos: null
            cantidad_a_pagar: 104482
            importe_1ra_parcialidad: null
            importe_sin_1ra_parcialidad: null
        determinacion_iva:
          montos_actos_actividades_pagados:
            total_actos_actividades_pagados_tasa_16: 2094706
            total_actos_actividades_pagados_importacion_bienes_tasa_11: null
            total_actos_actividades_sujetos_estimulo_rfn: 0
            total_actos_actividades_pagados_tasa_0: 0
            total_actos_actividades_pagados_importacion_bienes_tasa_16: null
            total_actos_actividades_pagados_no_paga_iva: 0
          detalle_total_actos_actividades_pagados_tasa_16:
            intereses_pagados_tasa_16: null
            otros_actos_pagados_tasa_16: 2094706
            regalias_pagadas_tasa_16: null
            total_actos_pagados_tasa_16: 2094706
          determinacion_iva_acreditable:
            total_iva_actos_actividades_pagados_tasa_16: 335153
            iva_trasladado_o_pagado_adquisicion_bienes_distintos_inversiones_actos_no_obligados_pago_impuesto: null
            iva_pagado_sujeto_estimulo_rfn: null
            iva_trasladado_o_pagado_importacion_inversiones_actos_no_obligados_pago_impuesto: null
            total_actos_actividades_pagados_importacion_bienes_tasa_16: 0
            iva_bienes_utilizados_indistintamente_actos_gravados_o_actos_no_obligados_pago_impuesto: 0
            proporcion_utilizada_conforme_art_5: null
            total_iva_trasladado_contribuyente: 335153
            proporcion_utilizada_conforme_art_5_b: null
            iva_trasladado_adquisicion_bienes_distintos_inversiones_actos_gravados: 335153
            iva_pagado_importacion_adquisicion_bienes_distintos_inversiones_actos_gravados: null
            iva_acreditable: 335153
            monto_acreditable_actualizado_a_incrementar_derivado_ajuste: null
            iva_pagado_importacion_inversiones_actos_gravados: null
            total_iva_acreditable_periodo: 335153
            total_iva_actos_actividades_gravados: 335153
            total_actos_actividades_pagados_importacion_bienes_tasa_11: null
            iva_trasladado_adquisicion_inversiones_actos_gravados: null
            iva_acreditable_bienes_utilizados_indistintamente_actos_gravados_o_actos_no_obligados_pago_impuesto: null
          determinacion_iva:
            valor_actos_actividades_gravados_tasa_16: 6457950
            otras_cantidades_a_favor_contribuyente: null
            valor_actos_actividades_gravados_tasa_11: null
            cantidad_a_cargo: 312421
            valor_actos_actividades_gravados_tasa_0_exportacion: null
            saldo_a_favor: null
            valor_actos_actividades_gravados_tasa_9_otros: null
            devolucion_inmediata_obtenida: null
            suma_actos_actividades_gravados: 6457950
            saldo_a_favor_periodo: 0
            valor_actos_actividades_no_se_deba_pagar_impuesto_exentos: null
            acreditamiento_saldo_favor_periodos_anteriores: null
            impuesto_causado: 1033272
            diferencia_a_cargo: 312421
            cantidad_actualizada_a_reintegrarse_derivada_de_ajuste: null
            ieps_acreditable_alcohol: null
            iva_retenido_al_contribuyente: 385698
            impuesto_a_cargo: 312421
            total_iva_acreditable: 335153
            remanente_saldo_favor_ieps_alcohol: null
            otras_cantidades_a_cargo_contribuyente: null
          detalle_valor_actos_actividades_gravados_tasa_16:
            intereses_cobrados_tasa_16: null
            otros_actos_actividades_gravados_tasa_16: 6457950
            regalias_entre_partes_relacionadas_tasa_16: null
            total_actos_actividades_gravados_tasa_16: 6457950
        detalle_pago_iva:
          r21_iva:
            a_cargo: 312421
            cretificados_tesofe: null
            a_favor: null
            diesel_marino: null
            parte_actualizada: 0
            total_aplicaciones: 0
            recargos: 0
            fecha_pago_realizado_anterioridad: null
            multa_por_correccion: null
            monto_pagado_anterioridad: null
            total_de_contribuciones: 312421
            importe_pagado_ultimas_48_hrs: null
            credito_al_salario: null
            cantidad_a_cargo: 312421
            subsidio_empleo: null
            aplica_primera_parcialidad: "NO"
            compensaciones: null
            diesel_automotriz_transporte: null
            uso_infraestructura_carretera_cuota: null
            cantidad_a_favor: null
            otros_estimulos: null
            cantidad_a_pagar: 312421
            importe_1ra_parcialidad: null
            importe_sin_1ra_parcialidad: null
          r21_iva_retenciones:
            a_cargo: 111448
            diesel_marino: null
            parte_actualizada: 0
            total_aplicaciones: 0
            recargos: 0
            fecha_pago_realizado_anterioridad: null
            multa_por_correccion: null
            monto_pagado_anterioridad: null
            total_de_contribuciones: 111448
            importe_pagado_ultimas_48_hrs: null
            credito_al_salario: null
            cantidad_a_cargo: 111448
            subsidio_empleo: null
            aplica_primera_parcialidad: "NO"
            compensaciones: null
            credito_ieps_diesel: null
            otros_estimulos: null
            cantidad_a_favor: null
            cretificados_tesofe: null
            cantidad_a_pagar: 111448
            importe_1ra_parcialidad: null
            importe_sin_1ra_parcialidad: null
        pdf: ===PDF_BINARY====
        receipt_pdf: ===PDF_BINARY====
        type: monthly
    TaxReturnPersonalListDetail:
      description: Example of a list of personal tax returns
      summary: Tax Return Personal
      value:
        id: 02589c41-ba22-4d44-8558-8111cc751318
        link: 19697249-01b8-443e-a451-76bfc5fbeebf
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        informacion_general:
          ejercicio: 2018
          fecha_hora_presentacion: 2020-01-07T17:28:00-05:00
          numero_operacion: "00000000001"
          periodo_declaracion: Del Ejercicio
          rfc: ABCD111111A11
          tipo_declaracion: Normal
          nombre: JOHN DOE
        sueldos_salarios:
          retenedores:
          - rfc_retenedor: ABCD222222A22
            nombre_denominacion_razon_social: ACME CORP
            ingresos_exentos: 118263
            ingreso_anual: 2265
            subsidio_empleo: 0
          impuesto_retenido: 19497
          ingreso_anual: 118263
          ingresos_acumulables: 115998
          ingresos_exentos: 2265
          subsidio_empleo: 0
        servicios_profesionales:
          deducciones_autorizadas:
            deducciones_autorizadas: 11870
            otras_deducciones: null
            detalle_deducciones:
            - tipo_deduccion: GASTOS
              concepto: GASOLINA Y MANTENIMIENTO DE TRANSPORTE
              monto_detallado: 9682
            - tipo_deduccion: GASTOS
              concepto: COMPRAS Y GASTOS GENERALES
              monto_detallado: 2188
            total_deducciones_autorizadas: 11870
          ingresos:
            ingresos_acumulables: 46000
            ingresos_exentos: null
            otros_ingresos: null
            total_ingresos: 46000
          resultado_fiscal:
            utilidad_fiscal: 34130
            ptu_pagada_ejercicio: 0
            perdidas_fiscales_ejercicios_anteriores_aplicadas: 0
            utilidad_gravable: 34130
          pagos_provisionales:
            pagos_provisionales_efectuados_en_ejercicio: 0
          retenciones_isr:
            isr_retenido_personas_morales: 4600
        deducciones_personales:
          honorarios_medicos_dentales_hospitalarios:
          - rfc_emisor: ABC333333A33
            monto_deducible: 258.83
          - rfc_emisor: ABC333333A33
            monto_deducible: 258.83
          - rfc_emisor: ABC444444A44
            monto_deducible: 1000
          - rfc_emisor: ABC333333A33
            monto_deducible: 258.83
          - rfc_emisor: ABC333333A33
            monto_deducible: 258.83
          - rfc_emisor: ABC333333A33
            monto_deducible: 258.83
          - rfc_emisor: ABC333333A33
            monto_deducible: 258.83
          - rfc_emisor: ABC444444A44
            monto_deducible: 502.34
          - rfc_emisor: ABC333333A33
            monto_deducible: 258.83
          - rfc_emisor: ABC333333A33
            monto_deducible: 258.83
          - rfc_emisor: ABC333333A33
            monto_deducible: 258.83
          - rfc_emisor: ABC444444A55
            monto_deducible: 14183.1
          - rfc_emisor: ABC444444A66
            monto_deducible: 1658
          - rfc_emisor: ABC444444A77
            monto_deducible: 1600
          - rfc_emisor: ABC444444A88
            monto_deducible: 1064
          - rfc_emisor: ABC444444A99
            monto_deducible: 927.57
          donativos:
          - rfc_emisor: ABC555555A99
            monto_deducible: 10.03
          aportaciones_voluntarias_complementarias_al_sar:
          - rfc_emisor: ABC666666A99
            monto_deducible: 12.03
          - rfc_emisor: ABC777777A99
            monto_deducible: 87.22
          primas_por_seguros_de_gasto_medico:
          - rfc_emisor: ABC777777A99
            monto_deducible: 20.03
        determinacion_impuesto:
          base_gravable: 126864
          deducciones_personales: 23264
          ingresos_acumulables: 150128
          isr_favorable: 10308
          isr_conforme_tarifa_final: 13789
          isr_retenido: 24097
          num_clabe: "000000000000000001"
          nombre_banco: BANCO SA
          pagos_provisionales: 0
          titular_clabe_permite_verificacion: SÍ
          accion_saldo_a_favor: DEVOLUCIÓN
        retenciones:
          sueldos_salarios:
          - rfc_retenedor: ABC444444A99
            monto_retenciones: 118263
            retenciones_isr: 19497
          dividendos: []
          servicios_profesionales:
          - rfc_retenedor: ABC444444A00
            monto_retenciones: 46000
            retenciones_isr: 4600
        dividendos:
          monto_acumulable_dividendos_utilidades: null
          monto_total_isr_pagado_sociedad: null
        datos_informativos:
          credito_fiscal_autorizado_proyectos_investigacion_desarrollo: 0
          credito_fiscal_autorizado_proyectos_apoyo_deporte_alto_rendimiento: 0
          credito_fiscal_autorizado_proyectos_inversion_artes: 0
          credito_fiscal_autorizado_inversion_equipos_fijos: 0
          credito_fiscal_autorizado_produccion_distribucion_cinematografica: 0
          saldo_credito_fiscal_autorizado_anteriores_investigacion_desarrollo: 0
          saldo_credito_fiscal_anteriores_proyectos_inversion_artes: 0
          saldo_credito_fiscal_anteriores_produccion_distribucion_cinematografica: 0
        pdf: =PDF-STRING=
        receipt_pdf: =PDF-STRING=
    TaxReturnPersonalListMonthlyPFAEDetail:
      description: Example of a PFAE-type monthly personal tax return
      summary: Tax Return Personal Monthly (PFAE)
      value:
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        informacion_general:
          rfc: null
          nombre: null
          tipo_declaracion: null
          ejercicio: null
          periodo_declaracion: null
          fecha_hora_presentacion: null
          numero_operacion: null
        isr:
          tipo: PFAE
          determinacion:
            ingresos_periodos_anteriores: 0
            ingresos_periodo: 0
            total_ingresos: 0
            compras_gastos_periodos_anteriores: 1596
            compra_gastos_periodo: 399
            total_compras_gastos: 1995
            base_gravable_pago_provisional: 0
            isr_causado: 0
            pagos_provisionales_efectuados_anterioridad: 0
            isr_retenido_periodos_anteriores: 0
            impuesto_retenido: 0
            isr_cargo: 0
          detalle_del_pago:
            a_cargo: 0
            parte_actualizada: 0
            recargos: 0
            total_contribuciones: 0
            total_aplicaciones: 0
            cantidad_a_cargo: 0
            cantidad_a_pagar: 0
        iva:
          determinacion:
            actividades_gravadas_tasa_16: 0
            actividades_gravadas_tasa_0: 0
            actividades_exentas: 0
            iva_cobrado_periodo_tasa_16: 0
            iva_acreditable_periodo: 0
            iva_retenido: 0
            saldo_a_favor: null
            impuesto_a_favor: null
          detalle_del_pago:
            total_contribuciones: 0
            total_aplicaciones: 0
            cantidad_a_cargo: 0
            cantidad_a_pagar: 0
            a_favor: null
        pdf: ===PDF_BINARY====
        receipt_pdf: ===PDF_BINARY====
        type: monthly
    TaxReturnPersonalListMonthlyPFAIDetail:
      description: Example of a PFAI-type monthly personal tax return
      summary: Tax Return Personal Monthly (PFAI)
      value:
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        informacion_general:
          rfc: null
          nombre: null
          tipo_declaracion: null
          ejercicio: null
          periodo_declaracion: null
          fecha_hora_presentacion: null
          numero_operacion: null
        isr:
          tipo: PFAE
          determinacion:
            ingresos_periodos_anteriores: 0
            ingresos_periodo: 0
            total_ingresos: 0
            compras_gastos_periodos_anteriores: 1596
            compra_gastos_periodo: 399
            total_compras_gastos: 1995
            base_gravable_pago_provisional: 0
            isr_causado: 0
            pagos_provisionales_efectuados_anterioridad: 0
            isr_retenido_periodos_anteriores: 0
            impuesto_retenido: 0
            isr_cargo: 0
            tipo_de_deduccíon: dedduccíon opicional
            optas_por_el_cálculo_acumulado: "NO"
            deduccíon_opcional: 700
            impuesto_predial: 0
            total_deducciones_autorizadas: 700
            tienes_facilidades_administrativas_o_estímulos_deducibles: "NO"
          detalle_del_pago:
            a_cargo: 0
            parte_actualizada: 0
            recargos: 0
            total_contribuciones: 0
            total_aplicaciones: 0
            cantidad_a_cargo: 0
            cantidad_a_pagar: 0
        iva:
          determinacion:
            actividades_gravadas_tasa_16: 0
            actividades_gravadas_tasa_0: 0
            actividades_exentas: 0
            iva_cobrado_periodo_tasa_16: 0
            iva_acreditable_periodo: 0
            iva_retenido: 0
            saldo_a_favor: null
            impuesto_a_favor: null
            impuesto_a_cargo: 54
            cantidad_a_cargo: 54
          detalle_del_pago:
            total_contribuciones: 0
            total_aplicaciones: 0
            cantidad_a_cargo: 0
            cantidad_a_pagar: 0
            a_favor: null
        pdf: ===PDF_BINARY====
        receipt_pdf: ===PDF_BINARY====
        type: monthly
    TaxReturnBusinessListDetail:
      description: Example of a list of business tax returns
      summary: Tax Return Business
      value:
        id: 02589c41-ba22-4d44-8558-8111cc751318
        link: 19697249-01b8-443e-a451-76bfc5fbeebf
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        informacion_general:
          ejercicio: 2018
          fecha_hora_presentacion: 2020-01-07T16:55:00-06:00
          numero_operacion: "000000000001"
          periodo_declaracion: Del Ejercicio
          rfc: ABC1111111A1
          tipo_declaracion: Normal
          tipo_complementaria: null
          denominacion_razon_social: ACME CORP
        datos_adicionales:
          indica_si_optas_por_dictaminar_tus_estados_financieros: "NO"
          estas_obligado_a_presentar_la_informacion_sobre_tu_situacion_fiscal: "NO"
          estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero: SIN
            SELECCIÓN
          estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero_inferiores_100mdp: SIN
            SELECCIÓN
          optas_por_presentar_informacion_sobre_tu_situacion_fiscal: SIN SELECCIÓN
          indica_si_te_dedicas_exclisivamente_a_generacion_energia_fuentes_renovables_o_cogeneracion_electricidad_eficiente: "NO"
        estado_resultados:
          ventas_servicios_nacionales:
            partes_relacionadas: null
            partes_no_relacionadas: 911165
            total: 911165
          ventas_servicios_extranjero:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          devoluciones_descuentos_bonificaciones_ventas_nacionales:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          devoluciones_descuentos_bonificaciones_ventas_extranjero:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          ingresos_netos:
            partes_relacionadas: null
            partes_no_relacionadas: 911165
            total: 911165
          inventario_inicial: null
          compras_netas_nacionales:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          compras_netas_importacion:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          inventario_final: null
          costo_mercancias: null
          mano_de_obra:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          maquilas:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          gastos_indirectos_fabricacion:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          costo_ventas_servicios: null
          utilidad_bruta: 911165
          perdida_bruta: null
          gastos_operacion:
            partes_relacionadas: null
            partes_no_relacionadas: 499540
            total: 499540
          utilidad_operacion: 411625
          perdida_operacion: null
          intereses_devengados_a_favor_nacionales:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          intereses_devengados_a_favor_extranjero:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          intereses_moratorios_a_favor_nacionales:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          intereses_moratorios_a_favor_extranjero:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          ganancia_cambiaria:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          intereses_devengados_a_cargo_nacionales:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          intereses_devengados_a_cargo_extranjero:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          intereses_moratorios_a_cargo_nacionales:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          intereses_moratorios_a_cargo_extranjero:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          perdida_cambiaria:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          resultado_posicion_monetaria_favorable:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          resultado_posicion_monetaria_desfavorable:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          otras_operaciones_financieras_nacionales:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          otras_operaciones_financieras_extranjero:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          otras_operaciones_financieras: null
          resultado_integral_financiamiento: null
          otros_gastos_nacionales: null
          otros_gastos_extranjero: null
          otros_gastos: null
          otros_productos_nacionales: null
          otros_productos_extranjero: null
          otros_productos: null
          ingresos_partidas_discontinuas_extraordinarias: null
          gastos_partidas_discontinuas_extraordinarias: null
          utilidad_antes_impuesto: 411625
          perdida_antes_impuesto: null
          isr: 113002
          ietu: null
          impac: null
          ptu: null
          utilidad_participacion_subsidiaria: null
          perdida_participacion_subsidiaria: null
          efectos_reexpresion_favorables_excepto_resultado_posicion_monetaria: null
          efectos_reexpresion_desfavorables_excepto_resultado_posicion_monetaria: null
          utilidad_neta: 298623
          perdida_neta: null
        estado_posicion_financiera_balance:
          activo:
            efectivo_caja_depositos_instituciones_credito_nacionales: 726644
            efectivo_caja_depositos_instituciones_credito_extranjero: null
            inversiones_valores_instituciones_nacionales_excepto_acciones: null
            inversiones_valores_instituciones_extranjero_excepto_acciones: null
            cuentas_documentos_por_cobrar_nacionales:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            cuentas_documentos_por_cobrar_extranjero:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            contribuciones_a_favor: null
            inventarios: null
            otros_activos_circulantes: 13277
            inversiones_en_acciones_nacionales: null
            inversiones_en_acciones_extranjero: null
            inversiones_en_acciones_total: null
            terrenos: null
            construcciones: null
            construcciones_en_proceso: null
            maquinaria_y_equipo: null
            mobiliario_y_equipo_oficina: null
            equipo_de_computo: null
            equipo_de_transporte: null
            otros_activos_fijos: 12756
            depreciacion_acumulada: -106
            cargos_y_gastos_diferidos: 9319
            amortizacion_acumulada: null
            suma_activo: 761890
          pasivo:
            cuentas_documentos_por_pagar_nacionales:
              partes_relacionadas: null
              partes_no_relacionadas: 268227
              total: 268227
            cuentas_documentos_por_pagar_extranjero:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            contribuciones_por_pagar: 223490
            anticipos_de_clientes:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            aportaciones_futuros_aumentos_de_capital: null
            otros_pasivos: null
            suma_pasivo: 491717
          capital_contable:
            capital_social_proveniente_aportaciones: 10000
            capital_social_proveniente_capitalizacion: null
            reservas: null
            otras_cuentas_capital: null
            aportaciones_futuros_aumentos_de_capital: null
            utilidades_acumuladas: null
            utilidad_del_ejercicio: 298623
            perdidas_acumuladas: -38450
            perdida_del_ejercicio: null
            exceso_en_actualizacion_capital: null
            insuficiencia_en_actualizacion_capital: null
            actualizacion_del_capital_contable: null
            suma_capital_contable: 270173
            suma_pasivo_mas_capital_contable: 761890
        conciliacion_entre_resultado_contable_fiscal:
          utilidad_o_perdida_neta: 298623
          efectos_reexpresion: null
          resultado_posicion_monetaria: null
          utilidad_o_perdida_neta_historica: 298623
          ingresos_fiscales_no_contables: 95
          ajuste_anual_inflacion_acumulable: 95
          anticipos_de_clientes: null
          intereses_moratorios_efectivamente_cobrados: null
          ganancia_en_enajenacion_acciones_por_reembolso_capital: null
          ganancia_en_enajenacion_de_terrenos_y_activo_fijo: null
          inventario_acumulable_del_ejercicio: null
          otros_ingresos_fiscales_no_contables: null
          deducciones_contables_no_fiscales: 117415
          costo_de_ventas_contable: null
          depreciacion_y_amortizacion_contable: 106
          gastos_que_no_reunen_requisitos_fiscales: 4307
          isr_ietu_impac_ptu: 113002
          perdida_contable_enajenacion_de_acciones: null
          perdida_contable_enajenacion_de_activo_fijo: null
          perdida_en_participacion_subsidiaria: null
          intereses_devengados_que_exceden_valor_mercado_y_moratorios_pagados_o_no: 0
          otras_deducciones_contables_no_fiscales: 0
          deducciones_fiscales_no_contables: 0
          ajuste_anual_inflacion_deducible: null
          costo_vendido_fiscal: null
          deduccion_inversiones: null
          estimulo_fiscal_por_deduccion_inmediata_inversiones: null
          donacion_bienes_basicos_subsistencia_humana: 0
          estimulo_fiscal_contratacion_personas_discapacidad_yo_mayores: 0
          deduccion_impuesto_sobre_renta_retenido_personas_discapacidad_yo_mayores: 0
          perdida_fiscal_en_enajenacion_acciones: null
          perdida_fiscal_en_enajenacion_de_terrenos_y_activo_fijo: null
          intereses_moratorios_efectivamente_pagados: null
          otras_deducciones_fiscales_no_contables: null
          ingresos_contables_no_fiscales: null
          intereses_moratorios_devengados_a_favor_cobrados_o_no: null
          anticipos_de_clientes_ejercicios_anteriores: null
          saldos_a_favor_impuestos_y_su_actualizacion: null
          utilidad_contable_enajenacion_de_activo_fijo: null
          utilidad_contable_enajenacion_de_acciones: null
          utilidad_en_participacion_subsidiaria: null
          otros_ingresos_contables_no_fiscales: null
          utilidad_o_perdida_fiscal_antes_de_ptu: 416133
        deducciones_autorizadas:
          sueldos_salarios: null
          honorarios_pagados_a_personas_fisicas: null
          regalias_y_asistencia_tecnica: null
          donativos_otorgados: null
          uso_o_goce_temporal_de_bienes_pagados_a_personas_fisicas: null
          fletes_y_acarreos_pagados_a_parsonas_fisicas: null
          contribuciones_pagadas_excepto_isr_ietu_impac_iva_ieps: null
          seguros_fianzas: null
          perdida_por_creditos_incobrables: null
          viaticos_y_gastos_viaje: 59527
          combustible_y_lubricantes: null
          credito_al_salario_no_disminuido_de_contribuciones: null
          aportaciones_sar_infonavit_y_jubilaciones_vejez: null
          aportaciones_para_fondos_de_pensiones_y_jubilaciones: null
          cuotas_imss: null
          consumos_en_restaurantes: 11254
          perdida_por_operaciones_financieras_derivadas: null
          deduccion_por_concepto_de_ayuda_alimentaria_para_trabajadores: null
          monto_total_pagos_que_sean_ingresos_exentos_para_trabajador: null
          monto_deducible_al_47_pagos_son_ingresos_exentos_para_trabajador: null
          monto_deducible_al_53_pagos_son_ingresos_exentos_para_trabajador: null
          uso_o_goce_temporal_de_automoviles_baterias_electricas_o_electricos_con_motor_combustion_o_hidrogeno: null
          otras_deducciones_autorizadas: 424346
          total_deducciones_autorizadas: 495127
        cifras_cierre_ejercicio:
          perdidas_fiscales_de_ejercicios_anteriores_pendientes_de_amortizar_actualiazadas: null
          saldo_promedio_anual_de_creditos: 142795
          saldo_promedio_anual_de_deudas: 144765
          coeficiente_de_utilidad_por_aplicar_en_ejercicio_siguiente: 0.4567
          porcentaje_de_participacion_consolidable: null
          isr_causado_en_exceso_del_impac_en_los_3_ejercicios_anteriores_pendientes_aplicar: null
          saldo_actualizado_de_cuenta_de_utilidad_fiscal_neta_2013_y_anteriores: null
          saldo_actualizado_de_cuenta_de_utilidad_fiscal_neta_a_partir_2014_y_anteriores: null
          saldo_actualizado_de_cuenta_de_utilidad_fiscal_reinvertida: null
          saldo_actualizado_de_cuenta_de_capital_de_aportacion: null
          saldo_de_cuenta_de_utilidad_fiscal_neta_por_inversion_en_renovables: null
        determinacion_del_impuesto_sobre_la_renta:
          determinacion_del_impuesto_sobre_la_renta:
            total_ingresos_acumulables: 911260
            total_deducciones_autorizadas_y_deduccion_inmediata_inversiones: 495126
            deduccion_adicional_por_pago_servicios_personales_en_operacion_maquila: null
            utilidad_o_perdida_fiscal_antes_de_ptu: 416134
            ptu_pagada_en_el_ejercicio: null
            utilidad_fiscal_del_ejercicio: 416134
            perdidas_fiscales_de_ejercicios_anteriores_que_se_aplican_en_ejercicio: 39462
            resultado_fiscal: 376672
            impuesto_causado_en_ejercicio: 113002
            tienes_estimulos_fiscales_a_acreditar: SIN SELECCIÓN
            impuesto_sobre_la_renta_del_ejercicio: 113002
            pagos_provisionales_efectuados_enterados_a_federacion: null
            impuesto_retenido_al_contribuyente: null
            impuesto_acreditable_pagado_en_extranjero: null
            impuesto_acreditable_por_dividendos_o_utilidades_distribuidos: null
            otras_cantidades_a_cargo: null
            otras_cantidades_a_favor: null
            diferencia_a_cargo: 113002
            isr_a_cargo_del_ejercicio: 113002
            isr_a_favor_del_ejercicio: null
          impuesto_sobre_ingresos_sujetos_a_regimenes_fiscales_preferentes: null
          datos_informativos_ejercicio:
            monto_aplicado_del_estimulo_fiscal_de_chatarrizacion: 0
            monto_deducible_de_pagos_efectuados_por_uso_o_goce_temporal_automoviles: 0
            impac_recuperado_en_ejercicio_derivado_de_deconsolidacion: 0
            ingresos_obtenidos_por_apoyos_gubernamentales: 0
            gastos_realidados_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico: 0
            credito_fiscal_autorizado_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico_pendiente_aplicar: 0
            credito_fiscal_autorizado_en_ejercicio_por_proyectos_de_inversion_en_artes_pendiente_aplicar: 0
            credito_fiscal_autorizado_en_ejercicio_por_inversion_en_proyectos_programas_para_deporte_de_alto_rendimiento_pendiente_aplicar: 0
            saldo_pendiente_aplicar_por_inversion_en_equipos_de_alimentacion_vehiculos_electricos: 0
            credito_fiscal_autorizado_en_ejercicio_a_produccion_distribucion_cinematografica_nacional_pendiente_aplicar: 0
          datos_informativos_ejercicios_anteriores_aplicados_en_ejercicio:
            total_estimulo_produccion_y_distribucion_cinematografica_nacional_ejercicios_anteriores_aplicado_en_ejercicio: null
            ? saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_inversion_en_proyectos_programas_para_deporte_alto_rendimiento_pendiente_aplicar
            : 0
            saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_investigacion_desarrollo_tecnologico_pendiente_aplicar: 0
            saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_inversion_artes_pendiente_aplicar: 0
            saldo_credito_fiscal_autorizado_ejercicios_anteriores_a_produccion_distribucion_nacional_pendiente_aplicar: 0
        dividendos_o_utilidades_distribuidos:
          provenientes_de_cuenta_de_utilidad_fisica_neta_cufin_generada_en_2013_y_anteriores: null
          provenientes_de_cuenta_de_utilidad_fisica_neta_cufin_generada_a_partir_de_2014: null
          provenientes_de_cuenta_de_utilidad_fisica_neta_reinvertida_cufinre: null
          no_provenientes_de_cufin_ni_cufinre_en_efectivo: null
          no_provenientes_de_cufin_ni_cufinre_en_acciones: null
          monto_del_impuesto_pagado_no_proveniente_de_cufin_ni_cufinre: null
          monto_del_impuesto_pagado_de_utilidades_provenientes_de_cufinre: null
          ? provenientes_de_cuenta_de_utilidad_fiscal_neta_por_inversion_en_energia_de_fuentes_renovables_o_sistemas_cogeneracion_electricidad_eficiente
          : null
        detalle_pago_r1_isr_personas_morales:
          a_cargo: 113002
          parte_actualizada: null
          recargos: null
          multa_por_correccion: null
          total_contribuciones: 113002
          desea_aplicar_alguna_compensacion_o_estimulo: "NO"
          cantidad_a_cargo: 113002
          opta_por_pagar_parcialidades: SIN SELECCIÓN
          importe_de_primera_parcialidad: null
          importe_sin_primera_parcialidad: null
          cantidad_a_favor: null
          cantidad_a_pagar: 113002
        pdf: =PDF-STRING=
        receipt_pdf: =PDF-STRING=
    TaxReturnBusinessListMonthlyDetail:
      description: Example of a monthly business tax return
      summary: Tax Return Business Monthly
      value:
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        informacion_general:
          rfc: DPA950805RR2
          denominacion_razon_social: Aloha Mahalo SC
          tipo_declaracion: Normal
          ejercicio: 2020
          periodo_declaracion: Diciembre
          fecha_hora_presentacion: 2021-01-18T19:24:00-06:00
          numero_operacion: "400475119"
          tipo_complementaria: null
        determinacion_isr:
          personas_morales_regimen_general:
            suma_ingresos_nominales_meses_anteriores_ejercicio: 69848414
            estimulos_acreditables: null
            ingresos_nominales_mes_que_declara: 6482479
            reducciones: null
            total_ingresos_nominales: 76330893
            impuestos_del_periodo: 284098
            coeficiente_utilidad: 0.2318
            pagos_provisionales_efectuados_anterioridad: 303039
            utilidad_fiscal_pago_provisional: 17693501
            impuesto_retenido: 29925
            ptu: null
            otras_cantidades_a_cargo_contribuyente: null
            iventario_acumulable: null
            otras_cantidades_a_favor_contribuyente: null
            anticipos_rendimientos_distribuidos_periodo: 16746509
            diferencia_a_cargo: 0
            perdidas_fiscales_ejercicios_anteriores_pendientes: null
            estimulo_fiscal_deduccion_inmediata: null
            impuesto_correspondiente_participacion_consolidable: null
            deduccion_adicional_fomento_primer_empleo: null
            porcentaje_participacion_consolidable: null
            base_gravable_pago_provisional: 946992
            impuesto_a_cargo: 0
            isr_causado: 284098
            ieps_alcohol: null
        detalle_pago_isr:
          r1_isr_personas_morales:
            a_cargo: 0
            acreditamiento_sorteo_buen_fin: null
            parte_actualizada: null
            diesel_marino: null
            recargos: null
            total_aplicaciones: 0
            multa_por_correccion: null
            fecha_pago_realizado_anterioridad: null
            total_de_contribuciones: 0
            monto_pagado_anterioridad: null
            credito_al_salario: null
            importe_pagado_ultimas_48_hrs: null
            subsidio_empleo: null
            cantidad_a_cargo: 0
            impuesto_a_depositos_efectivo_acreditable: null
            aplica_primera_parcialidad: "NO"
            compensaciones: null
            credito_ieps_diesel: null
            diesel_automotriz_transporte: null
            cantidad_a_favor: null
            uso_infraestructura_carretera_cuota: null
            cantidad_a_pagar: 0
            otros_estimulos: null
            importe_1ra_parcialidad: null
            importe_sin_1ra_parcialidad: null
          r12_isr_retenciones_por_salarios:
            a_cargo: 415945
            acreditamiento_sorteos: null
            parte_actualizada: 0
            diesel_marino: null
            recargos: 0
            total_aplicaciones: 379
            multa_por_correccion: null
            fecha_pago_realizado_anterioridad: null
            total_de_contribuciones: 415945
            monto_pagado_anterioridad: null
            credito_al_salario: null
            importe_pagado_ultimas_48_hrs: null
            subsidio_empleo: 379
            cantidad_a_cargo: 415566
            impuesto_a_depositos_efectivo_acreditable: null
            aplica_primera_parcialidad: "NO"
            compensaciones: null
            credito_ieps_diesel: null
            diesel_automotriz_transporte: null
            cantidad_a_favor: null
            otros_estimulos: null
            cantidad_a_pagar: 415566
            importe_1ra_parcialidad: null
            importe_sin_1ra_parcialidad: null
          r13_isr_retenciones_por_asimilados_a_salarios:
            a_cargo: 254588
            acreditamiento_sorteos: null
            parte_actualizada: 0
            diesel_marino: null
            recargos: 0
            total_aplicaciones: 0
            multa_por_correccion: null
            fecha_pago_realizado_anterioridad: null
            total_de_contribuciones: 254588
            monto_pagado_anterioridad: null
            credito_al_salario: null
            importe_pagado_ultimas_48_hrs: null
            subsidio_empleo: null
            cantidad_a_cargo: 254588
            impuesto_a_depositos_efectivo_acreditable: null
            aplica_primera_parcialidad: "NO"
            compensaciones: null
            credito_ieps_diesel: null
            diesel_automotriz_transporte: null
            cantidad_a_favor: null
            otros_estimulos: null
            cantidad_a_pagar: 254588
            importe_1ra_parcialidad: null
            importe_sin_1ra_parcialidad: null
          r14_isr_retenciones_por_servicios_profesionales:
            a_cargo: 104482
            acreditamiento_sorteos: null
            parte_actualizada: 0
            diesel_marino: null
            recargos: 0
            total_aplicaciones: 0
            multa_por_correccion: null
            fecha_pago_realizado_anterioridad: null
            total_de_contribuciones: 104482
            monto_pagado_anterioridad: null
            credito_al_salario: null
            importe_pagado_ultimas_48_hrs: null
            subsidio_empleo: null
            cantidad_a_cargo: 104482
            impuesto_a_depositos_efectivo_acreditable: null
            aplica_primera_parcialidad: "NO"
            compensaciones: null
            credito_ieps_diesel: null
            diesel_automotriz_transporte: null
            cantidad_a_favor: null
            otros_estimulos: null
            cantidad_a_pagar: 104482
            importe_1ra_parcialidad: null
            importe_sin_1ra_parcialidad: null
        determinacion_iva:
          montos_actos_actividades_pagados:
            total_actos_actividades_pagados_tasa_16: 2094706
            total_actos_actividades_pagados_importacion_bienes_tasa_11: null
            total_actos_actividades_sujetos_estimulo_rfn: 0
            total_actos_actividades_pagados_tasa_0: 0
            total_actos_actividades_pagados_importacion_bienes_tasa_16: null
            total_actos_actividades_pagados_no_paga_iva: 0
          detalle_total_actos_actividades_pagados_tasa_16:
            intereses_pagados_tasa_16: null
            otros_actos_pagados_tasa_16: 2094706
            regalias_pagadas_tasa_16: null
            total_actos_pagados_tasa_16: 2094706
          determinacion_iva_acreditable:
            total_iva_actos_actividades_pagados_tasa_16: 335153
            iva_trasladado_o_pagado_adquisicion_bienes_distintos_inversiones_actos_no_obligados_pago_impuesto: null
            iva_pagado_sujeto_estimulo_rfn: null
            iva_trasladado_o_pagado_importacion_inversiones_actos_no_obligados_pago_impuesto: null
            total_actos_actividades_pagados_importacion_bienes_tasa_16: 0
            iva_bienes_utilizados_indistintamente_actos_gravados_o_actos_no_obligados_pago_impuesto: 0
            proporcion_utilizada_conforme_art_5: null
            total_iva_trasladado_contribuyente: 335153
            proporcion_utilizada_conforme_art_5_b: null
            iva_trasladado_adquisicion_bienes_distintos_inversiones_actos_gravados: 335153
            iva_pagado_importacion_adquisicion_bienes_distintos_inversiones_actos_gravados: null
            iva_acreditable: 335153
            monto_acreditable_actualizado_a_incrementar_derivado_ajuste: null
            iva_pagado_importacion_inversiones_actos_gravados: null
            total_iva_acreditable_periodo: 335153
            total_iva_actos_actividades_gravados: 335153
            total_actos_actividades_pagados_importacion_bienes_tasa_11: null
            iva_trasladado_adquisicion_inversiones_actos_gravados: null
            iva_acreditable_bienes_utilizados_indistintamente_actos_gravados_o_actos_no_obligados_pago_impuesto: null
          determinacion_iva:
            valor_actos_actividades_gravados_tasa_16: 6457950
            otras_cantidades_a_favor_contribuyente: null
            valor_actos_actividades_gravados_tasa_11: null
            cantidad_a_cargo: 312421
            valor_actos_actividades_gravados_tasa_0_exportacion: null
            saldo_a_favor: null
            valor_actos_actividades_gravados_tasa_9_otros: null
            devolucion_inmediata_obtenida: null
            suma_actos_actividades_gravados: 6457950
            saldo_a_favor_periodo: 0
            valor_actos_actividades_no_se_deba_pagar_impuesto_exentos: null
            acreditamiento_saldo_favor_periodos_anteriores: null
            impuesto_causado: 1033272
            diferencia_a_cargo: 312421
            cantidad_actualizada_a_reintegrarse_derivada_de_ajuste: null
            ieps_acreditable_alcohol: null
            iva_retenido_al_contribuyente: 385698
            impuesto_a_cargo: 312421
            total_iva_acreditable: 335153
            remanente_saldo_favor_ieps_alcohol: null
            otras_cantidades_a_cargo_contribuyente: null
          detalle_valor_actos_actividades_gravados_tasa_16:
            intereses_cobrados_tasa_16: null
            otros_actos_actividades_gravados_tasa_16: 6457950
            regalias_entre_partes_relacionadas_tasa_16: null
            total_actos_actividades_gravados_tasa_16: 6457950
        detalle_pago_iva:
          r21_iva:
            a_cargo: 312421
            cretificados_tesofe: null
            a_favor: null
            diesel_marino: null
            parte_actualizada: 0
            total_aplicaciones: 0
            recargos: 0
            fecha_pago_realizado_anterioridad: null
            multa_por_correccion: null
            monto_pagado_anterioridad: null
            total_de_contribuciones: 312421
            importe_pagado_ultimas_48_hrs: null
            credito_al_salario: null
            cantidad_a_cargo: 312421
            subsidio_empleo: null
            aplica_primera_parcialidad: "NO"
            compensaciones: null
            diesel_automotriz_transporte: null
            uso_infraestructura_carretera_cuota: null
            cantidad_a_favor: null
            otros_estimulos: null
            cantidad_a_pagar: 312421
            importe_1ra_parcialidad: null
            importe_sin_1ra_parcialidad: null
          r21_iva_retenciones:
            a_cargo: 111448
            diesel_marino: null
            parte_actualizada: 0
            total_aplicaciones: 0
            recargos: 0
            fecha_pago_realizado_anterioridad: null
            multa_por_correccion: null
            monto_pagado_anterioridad: null
            total_de_contribuciones: 111448
            importe_pagado_ultimas_48_hrs: null
            credito_al_salario: null
            cantidad_a_cargo: 111448
            subsidio_empleo: null
            aplica_primera_parcialidad: "NO"
            compensaciones: null
            credito_ieps_diesel: null
            otros_estimulos: null
            cantidad_a_favor: null
            cretificados_tesofe: null
            cantidad_a_pagar: 111448
            importe_1ra_parcialidad: null
            importe_sin_1ra_parcialidad: null
        pdf: ===PDF_BINARY====
        receipt_pdf: ===PDF_BINARY====
        type: monthly
    TaxStatusPersonalListPaginated:
      description: Example of a list of personal tax status
      summary: Personal Tax Status
      value:
        count: 101
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: null
        results:
        - id: e88d29d1-3dc6-407f-825c-a9b50453e349
          link: 401d5a8e-79e2-472e-a1ca-8f4646f5cb24
          collected_at: 2022-02-09T08:45:50.406032Z
          created_at: 2022-02-09T08:46:20.406032Z
          place_and_date_of_issuance: "BUENAVENTURA, CIUDAD DE MEXICO A 22 DE FEBRERO\
            \ DE 2021"
          official_name: Alfredo Gonzalo Robin
          id_cif: "2274235873432"
          tax_payer_information:
            rfc: GGTF770303G7
            curp: BEMP930403HDFLLT00
            name: Alfredo
            first_last_name: Gonzalo
            second_last_name: Robin
            start_operations_date: 2000-06-01
            status_padron: ACTIVO
            last_status_change_date: 2000-06-01
            commercial_name: Alfredo Gonzalo Robin
            social_name: null
            email: alfredo@robin.com
            phone: "667507132"
          address:
            postal_code: "21255"
            street_type: BOULEVARD (BLVD.)
            street: GENERAL GIMENO
            exterior_number: "4360"
            interior_number: PLANTA BAJA
            suburb: BUENAVENTURA
            locality: null
            municipality: ALTOS DE MIRAMAR
            state: CIUDAD DE MEXICO
            between_street:
            - street_one: CALLE PRINCIPE
              street_two: CALLE NUEVA ROMA
          economic_activity:
          - order: "1"
            economic_activity: Asalariado
            percentage: "100"
            initial_date: 2014-11-05
            end_date: null
          regimes:
          - regime: Régimen de Sueldos y Salarios e Ingresos Asimilados a Salarios
            initial_date: 2003-01-01
            end_date: null
          obligations:
          - obligation: Declaración informativa de IVA con la anual de ISR
            expiration: Conjuntamente con la declaración anual del ejercicio.
            initial_date: 2004-03-31
            end_date: null
          - obligation: Pago definitivo mensual de IVA.
            expiration: A más tardar el día 17 del mes inmediato posterior al periodo
              que corresponda.
            initial_date: 2004-03-31
            end_date: null
          digital_stamp: '||2020/09/26|GHTF980303F7|CONSTANCIA DE SITUACIÓN FISCAL|2044441088666600000034||'
          digital_stamp_chain: ExpsnSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjel=
          pdf: =PDF-STRING=
    TaxStatusBusinessListPaginated:
      description: Example of a list of business tax status
      summary: Business Tax Status
      value:
        count: 101
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: null
        results:
        - id: 6de34cb3-bf0d-445d-b832-7ec7781e2c6f
          link: 0b2edc42-7214-4c68-b22e-ae6885bf7c07
          collected_at: 2022-02-09T08:45:50.406032Z
          created_at: 2022-02-09T08:46:20.406032Z
          place_and_date_of_issuance: "BUENAVENTURA, CIUDAD DE MEXICO A 22 DE FEBRERO\
            \ DE 2021"
          official_name: ACNE SA DE CV
          id_cif: "2274235873432"
          tax_payer_information:
            rfc: GHTF980303F7
            curp: null
            name: null
            first_last_name: null
            second_last_name: null
            start_operations_date: 1995-08-01
            status_padron: ACTIVO
            last_status_change_date: 1995-08-01
            commercial_name: null
            social_name: ACNE SA DE CV
            email: contact@acne.com
            phone: "555507122"
          address:
            postal_code: "21255"
            street_type: BOULEVARD (BLVD.)
            street: GENERAL GIMENO
            exterior_number: "4360"
            interior_number: PLANTA BAJA
            suburb: BUENAVENTURA
            locality: null
            municipality: ALTOS DE MIRAMAR
            state: CIUDAD DE MEXICO
            between_street:
            - street_one: CALLE PRINCIPE
              street_two: CALLE NUEVA ROMA
          economic_activity:
          - order: "1"
            economic_activity: "Otros servicios profesionales, científicos y técnicos"
            percentage: "100"
            initial_date: 2014-11-05
            end_date: null
          regimes:
          - regime: Régimen General de Ley Personas Morales
            initial_date: 2003-01-01
            end_date: null
          obligations:
          - obligation: Declaración informativa de IVA con la anual de ISR
            expiration: Conjuntamente con la declaración anual del ejercicio.
            initial_date: 2004-03-31
            end_date: null
          - obligation: Pago definitivo mensual de IVA.
            expiration: A más tardar el día 17 del mes inmediato posterior al periodo
              que corresponda.
            initial_date: 2004-03-31
            end_date: null
          digital_stamp: '||2020/04/26|GHTF980303F7|CONSTANCIA DE SITUACIÓN FISCAL|2044441088666600000034||'
          digital_stamp_chain: EtenSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjow=
          pdf: =PDF-STRING=
    TaxStatusPersonalList:
      description: Example of a list of personal tax status
      summary: Personal Tax Status
      value:
        id: 6de34cb3-bf0d-445d-b832-7ec7781e2c6f
        link: 401d5a8e-79e2-472e-a1ca-8f4646f5cb24
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        place_and_date_of_issuance: "BUENAVENTURA, CIUDAD DE MEXICO A 22 DE FEBRERO\
          \ DE 2021"
        official_name: Alfredo Gonzalo Robin
        id_cif: "2274235873432"
        tax_payer_information:
          rfc: GGTF770303G7
          curp: BEMP930403HDFLLT00
          name: Alfredo
          first_last_name: Gonzalo
          second_last_name: Robin
          start_operations_date: 2000-06-01
          status_padron: ACTIVO
          last_status_change_date: 2000-06-01
          commercial_name: Alfredo Gonzalo Robin
          social_name: null
          email: alfredo@robin.com
          phone: "667507132"
        address:
          postal_code: "21255"
          street_type: BOULEVARD (BLVD.)
          street: GENERAL GIMENO
          exterior_number: "4360"
          interior_number: PLANTA BAJA
          suburb: BUENAVENTURA
          locality: null
          municipality: ALTOS DE MIRAMAR
          state: CIUDAD DE MEXICO
          between_street:
          - street_one: CALLE PRINCIPE
            street_two: CALLE NUEVA ROMA
        economic_activity:
        - order: "1"
          economic_activity: Asalariado
          percentage: "100"
          initial_date: 2014-11-05
          end_date: null
        regimes:
        - regime: Régimen de Sueldos y Salarios e Ingresos Asimilados a Salarios
          initial_date: 2003-01-01
          end_date: null
        obligations:
        - obligation: Declaración informativa de IVA con la anual de ISR
          expiration: Conjuntamente con la declaración anual del ejercicio.
          initial_date: 2004-03-31
          end_date: null
        - obligation: Pago definitivo mensual de IVA.
          expiration: A más tardar el día 17 del mes inmediato posterior al periodo
            que corresponda.
          initial_date: 2004-03-31
          end_date: null
        digital_stamp: '||2020/09/26|GHTF980303F7|CONSTANCIA DE SITUACIÓN FISCAL|2044441088666600000034||'
        digital_stamp_chain: ExpsnSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjel=
        pdf: =PDF-STRING=
    TaxStatusBusinessList:
      description: Example of a list of business tax status
      summary: Business Tax Status
      value:
        id: 6de34cb3-bf0d-445d-b832-7ec7781e2c6f
        link: 0b2edc42-7214-4c68-b22e-ae6885bf7c07
        collected_at: 2022-02-09T08:45:50.406032Z
        created_at: 2022-02-09T08:46:20.406032Z
        place_and_date_of_issuance: "BUENAVENTURA, CIUDAD DE MEXICO A 22 DE FEBRERO\
          \ DE 2021"
        official_name: ACNE SA DE CV
        id_cif: "2274235873432"
        tax_payer_information:
          rfc: GHTF980303F7
          curp: null
          name: null
          first_last_name: null
          second_last_name: null
          start_operations_date: 1995-08-01
          status_padron: ACTIVO
          last_status_change_date: 1995-08-01
          commercial_name: null
          social_name: ACNE SA DE CV
          email: contact@acne.com
          phone: "555507122"
        address:
          postal_code: "21255"
          street_type: BOULEVARD (BLVD.)
          street: GENERAL GIMENO
          exterior_number: "4360"
          interior_number: PLANTA BAJA
          suburb: BUENAVENTURA
          locality: null
          municipality: ALTOS DE MIRAMAR
          state: CIUDAD DE MEXICO
          between_street:
          - street_one: CALLE PRINCIPE
            street_two: CALLE NUEVA ROMA
        economic_activity:
        - order: "1"
          economic_activity: "Otros servicios profesionales, científicos y técnicos"
          percentage: "100"
          initial_date: 2014-11-05
          end_date: null
        regimes:
        - regime: Régimen General de Ley Personas Morales
          initial_date: 2003-01-01
          end_date: null
        obligations:
        - obligation: Declaración informativa de IVA con la anual de ISR
          expiration: Conjuntamente con la declaración anual del ejercicio.
          initial_date: 2004-03-31
          end_date: null
        - obligation: Pago definitivo mensual de IVA.
          expiration: A más tardar el día 17 del mes inmediato posterior al periodo
            que corresponda.
          initial_date: 2004-03-31
          end_date: null
        digital_stamp: '||2020/04/26|GHTF980303F7|CONSTANCIA DE SITUACIÓN FISCAL|2044441088666600000034||'
        digital_stamp_chain: EtenSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjow=
        pdf: null
  schemas:
    linkFilters:
      additionalProperties: false
      properties:
        access_mode:
          type: string
        created_at:
          type: string
        created_at__gt:
          type: string
        created_at__lt:
          type: string
        created_at__gte:
          type: string
        created_at__lte:
          type: string
        created_at__range:
          type: string
        created_by__not_in:
          type: string
        external_id:
          type: string
        external_id__in:
          type: string
        id:
          type: string
        id__in:
          type: string
        institution:
          type: string
        institution__in:
          type: string
        institution_user_id:
          type: string
        institution_user_id__in:
          type: string
        refresh_rate:
          type: string
        status:
          type: string
        status__in:
          type: string
      type: object
    Link:
      example:
        institution: erebor_mx_retail
        institution_user_id: sooE7XJWEKypZJR603ecaWYk-8Ap0oD8Nr1pBQ4eG9c=
        created_at: 2022-02-09T08:45:50.406032Z
        external_id: 56ab5706-6e00-48a4-91c9-ca55968678d9
        refresh_rate: 7d
        id: 30cb4806-6e00-48a4-91c9-ca55968576c8
        last_accessed_at: 2019-09-27T13:02:03.584Z
        access_mode: recurrent
        created_by: bcef7f35-67f2-4b19-b009-cb38795faf09
        status: valid
      properties:
        id:
          description: Belvo's unique ID used to reference the current Link.
          example: 30cb4806-6e00-48a4-91c9-ca55968576c8
          format: uuid
          type: string
        institution:
          description: |
            Belvo's name for the institution.
          example: erebor_mx_retail
          type: string
        access_mode:
          description: |
            The link type.
            For more information, see our [Links](https://developers.belvo.com/docs/links-and-institutions#links) article.
            We return one of the following enum values:
              - `single`
              - `recurrent`
          enum:
          - single
          - recurrent
          example: recurrent
          type: string
        last_accessed_at:
          description: The ISO-8601 timestamp of Belvo's most recent successful access
            to the institution for the given link.
          example: 2019-09-27T13:02:03.584Z
          format: date-time
          type: string
        created_at:
          description: The ISO-8601 timestamp of when the data point was last updated
            in Belvo's database.
          example: 2022-02-09T08:45:50.406032Z
          format: date-time
          type: string
        external_id:
          description: "The `external_id` you provided as an additional identifier\
            \ for the link. For more information, see our [Link creation article](https://developers.belvo.com/docs/link-creation-best-practices#adding-your-own-identifier)."
          example: 56ab5706-6e00-48a4-91c9-ca55968678d9
          nullable: true
          type: string
        institution_user_id:
          description: |-
            <div style="background-color:#f4f6f8; border-left: 6px solid #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px"> <strong>Info:</strong> Only applicable for links created <b>after 08-02-2022</b>. </div>

            A unique 44-character string that can be used to identify a user at a given institution.

            📚 Check out our [Avoiding duplicated links](https://developers.belvo.com/docs/link-creation-best-practices#avoiding-duplicated-links) DevPortal article for more information and tips on how to use it.
          example: sooE7XJWEKypZJR603ecaWYk-8Ap0oD8Nr1pBQ4eG9c=
          pattern: "[A-Za-z0-9\\-=_]{44}"
          type: string
        status:
          description: |
            The current status of the link. For more information, see our [Link](https://developers.belvo.com/docs/links-and-institutions#links) article in the devportal.
            We return one of the following enum values:
              - `valid`
              - `invalid`
              - `unconfirmed`
              - `token_required`
          enum:
          - valid
          - invalid
          - unconfirmed
          - token_required
          type: string
        created_by:
          description: The unique ID for the user that created this link.
          example: bcef7f35-67f2-4b19-b009-cb38795faf09
          format: uuid
          type: string
        refresh_rate:
          default: 7d
          description: |
            The update refresh rate for the recurrent link. For more information, check out our [recurrent link documentation](https://developers.belvo.com/docs/links-and-institutions#recurrent-links) in our DevPortal.
            We return one of the following enum values:
              - `6h`
              - `12h`
              - `24h`
              - `7d` (default)
              - `30d` (once a month)
          enum:
          - 6h
          - 12h
          - 24h
          - 7d
          - 30d
          example: 7d
          type: string
      type: object
    PaginatedResponseLink:
      example:
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: previous
        count: 130
        results:
        - institution: erebor_mx_retail
          institution_user_id: sooE7XJWEKypZJR603ecaWYk-8Ap0oD8Nr1pBQ4eG9c=
          created_at: 2022-02-09T08:45:50.406032Z
          external_id: 56ab5706-6e00-48a4-91c9-ca55968678d9
          refresh_rate: 7d
          id: 30cb4806-6e00-48a4-91c9-ca55968576c8
          last_accessed_at: 2019-09-27T13:02:03.584Z
          access_mode: recurrent
          created_by: bcef7f35-67f2-4b19-b009-cb38795faf09
          status: valid
        - institution: erebor_mx_retail
          institution_user_id: sooE7XJWEKypZJR603ecaWYk-8Ap0oD8Nr1pBQ4eG9c=
          created_at: 2022-02-09T08:45:50.406032Z
          external_id: 56ab5706-6e00-48a4-91c9-ca55968678d9
          refresh_rate: 7d
          id: 30cb4806-6e00-48a4-91c9-ca55968576c8
          last_accessed_at: 2019-09-27T13:02:03.584Z
          access_mode: recurrent
          created_by: bcef7f35-67f2-4b19-b009-cb38795faf09
          status: valid
      properties:
        count:
          description: The total number of results in your Belvo account.
          example: 130
          format: int32
          type: integer
        next:
          description: |
            The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

            In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
          example: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
          nullable: true
          type: string
        previous:
          description: "The URL to the previous page of results. If there is no previous\
            \ page, the value is `null`."
          nullable: true
          type: string
          example: null
        results:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      type: object
    UnauthorizedError:
      description: "This error occurs when you try to make an API call using incorrect\
        \ Belvo API credentials (either your secret key or secret password, or both,\
        \ are incorrect)."
      properties:
        code:
          description: |-
            A unique error code (`authentication_failed`) that allows you to classify and handle the error programmatically.

            ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#401-authentication_failed" target="_blank">401 authentication_failed errors</a>.
          example: authentication_failed
          type: string
        message:
          description: "A short description of the error. \n\nFor `authentication_failed`\
            \ errors, the description is:\n\n  - `Invalid Secret Keys`."
          example: Invalid Secret Keys
          type: string
        request_id:
          description: "A 32-character unique ID of the request (matching a regex\
            \ pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo\
            \ support team to accelerate investigations."
          example: 9e7b283c6efa449c9c028a16b5c249fb
          pattern: "[a-f0-9]{32}"
          type: string
      title: Unauthorized Error
      type: object
    LinksRequest:
      example:
        institution: erebor_mx_retail
        password: password
        certificate: 1234567890abcd=
        external_id: 56ab5706-6e00-48a4-91c9-ca55968678d9
        username3: thirdusername
        password2: pin
        username_type: "001"
        private_key: 1234567890abcd=
        username2: secondusername
        access_mode: recurrent
        username: username
        token: 1234ab
      properties:
        institution:
          description: The Belvo name for the institution.
          example: erebor_mx_retail
          pattern: "[a-z]+_[a-z]{2}_[a-z]+"
          type: string
        username:
          description: The end-user's username used to log in to the institution.
          example: username
          type: string
          writeOnly: true
        password:
          description: The end-user's password used to log in to the institution.
          example: password
          type: string
          writeOnly: true
        external_id:
          description: |-
            An additional identifier for the link, provided by you, to store in the Belvo database. **Cannot** include any Personal Identifiable Information (PII).

            If we identify that the identifier contains PII, we will force a `null` value. For more information, see our [Link creation article](https://developers.belvo.com/docs/link-creation-best-practices#adding-your-own-identifier).
          example: 56ab5706-6e00-48a4-91c9-ca55968678d9
          type: string
        username2:
          description: |
            The end-user's second username used to log in to the institution.

            ℹ️ This is only required by some institutions. To know which institutions require a second username, get the [details](https://developers.belvo.com/reference/detailinstitution) for the institution and check the `form_fields` array in the response.
          example: secondusername
          type: string
          writeOnly: true
        username3:
          description: |
            The end-user's third username used to log in to the institution.

            ℹ️ This is only required by some institutions. To know which institutions require a third username, get the [details](https://developers.belvo.com/reference/detailinstitution) for the institution and check the `form_fields` array in the response.
          example: thirdusername
          type: string
          writeOnly: true
        password2:
          description: |
            The end-user's second password used to log in to the institution.

            ℹ️ This is only required by some institutions. To know which institutions require a second password, get the [details](https://developers.belvo.com/reference/detailinstitution) for the institution and check the `form_fields` array in the response.
          example: pin
          type: string
          writeOnly: true
        token:
          description: |
            The MFA token required by the bank to log in.

            We do not recommend sending the authentication token in the same request as registering the user. See our [Handling multi-factor authentication](https://developers.belvo.com/docs/handling-2-factor-authentication) article for more information and best practices.
          example: 1234ab
          nullable: true
          type: string
          writeOnly: true
        access_mode:
          default: recurrent
          description: |
            The type of link to create.

            - Use `single` to do ad hoc one-time POST requests for accounts, owners, and transactions.
            - Use `recurrent` to have Belvo access information on a recurrent basis so you always have fresh account, owner, balance, and transaction data.

            For more information, see our [Links](https://developers.belvo.com/docs/links-and-institutions#links) article.
          enum:
          - single
          - recurrent
          type: string
        username_type:
          description: |
            Type of document to be used as a username.

            Some banking institutions accept different documents to be used as the `username` to login. For example, the *Cédula de Ciudadanía*, *Cédula de Extranjería*, *Pasaporte'*, and so on.

            For banks that require a document to log in, you **must** provide the `username_type` parameter to specify which document is used when creating the link.

            ℹ️ To know which institutions require the `username_type` parameter, get the [details](https://developers.belvo.com/reference/detailinstitution) for the institution and check the `form_fields` array in the response.

            For a list of standards codes, see the table below.

            | Code | Description |
            |-----------|-------|
            | `001` | Cédula de Ciudadanía |
            | `002` | Cédula de Extranjería |
            | `003` | Pasaporte |
            | `004` | Tarjeta de Identidad |
            | `005` | Registro Civil |
            | `006` | Número Identificación Personal |
            | `020` | NIT |
            | `021` | NIT Persona Natural |
            | `022` | NIT Persona Extranjera |
            | `023` | NIT Persona Jurídica |
            | `024` | NIT Menores |
            | `025` | NIT Desasociado |
            | `030` | Trj. Seguro Social Extranjero |
            | `031` | Sociedad Extranjera sin NIT en Colombia |
            | `032` | Fideicomiso |
            | `033` | RIF Venezuela |
            | `034` | CIF |
            | `035` | Número de Identidad |
            | `036` | RTN |
            | `037` | Cédula de Identidad |
            | `038` | DIMEX |
            | `039` | CED |
            | `040` | PAS |
            | `041` | Documento Único de Identidad |
            | `042` | NIT Salvadoreño |
            | `100` | Agência e conta |
            | `101` | Código do operador |
            | `102` | Cartão de crédito |
            | `103` | CPF |
          example: "001"
          nullable: true
          type: string
          writeOnly: true
        certificate:
          description: |
            For certain fiscal institutions, it is possible to log in using a certificate and a private key, which enables a faster connection to the institution.

            Belvo supports a base64 encoded `certificate`. If the `certificate` parameter is used, you *must* also provide the `private_key` parameter.
          example: 1234567890abcd=
          nullable: true
          type: string
          writeOnly: true
        private_key:
          description: |
            For certain fiscal institutions, it is possible to log in using a certificate and a private key, which enables a faster connection to the institution.

            Belvo supports a base64 encoded `private_key`. If the `private_key` parameter is used, you *must* also provide the `certificate` parameter.
          example: 1234567890abcd=
          nullable: true
          type: string
          writeOnly: true
      required:
      - institution
      - password
      - username
      type: object
    TooManySessionsError:
      description: |-
        This error occurs when:

          - a user is attempting to log in to their institution via Belvo while also already being logged in to their institution on a web browser or mobile app.
          - you make a request for information while Belvo is scraping data from the institution for that user.
      properties:
        code:
          description: |-
            A unique error code (`too_many_sessions`) that allows you to classify and handle the error programmatically.

            ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-too_many_sessions" target="_blank">400 too_many_sessions errors</a>.
          example: too_many_sessions
          type: string
        message:
          description: "A short description of the error. \n\nFor `too_many_sessions`\
            \ errors, the description is:\n  \n  - `Impossible to login, a session\
            \ is already opened with the institution for these credentials`."
          example: "Impossible to login, a session is already opened with the institution\
            \ for these credentials"
          type: string
        request_id:
          description: "A 32-character unique ID of the request (matching a regex\
            \ pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo\
            \ support team to accelerate investigations."
          example: 9e7b283c6efa449c9c028a16b5c249fb
          pattern: "[a-f0-9]{32}"
          type: string
      title: Too Many Sessions
      type: object
    SessionExpiredError:
      description: This error occurs when you try to resume a request session that
        has already expired. This is usually because the user took too long to provide
        their authentication token.
      properties:
        code:
          description: |-
            A unique error code (`session_expired`) that allows you to classify and handle the error programmatically.

            ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-session_expired" target="_blank">400 session_expired errors</a>.
          example: session_expired
          type: string
        message:
          description: "A short description of the error. \n\nFor `session_expired`\
            \ errors, the description is:\n  \n  - `The session you are trying to\
            \ resume has expired, please start again from register/retrieve endpoint`."
          example: "The session you are trying to resume has expired, please start\
            \ again from register/retrieve endpoint"
          type: string
        request_id:
          description: "A 32-character unique ID of the request (matching a regex\
            \ pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo\
            \ support team to accelerate investigations."
          example: 9e7b283c6efa449c9c028a16b5c249fb
          pattern: "[a-f0-9]{32}"
          type: string
      title: Session Expired
      type: object
    ValidationError:
      description: This error occurs when you try to resume a request session that
        has already expired. This is usually because the user took too long to provide
        their authentication token.
      properties:
        code:
          description: |-
            A unique error code (`null`, `does_not_exist`, `required`) that allows you to classify and handle the error programmatically.

            ℹ️ Check our DevPortal for more information on how to handle:
              - <a href="https://developers.belvo.com/docs/belvo-api-errors#400-blank" target="_blank">400 blank errors</a>
              - <a href="https://developers.belvo.com/docs/belvo-api-errors#400-null" target="_blank">400 null errors</a>
              - <a href="https://developers.belvo.com/docs/belvo-api-errors#400-does_not_exist" target="_blank">400 does_not_exist errors</a>
              - <a href="https://developers.belvo.com/docs/belvo-api-errors#400-required" target="_blank">400 required errors</a>
          example: required
          type: string
        message:
          description: "A short description of the error. \n\nFor `session_expired`\
            \ errors, the description can be (among others):\n  \n  - `This field\
            \ is required.`\n  - `Object with name=narnia does not exist.`\n  - `This\
            \ field may not be null.`\n  - `This field may not be blank.`"
          example: This field is required.
          type: string
        request_id:
          description: "A 32-character unique ID of the request (matching a regex\
            \ pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo\
            \ support team to accelerate investigations."
          example: 9e7b283c6efa449c9c028a16b5c249fb
          pattern: "[a-f0-9]{32}"
          type: string
        field:
          description: Name of the field where the error was encountered.
          example: link
          nullable: true
          type: string
      title: Validation Error
      type: object
    InstitutionDownError:
      description: "This error occurs when the institution's website that you're trying\
        \ to access is down due to maintenance or other issues, which means Belvo\
        \ is unable to create new links or retrieve new data."
      properties:
        code:
          description: |-
            A unique error code (`institution_down`) that allows you to classify and handle the error programmatically.

            ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-institution_down" target="_blank">400 institution_down errors</a>.
          example: institution_down
          type: string
        message:
          description: "A short description of the error. \n\nFor `institution_down`\
            \ errors, the description is:\n  \n  - `The financial institution is down,\
            \ try again later`."
          example: "The financial institution is down, try again later"
          type: string
        request_id:
          description: "A 32-character unique ID of the request (matching a regex\
            \ pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo\
            \ support team to accelerate investigations."
          example: 9e7b283c6efa449c9c028a16b5c249fb
          pattern: "[a-f0-9]{32}"
          type: string
      title: Institution Down
      type: object
    InstitutionUnavailableError:
      description: "This error occurs when the institution's website that you're trying\
        \ to access is down due to maintenance or other issues, which means Belvo\
        \ is unable to create new links or retrieve new data."
      properties:
        code:
          description: |-
            A unique error code (`institution_unavailable`) that allows you to classify and handle the error programmatically.

            ℹ️ Check our DevPortal for more information on how handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-institution_unavailable" target="_blank">400 institution_unavailable errors</a>.
          example: institution_unavailable
          type: string
        message:
          description: "A short description of the error.\n\nFor `institution_unavailable`\
            \ errors, the description is:\n  \n  - `The financial institution is unavailable`."
          example: The financial institution is unavailable
          type: string
        request_id:
          description: "A 32-character unique ID of the request (matching a regex\
            \ pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo\
            \ support team to accelerate investigations."
          example: 9e7b283c6efa449c9c028a16b5c249fb
          pattern: "[a-f0-9]{32}"
          type: string
      title: Institution Unavailable
      type: object
    InstitutionInactiveError:
      description: This error occurs when we (Belvo) have deactivated the institution
        in our API.
      properties:
        code:
          description: |-
            A unique error code (`institution_inactive`) that allows you to classify and handle the error programmatically.

            ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-institution_inactive" target="_blank">400 institution_inactive errors</a>.
          example: institution_inactive
          type: string
        message:
          description: "A short description of the error. \n\nFor `institution_inactive`\
            \ errors, the description is:\n  \n  - `The institution has been temporarily\
            \ deactivated`."
          example: The institution has been temporarily deactivated
          type: string
        request_id:
          description: "A 32-character unique ID of the request (matching a regex\
            \ pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo\
            \ support team to accelerate investigations."
          example: 9e7b283c6efa449c9c028a16b5c249fb
          pattern: "[a-f0-9]{32}"
          type: string
      title: Institution Inactive
      type: object
    UnsupportedOperationError:
      description: "This error occurs when you try to access some data operation that\
        \ Belvo does not support for an institution. For example, trying to access\
        \ the Balances resource for gig-economy accounts or for fiscal institutions."
      properties:
        code:
          description: |-
            A unique error code (`unsupported_operation`) that allows you to classify and handle the error programmatically.

            ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-unsupported_operation" target="_blank">400 unsupported_operation errors</a>.
          example: unsupported_operation
          type: string
        message:
          description: "A short description of the error. \n\nFor `unsupported_operation`\
            \ errors, the description is:\n  \n  - `The resource you are trying to\
            \ access is not supported by this institution`."
          example: The resource you are trying to access is not supported by this
            institution
          type: string
        request_id:
          description: "A 32-character unique ID of the request (matching a regex\
            \ pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo\
            \ support team to accelerate investigations."
          example: 9e7b283c6efa449c9c028a16b5c249fb
          pattern: "[a-f0-9]{32}"
          type: string
      title: Unsupported Operation
      type: object
    InvalidLinkError:
      description: "This error occurs when you try to access an account but the user\
        \ credentials are no longer valid, prompting an error from the institution."
      properties:
        code:
          description: |-
            A unique error code (`invalid_link`) that allows you to classify and handle the error programmatically.

            ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-invalid_link" target="_blank">400 invalid_link errors</a>.
          example: invalid_link
          type: string
        message:
          description: "A short description of the error. \n\nFor `invalid_link` errors,\
            \ the description is:\n  \n  - `The link has been invalidated. You may\
            \ need to update link credentials`."
          example: The link has been invalidated. You may need to update link credentials
          type: string
        request_id:
          description: "A 32-character unique ID of the request (matching a regex\
            \ pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo\
            \ support team to accelerate investigations."
          example: 9e7b283c6efa449c9c028a16b5c249fb
          pattern: "[a-f0-9]{32}"
          type: string
      title: Invalid Link
      type: object
    UnconfirmedLinkError:
      description: |-
        This error occurs when you try to access a link that was paused previously (and as such is not active now).
        A Link's status is set to `unconfirmed_link` when your user has not completed the Link creation process successfully (for example, they might not provide a valid MFA token).
      properties:
        code:
          description: |-
            A unique error code (`unconfirmed_link`) that allows you to classify and handle the error programmatically.

            ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-unconfirmed_link" target="_blank">400 unconfirmed_link errors</a>.
          example: unconfirmed_link
          type: string
        message:
          description: "A short description of the error. \n\nFor `unconfirmed_link`\
            \ errors, the description is:\n  \n  - `The link creation has not been\
            \ completed yet`."
          example: The link creation has not been completed yet
          type: string
        request_id:
          description: "A 32-character unique ID of the request (matching a regex\
            \ pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo\
            \ support team to accelerate investigations."
          example: 9e7b283c6efa449c9c028a16b5c249fb
          pattern: "[a-f0-9]{32}"
          type: string
      title: Unconfirmed Link
      type: object
    TokenRequiredResponseTokenGenerationData:
      description: Details on how to generate the token.
      properties:
        instructions:
          description: Instructions for token generation.
          example: Use this code to generate the token
          type: string
        type:
          description: "Type of the data to generate the token (QR code, numeric challenge)."
          example: numeric
          type: string
        value:
          description: Value to use to generate the token.
          example: "12345"
          type: string
        expects_user_input:
          default: true
          description: |-
            Indicates whether the user needs to provide input in order to complete the authentication.
            When set to `false`, your user may need to:
            - confirm the login on another device - scan a QR code
            You will still need to make a PATCH call to complete the request.
          example: true
          type: boolean
      type: object
    TokenRequiredResponse:
      description: MFA Token Required
      properties:
        code:
          description: |-
            A unique error code (`token_required`) that allows you to classify and handle the error programmatically.

            ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#428-token_required" target="_blank">428 token_required errors</a>.
          example: token_required
          type: string
        message:
          description: "A short description of the error. \n\nFor `token_required`\
            \ errors, the description is:\n  \n  - `A MFA token is required by the\
            \ institution to login`."
          example: A MFA token is required by the institution to login
          type: string
        request_id:
          description: "A 32-character unique ID of the request (matching a regex\
            \ pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo\
            \ support team to accelerate investigations."
          example: 8c7b283c6efa449c9c028a16b5c249fa
          pattern: "[a-f0-9]{32}"
          type: string
        session:
          description: "A 32-character unique ID of the login session (matching a\
            \ regex pattern of: `[a-f0-9]{32}`)."
          example: 2675b703b9d4451f8d4861a3eee54449
          pattern: "[a-f0-9]{32}"
          type: string
        expiry:
          description: Session duration time in seconds.
          example: 9600
          format: int32
          type: integer
        link:
          description: "Unique identifier created by Belvo, used to reference the\
            \ current Link."
          example: 30cb4806-6e00-48a4-91c9-ca55968576c8
          format: uuid
          type: string
        token_generation_data:
          $ref: '#/components/schemas/TokenRequiredResponseTokenGenerationData'
      type: object
    UnexpectedError:
      description: This error occurs when we (Belvo) have encountered an internal
        system error (sorry about that) or due to an unsupported response from the
        institution.
      properties:
        code:
          description: |-
            A unique error code (`unexpected_error`) that allows you to classify and handle the error programmatically.

            ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#500-unexpected_error" target="_blank">500 unexpected_error errors</a>.
          example: unexpected_error
          type: string
        message:
          description: "A short description of the error. \n\nFor `unexpected_error`\
            \ errors, the description is:\n  \n  - `Belvo is unable to process the\
            \ request due to an internal system issue or to an unsupported response\
            \ from an institution`."
          example: Belvo is unable to process the request due to an internal system
            issue or to an unsupported response from an institution
          type: string
        request_id:
          description: "A 32-character unique ID of the request (matching a regex\
            \ pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo\
            \ support team to accelerate investigations."
          example: 9e7b283c6efa449c9c028a16b5c249fb
          pattern: "[a-f0-9]{32}"
          type: string
      title: Unexpected Error
      type: object
    PatchBodyWithoutSaveData:
      description: A JSON object containing a session UUID and a MFA token
      example:
        session: 6e7b283c6efa449c9c028a16b5c249fa
        link: 683005d6-f45c-4adb-b289-f1a12f50f80c
        token: 1234ab
      properties:
        session:
          description: The session you want to resume. You need to use the `session`
            value that is provided in the 428 Token Required response that you receive
            after you make your POST request.
          example: 6e7b283c6efa449c9c028a16b5c249fa
          pattern: "[a-f0-9]{32}"
          type: string
        token:
          description: The MFA token generated by the institution and required to
            continue a session.
          example: 1234ab
          type: string
        link:
          description: The `link.id` you want to resume. Must be the same `link.id`
            as the one you receive in the 428 Token Required response that contains
            the `session` ID.
          example: 683005d6-f45c-4adb-b289-f1a12f50f80c
          format: uuid
          type: string
      required:
      - link
      - session
      type: object
    NotFoundError:
      properties:
        code:
          description: |-
            A unique error code (`not_found`) that allows you to classify and handle the error programmatically.

            ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#404-not_found" target="_blank">404 not_found errors</a>.
          example: not_found
          type: string
        message:
          description: "A short description of the error. \n\nFor `not_found` errors,\
            \ the description is:\n  \n  - `Not found`"
          example: Not found
          type: string
        request_id:
          description: "A 32-character unique ID of the request (matching a regex\
            \ pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo\
            \ support team to accelerate investigations."
          example: 9e7b283c6efa449c9c028a16b5c249fb
          pattern: "[a-f0-9]{32}"
          type: string
      title: Not Found
      type: object
    LinksPutRequest:
      example:
        password: password
        certificate: 1234567890abcd=
        password2: pin
        username_type: "001"
        private_key: 1234567890abcd=
        token: 1234ab
      properties:
        password:
          description: The end-user's password used to log in to the institution.
          example: password
          type: string
          writeOnly: true
        password2:
          description: |
            The end-user's second password used to log in to the institution.

            ℹ️ This is only required by some institutions. To know which institutions require a second password, get the [details](https://developers.belvo.com/reference/detailinstitution) for the institution and check the `form_fields` array in the response.
          example: pin
          type: string
          writeOnly: true
        token:
          description: |
            The MFA token required by the bank to log in.
          example: 1234ab
          nullable: true
          type: string
          writeOnly: true
        username_type:
          description: |
            Type of document to be used as a username.

              Some banking institutions accept different documents to be used as the `username` to login. For example, the *Cédula de Ciudadanía*, *Cédula de Extranjería*, *Pasaporte'*, and so on.

              For banks that require a document to log in, you **must** provide the `username_type` parameter to specify which document is used when creating the link.

              ℹ️ To know which institutions require the `username_type` parameter, get the [details](https://developers.belvo.com/reference/detailinstitution) for the institution and check the `form_fields` array in the response.

              For a list of standards codes, see the table below.

            | Code | Description |
            |-----------|-------|
            | `001` | Cédula de Ciudadanía |
            | `002` | Cédula de Extranjería |
            | `003` | Pasaporte |
            | `004` | Tarjeta de Identidad |
            | `005` | Registro Civil |
            | `006` | Número Identificación Personal |
            | `020` | NIT |
            | `021` | NIT Persona Natural |
            | `022` | NIT Persona Extranjera |
            | `023` | NIT Persona Jurídica |
            | `024` | NIT Menores |
            | `025` | NIT Desasociado |
            | `030` | Trj. Seguro Social Extranjero |
            | `031` | Sociedad Extranjera sin NIT en Colombia |
            | `032` | Fideicomiso |
            | `033` | RIF Venezuela |
            | `034` | CIF |
            | `035` | Número de Identidad |
            | `036` | RTN |
            | `037` | Cédula de Identidad |
            | `038` | DIMEX |
            | `039` | CED |
            | `040` | PAS |
            | `041` | Documento Único de Identidad |
            | `042` | NIT Salvadoreño |
            | `100` | Agência e conta |
            | `101` | Código do operador |
            | `102` | Cartão de crédito |
            | `103` | CPF |
          example: "001"
          nullable: true
          type: string
          writeOnly: true
        certificate:
          description: |
            For certain fiscal institutions, it is possible to log in using a certificate and a private key, which enables a faster connection to the institution.

            Belvo supports a base64 encoded `certificate`. If the `certificate` parameter is used, you *must* also provide the `private_key` parameter.
          example: 1234567890abcd=
          nullable: true
          type: string
          writeOnly: true
        private_key:
          description: |
            For certain fiscal institutions, it is possible to log in using a certificate and a private key, which enables a faster connection to the institution.

            Belvo supports a base64 encoded `private_key`. If the `private_key` parameter is used, you *must* also provide the `certificate` parameter.
          example: 1234567890abcd=
          nullable: true
          type: string
          writeOnly: true
      required:
      - institution
      - password
      - username
      type: object
    accountFilters:
      additionalProperties: false
      properties:
        balance__available:
          type: string
        balance__available__lt:
          type: string
        balance__available__lte:
          type: string
        balance__available__gt:
          type: string
        balance__available__gte:
          type: string
        balance__available__range:
          type: string
        balance__current:
          type: string
        balance__current__lt:
          type: string
        balance__current__lte:
          type: string
        balance__current__gt:
          type: string
        balance__current__gte:
          type: string
        balance__current__range:
          type: string
        bank_product_id:
          type: string
        category:
          type: string
        category__in:
          type: string
        created_at__gt:
          type: string
        created_at__lt:
          type: string
        created_at__gte:
          type: string
        created_at__lte:
          type: string
        created_at__range:
          type: string
        currency:
          type: string
        currency__in:
          type: string
        id:
          type: string
        id__in:
          type: string
        institution:
          type: string
        institution__in:
          type: string
        internal_identification:
          type: string
        link:
          type: string
        link__in:
          type: string
        name:
          type: string
        name__icontains:
          type: string
        number:
          type: string
        number__in:
          type: string
        public_identification_name:
          type: string
        public_identification_value:
          type: string
        type:
          type: string
      type: object
    InstitutionAccount:
      description: Details regarding the institution.
      example:
        name: erebor_mx_retail
        type: bank
      properties:
        name:
          description: |-
            The name of the institution, as designated by Belvo.
            Please see our [Institutions](https://developers.belvo.com/docs/institution) DevPortal article for a detailed list of institution names.
          example: erebor_mx_retail
          type: string
        type:
          description: |
            The type of institution.

            Can be either:

              - `bank`
              - `fiscal`
              - `gig`
          enum:
          - bank
          - fiscal
          - gig
          type: string
      type: object
    AccountsBalance:
      description: |
        Details regarding the current and available balances for the account.
      example:
        current: 5874.13
        available: 5621.12
      properties:
        current:
          description: |-
            The current balance is calculated differently according to the type of account.

            - **💰 Checking and saving accounts**:

            The user's account balance at the `collected_at` timestamp.
            - **💳 Credit cards**:

            The amount the user has spent in the current card billing period (see `credit_data.cutting_date` for information on when the current billing period finishes).
            - **🏡 Loan accounts**:

            The amount remaining to pay on the users's loan (same as `loan_data.outstanding_balance`).
            - **🚙 Gig economy accounts**:

            The calculated amount the user has in their gig wallet.
          example: 5874.13
          format: float
          nullable: true
          type: number
        available:
          description: |-
            The balance that the account owner can use.
            - **💰 Checking and saving accounts**:

            The available balance may be different to the `current` balance due to pending transactions.
            - **💳 Credit cards**:

            The credit amount the user still has available for the current period. The amount is calculated as `credit_data.credit_limit` minus `balance.current`.
            - **🏡 Loan accounts**:

            The present value required to pay off the loan, as provided by the institution.

            **Note:** If the institution does not provide this value, we return `null`.
            - **🚙 Gig economy accounts**:

            The amount the user currently has available in their gig wallet.
            This can differ from the `balance.current` in situations where the user has received a cash payment for a service and needs to charge their gig account with the amount they received in cash.
          example: 5621.12
          format: float
          nullable: true
          type: number
      required:
      - current
      type: object
    AccountsCreditData:
      description: The credit options associated with this account.
      example:
        no_interest_payment: 2690.83
        end_date: end_date
        credit_limit: 192000
        minimum_payment: 2400.3
        last_payment_date: last_payment_date
        interest_rate: 4
        cutting_date: 2019-12-11
        collected_at: 2019-09-27T13:01:41.941Z
        next_payment_date: 2019-12-13
        monthly_payment: 0.8008281904610115
      nullable: true
      properties:
        credit_limit:
          description: The maximum amount of credit the owner can receive.
          example: 192000
          format: float
          nullable: true
          type: number
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          example: 2019-09-27T13:01:41.941Z
          format: date-time
          nullable: true
          type: string
        cutting_date:
          description: The closing date of the credit period.
          example: 2019-12-11
          nullable: true
          type: string
        next_payment_date:
          description: The due date for the next payment.
          example: 2019-12-13
          nullable: true
          type: string
        minimum_payment:
          description: The minimum amount to be paid on the `next_payment_date`.
          example: 2400.3
          format: float
          nullable: true
          type: number
        no_interest_payment:
          description: The minimum amount required to pay to avoid generating interest.
          example: 2690.83
          format: float
          nullable: true
          type: number
        interest_rate:
          description: The annualized interest rate of the credit.
          example: 4
          format: float
          nullable: true
          type: number
        end_date:
          deprecated: true
          description: |
            *This field has been deprecated.*
          nullable: true
          type: string
          example: null
        monthly_payment:
          deprecated: true
          description: |
            *This field has been deprecated.*

            *The recurrent monthly payment, if applicable.*
          nullable: true
          type: number
          example: null
        last_payment_date:
          deprecated: true
          description: |
            *This field has been deprecated.*


            *The date when the last credit payment was made.*
          nullable: true
          type: string
          example: null
      required:
      - collected_at
      - credit_limit
      - cutting_date
      - interest_rate
      - minimum_payment
      - next_payment_date
      - no_interest_payment
      type: object
    AccountsLoanDataInterestRate:
      description: Breakdown of the interest applied to the loan.
      example:
        name: jurosEfetivo
        type: MONTHLY
        value: 7.85
      properties:
        name:
          description: The name of the type of interest rate applied to the loan.
          example: jurosEfetivo
          nullable: true
          type: string
        type:
          description: The period that the interest is applied to the loan.
          enum:
          - MONTHLY
          - YEARLY
          example: MONTHLY
          nullable: true
          type: string
        value:
          description: The interest rate (in percent or currency value).
          example: 7.85
          format: float
          nullable: true
          type: number
      required:
      - name
      - type
      - value
      type: object
    AccountsLoanDataFees:
      description: Breakdown of the fees applied to the loan.
      example:
        type: OPERATION_FEE
        value: 5.6
      nullable: true
      properties:
        type:
          description: The type of fee.
          enum:
          - OPERATION_FEE
          - INSURANCE_FEE
          - OTHERS
          example: OPERATION_FEE
          type: string
        value:
          description: |
            The total value of the fee. Same currency of the Loan.
          example: 5.6
          format: float
          type: number
      required:
      - type
      - value
      type: object
    AccountsLoanData:
      description: The loan options associated with this account.
      example:
        contract_amount: 202000
        number_of_installments_total: 60
        no_interest_payment: 5.637376656633329
        interest_rates:
        - name: jurosEfetivo
          type: MONTHLY
          value: 7.85
        - name: jurosEfetivo
          type: MONTHLY
          value: 7.85
        fees:
        - type: OPERATION_FEE
          value: 5.6
        - type: OPERATION_FEE
          value: 5.6
        limit_day: limit_day
        last_payment_date: last_payment_date
        cutting_day: cutting_day
        cutting_date: cutting_date
        loan_type: Consignado
        outstanding_principal: 142023
        contract_start_date: 2020-03-01T00:00:00.000+00:00
        last_period_balance: 1.4658129805029452
        collected_at: 2022-02-09T08:45:50.406032Z
        principal: 192000
        contract_end_date: 2027-10-01T00:00:00.000+00:00
        number_of_installments_outstanding: 48
        contract_number: 890ASLDJF87SD00
        payment_day: "27"
        outstanding_balance: 182000
        credit_limit: 6.027456183070403
        interest_rate: 5.962133916683182
        monthly_payment: 1000
      nullable: true
      properties:
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          example: 2022-02-09T08:45:50.406032Z
          format: date-time
          type: string
        contract_amount:
          description: "The initial total loan amount, calculated by the institution,\
            \ when the contract was signed. This amount includes the principal + interest\
            \ + taxes + fees."
          example: 202000
          format: float
          nullable: true
          type: number
        principal:
          description: Total amount of the loan (the amount the user receives).
          example: 192000
          format: float
          nullable: true
          type: number
        loan_type:
          description: "The type of the loan, according to the institution."
          example: Consignado
          nullable: true
          type: string
        payment_day:
          description: The day of the month by which the owner needs to pay the loan.
          example: "27"
          nullable: true
          type: string
        outstanding_principal:
          description: |
            Outstanding loan amount, that is, how much remains to pay on the principal (not including interest).
          example: 142023
          format: float
          nullable: true
          type: number
        outstanding_balance:
          description: "The amount remaining to pay in total, including interest."
          example: 182000
          format: float
          nullable: true
          type: number
        monthly_payment:
          description: "The recurrent monthly payment, if applicable."
          example: 1000
          format: float
          nullable: true
          type: number
        interest_rates:
          description: Breakdown of the interest applied to the loan.
          items:
            $ref: '#/components/schemas/AccountsLoanDataInterestRate'
          nullable: true
          type: array
        fees:
          description: Breakdown of the fees applied to the loan.
          items:
            $ref: '#/components/schemas/AccountsLoanDataFees'
          nullable: true
          type: array
        number_of_installments_total:
          description: The total number of installments required to pay the loan.
          example: 60
          format: int32
          nullable: true
          type: integer
        number_of_installments_outstanding:
          description: The number of installments left to pay.
          example: 48
          format: int32
          nullable: true
          type: integer
        contract_start_date:
          description: The date when the loan contract was signed.
          example: 2020-03-01
          format: date
          nullable: true
          type: string
        contract_end_date:
          description: The date when the loan is expected to be completed.
          example: 2027-10-01
          format: date
          type: string
        contract_number:
          description: "The contract number of the loan, as given by the institution."
          example: 890ASLDJF87SD00
          nullable: true
          type: string
        credit_limit:
          deprecated: true
          description: |
            This field has been deprecated.

            Please see `principal` instead.
          nullable: true
          type: number
          example: null
        last_period_balance:
          deprecated: true
          description: |
            This field has been deprecated.

            Please see `outstanding_balance` instead.
          nullable: true
          type: number
          example: null
        interest_rate:
          deprecated: true
          description: |
            This field has been deprecated.

            Please see the `interest_rates` object instead.
          nullable: true
          type: number
          example: null
        limit_day:
          deprecated: true
          description: |
            This field has been deprecated.

            Please see `payment_day` instead.
          nullable: true
          type: string
          example: null
        cutting_day:
          deprecated: true
          description: |
            This field has been deprecated.

            The closing day of the month for the loan.
          nullable: true
          type: string
          example: null
        cutting_date:
          deprecated: true
          description: |
            This field has been deprecated.

            The closing date of the loan period.
          nullable: true
          type: string
          example: null
        last_payment_date:
          deprecated: true
          description: |
            This field has been deprecated.

            The date when the last loan payment was made.
          nullable: true
          type: string
          example: null
        no_interest_payment:
          deprecated: true
          description: |
            This field has been deprecated.

            The minimum amount required to pay to avoid generating interest.
          nullable: true
          type: number
          example: null
      required:
      - collected_at
      - interest_rates
      - monthly_payment
      - outstanding_balance
      - payment_day
      - principal
      type: object
    AccountsFundsDataPublicIdentifications:
      example:
        name: CNPJ
        value: 05.954.445/0221-68
      properties:
        name:
          description: The type of identification number for the fund.
          example: CNPJ
          type: string
        value:
          description: The fund's identification number.
          example: 05.954.445/0221-68
          nullable: true
          type: string
      required:
      - name
      - value
      type: object
    AccountsFundsData:
      example:
        balance: "88427.94"
        percentage: "100"
        name: FIX X
        type: CNPJ
        public_identifications:
        - name: CNPJ
          value: 05.954.445/0221-68
        - name: CNPJ
          value: 05.954.445/0221-68
      properties:
        name:
          description: The pension fund name.
          example: FIX X
          nullable: true
          type: string
        type:
          description: Type of pension fund.
          example: CNPJ
          nullable: true
          type: string
        public_identifications:
          description: The fund's public IDs.
          items:
            $ref: '#/components/schemas/AccountsFundsDataPublicIdentifications'
          nullable: true
          type: array
        balance:
          description: The amount in the fund.
          example: "88427.94"
          nullable: true
          type: string
        percentage:
          description: "How much this fund, as a percentage, contributes to the pension\
            \ account's total."
          example: "100"
          nullable: true
          type: string
      type: object
    AccountsGigPaymentData:
      description: Additional data provided by the institution on the payment methods
        configured in the user profiles. This data is **only** provided by gig economy
        institutions.
      example:
        number: "123184016786312246"
        method: BANK_ACCOUNT
        issuer: AZTECA - BANCO AZTECA SA
        holder_name: Elisa Rojas Rivas
        collected_at: 2019-09-27T13:01:41.941Z
      nullable: true
      properties:
        method:
          description: "The payment method type set up by the user (`BANK_ACCOUNT`,\
            \ `CARD`, or `CASH`)."
          example: BANK_ACCOUNT
          nullable: true
          type: string
        issuer:
          description: The payment `method` issuer set up by the user (bank institution
            or card issuer).
          example: AZTECA - BANCO AZTECA SA
          nullable: true
          type: string
        number:
          description: The bank account or card number used for the payment.
          example: "123184016786312246"
          nullable: true
          type: string
        holder_name:
          description: The name of the payment `method` holder.
          example: Elisa Rojas Rivas
          nullable: true
          type: string
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          example: 2019-09-27T13:01:41.941Z
          format: date-time
          nullable: true
          type: string
      type: object
    AccountsReceivablesData:
      description: "Additional details regarding the receivables account, if applicable."
      example:
        current: 2193.83
        available: 800.37
        anticipated: 1393.46
        collected_at: 2022-02-09T08:45:50.406032Z
      nullable: true
      properties:
        current:
          description: The total sum of all receivables (`available` + `anticipated`)
          example: 2193.83
          format: float
          nullable: true
          type: number
        available:
          description: The amount that the owner of the account will receive according
            to an established date.
          example: 800.37
          format: float
          nullable: true
          type: number
        anticipated:
          description: The amount that the owner of the account received earlier than
            contracted.
          example: 1393.46
          format: float
          nullable: true
          type: number
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          example: 2022-02-09T08:45:50.406032Z
          format: date-time
          type: string
      required:
      - anticipated
      - available
      - collected_at
      - current
      type: object
    Account:
      description: |
        Details regarding the account.

        **Note**: For our recurring expenses resource, this account relates to the account that was analyzed to generate the recurring expenses report.
      example:
        loan_data:
          contract_amount: 202000
          number_of_installments_total: 60
          no_interest_payment: 5.637376656633329
          interest_rates:
          - name: jurosEfetivo
            type: MONTHLY
            value: 7.85
          - name: jurosEfetivo
            type: MONTHLY
            value: 7.85
          fees:
          - type: OPERATION_FEE
            value: 5.6
          - type: OPERATION_FEE
            value: 5.6
          limit_day: limit_day
          last_payment_date: last_payment_date
          cutting_day: cutting_day
          cutting_date: cutting_date
          loan_type: Consignado
          outstanding_principal: 142023
          contract_start_date: 2020-03-01T00:00:00.000+00:00
          last_period_balance: 1.4658129805029452
          collected_at: 2022-02-09T08:45:50.406032Z
          principal: 192000
          contract_end_date: 2027-10-01T00:00:00.000+00:00
          number_of_installments_outstanding: 48
          contract_number: 890ASLDJF87SD00
          payment_day: "27"
          outstanding_balance: 182000
          credit_limit: 6.027456183070403
          interest_rate: 5.962133916683182
          monthly_payment: 1000
        internal_identification: internal_identification
        link: 30cb4806-6e00-48a4-91c9-ca55968576c8
        created_at: 2022-02-09T08:45:50.406032Z
        public_identification_value: "150194683119900273"
        type: Cuentas de efectivo
        collected_at: 2019-09-27T13:01:41.941Z
        institution:
          name: erebor_mx_retail
          type: bank
        number: "4057068115181"
        balance:
          current: 5874.13
          available: 5621.12
        credit_data:
          no_interest_payment: 2690.83
          end_date: end_date
          credit_limit: 192000
          minimum_payment: 2400.3
          last_payment_date: last_payment_date
          interest_rate: 4
          cutting_date: 2019-12-11
          collected_at: 2019-09-27T13:01:41.941Z
          next_payment_date: 2019-12-13
          monthly_payment: 0.8008281904610115
        receivables_data:
          current: 2193.83
          available: 800.37
          anticipated: 1393.46
          collected_at: 2022-02-09T08:45:50.406032Z
        name: Cuenta Perfiles- M.N. - MXN-666
        gig_payment_data:
          number: "123184016786312246"
          method: BANK_ACCOUNT
          issuer: AZTECA - BANCO AZTECA SA
          holder_name: Elisa Rojas Rivas
          collected_at: 2019-09-27T13:01:41.941Z
        balance_type: ASSET
        currency: MXN
        funds_data:
        - balance: "88427.94"
          percentage: "100"
          name: FIX X
          type: CNPJ
          public_identifications:
          - name: CNPJ
            value: 05.954.445/0221-68
          - name: CNPJ
            value: 05.954.445/0221-68
        - balance: "88427.94"
          percentage: "100"
          name: FIX X
          type: CNPJ
          public_identifications:
          - name: CNPJ
            value: 05.954.445/0221-68
          - name: CNPJ
            value: 05.954.445/0221-68
        id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
        last_accessed_at: 2021-03-09T10:28:40Z
        category: CHECKING_ACCOUNT
        public_identification_name: CLABE
        bank_product_id: bank_product_id
      nullable: true
      properties:
        id:
          description: The unique identifier created by Belvo used to reference the
            current account.
          example: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
          format: uuid
          type: string
        link:
          description: The `link.id` the account belongs to.
          example: 30cb4806-6e00-48a4-91c9-ca55968576c8
          nullable: true
          type: string
        institution:
          $ref: '#/components/schemas/InstitutionAccount'
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          example: 2019-09-27T13:01:41.941Z
          format: date-time
          type: string
        created_at:
          description: The ISO-8601 timestamp of when the data point was last updated
            in Belvo's database.
          example: 2022-02-09T08:45:50.406032Z
          format: date-time
          type: string
        category:
          description: |
            The type of account.
            For Gig economy institutions, the account type refers to their gig role (delivery or driver).
            We return one of the following enum values:
              - `CHECKING_ACCOUNT`
              - `CREDIT_CARD`
              - `DELIVERY_ACCOUNT`
              - `DRIVER_ACCOUNT`
              - `INVESTMENT_ACCOUNT`
              - `LOAN_ACCOUNT`
              - `PENSION_FUND_ACCOUNT`
              - `RECEIVABLES_ACCOUNT`
              - `SAVINGS_ACCOUNT`
              - `UNCATEGORIZED`
          enum:
          - CHECKING_ACCOUNT
          - CREDIT_CARD
          - DELIVERY_ACCOUNT
          - DRIVER_ACCOUNT
          - INVESTMENT_ACCOUNT
          - LOAN_ACCOUNT
          - PENSION_FUND_ACCOUNT
          - RECEIVABLES_ACCOUNT
          - SAVINGS_ACCOUNT
          - UNCATEGORIZED
          example: CHECKING_ACCOUNT
          nullable: true
          type: string
        balance_type:
          description: |
            Indicates whether this account is either an `ASSET` or a `LIABILITY`. You can consider the balance of an `ASSET` as being positive, while the balance of a `LIABILITY` as negative.

            ℹ️ **Note**: Due to the nature of cash payments in gig-economy institutions, the `balance.current` and `balance.available` may indicate that the gig-economy user has a negative balance. However, this is still considered an `ASSET` as the gig-economy user has received payment for their services.
          example: ASSET
          nullable: true
          type: string
        type:
          description: "The account type, as designated by the institution."
          example: Cuentas de efectivo
          nullable: true
          type: string
        name:
          description: "The account name, as given by the institution."
          example: Cuenta Perfiles- M.N. - MXN-666
          nullable: true
          type: string
        number:
          description: "The account number, as designated by the institution."
          example: "4057068115181"
          nullable: true
          type: string
        balance:
          $ref: '#/components/schemas/AccountsBalance'
        currency:
          description: |-
            The currency of the account. For example:
            - 🇧🇷 BRL (Brazilian Real)
            - 🇨🇴 COP (Colombian Peso)
            - 🇲🇽 MXN (Mexican Peso)

             Please note that other currencies other than in the list above may be returned.
          example: MXN
          nullable: true
          type: string
        public_identification_name:
          description: |
            The public name for the type of identification. For example: `"CLABE"`.

            ℹ️ For 🇧🇷 Brazilian savings and checking accounts, this field will be `AGENCY/ACCOUNT`.
          example: CLABE
          nullable: true
          type: string
        public_identification_value:
          description: |
            The value for the `public_identification_name`.

            ℹ️ For 🇧🇷 Brazilian savings and checking accounts, this field will be the agency and bank account number, separated by a slash.
            For example: `0444/45722-0`.
          example: "150194683119900273"
          nullable: true
          type: string
        last_accessed_at:
          description: The ISO-8601 timestamp of Belvo's most recent successful access
            to the institution for the given link.
          example: 2021-03-09T10:28:40Z
          format: date-time
          nullable: true
          type: string
        credit_data:
          $ref: '#/components/schemas/AccountsCreditData'
        loan_data:
          $ref: '#/components/schemas/AccountsLoanData'
        funds_data:
          description: One or more funds that contribute to the the pension account.
          items:
            $ref: '#/components/schemas/AccountsFundsData'
          nullable: true
          type: array
        gig_payment_data:
          $ref: '#/components/schemas/AccountsGigPaymentData'
        receivables_data:
          $ref: '#/components/schemas/AccountsReceivablesData'
        bank_product_id:
          deprecated: true
          description: |
            *This field has been deprecated.*

            *The institution's product ID for the account type.*
          nullable: true
          type: string
          example: null
        internal_identification:
          deprecated: true
          description: |
            *This field has been deprecated.*

            *The institution's internal identification for the account.*
          nullable: true
          type: string
          example: null
      required:
      - balance
      - balance_type
      - category
      - collected_at
      - credit_data
      - currency
      - last_accessed_at
      - loan_data
      - name
      - number
      - public_identification_name
      - public_identification_value
      - type
      type: object
    AccountsPaginatedResponse:
      example:
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: previous
        count: 130
        results:
        - loan_data:
            contract_amount: 202000
            number_of_installments_total: 60
            no_interest_payment: 5.637376656633329
            interest_rates:
            - name: jurosEfetivo
              type: MONTHLY
              value: 7.85
            - name: jurosEfetivo
              type: MONTHLY
              value: 7.85
            fees:
            - type: OPERATION_FEE
              value: 5.6
            - type: OPERATION_FEE
              value: 5.6
            limit_day: limit_day
            last_payment_date: last_payment_date
            cutting_day: cutting_day
            cutting_date: cutting_date
            loan_type: Consignado
            outstanding_principal: 142023
            contract_start_date: 2020-03-01T00:00:00.000+00:00
            last_period_balance: 1.4658129805029452
            collected_at: 2022-02-09T08:45:50.406032Z
            principal: 192000
            contract_end_date: 2027-10-01T00:00:00.000+00:00
            number_of_installments_outstanding: 48
            contract_number: 890ASLDJF87SD00
            payment_day: "27"
            outstanding_balance: 182000
            credit_limit: 6.027456183070403
            interest_rate: 5.962133916683182
            monthly_payment: 1000
          internal_identification: internal_identification
          link: 30cb4806-6e00-48a4-91c9-ca55968576c8
          created_at: 2022-02-09T08:45:50.406032Z
          public_identification_value: "150194683119900273"
          type: Cuentas de efectivo
          collected_at: 2019-09-27T13:01:41.941Z
          institution:
            name: erebor_mx_retail
            type: bank
          number: "4057068115181"
          balance:
            current: 5874.13
            available: 5621.12
          credit_data:
            no_interest_payment: 2690.83
            end_date: end_date
            credit_limit: 192000
            minimum_payment: 2400.3
            last_payment_date: last_payment_date
            interest_rate: 4
            cutting_date: 2019-12-11
            collected_at: 2019-09-27T13:01:41.941Z
            next_payment_date: 2019-12-13
            monthly_payment: 0.8008281904610115
          receivables_data:
            current: 2193.83
            available: 800.37
            anticipated: 1393.46
            collected_at: 2022-02-09T08:45:50.406032Z
          name: Cuenta Perfiles- M.N. - MXN-666
          gig_payment_data:
            number: "123184016786312246"
            method: BANK_ACCOUNT
            issuer: AZTECA - BANCO AZTECA SA
            holder_name: Elisa Rojas Rivas
            collected_at: 2019-09-27T13:01:41.941Z
          balance_type: ASSET
          currency: MXN
          funds_data:
          - balance: "88427.94"
            percentage: "100"
            name: FIX X
            type: CNPJ
            public_identifications:
            - name: CNPJ
              value: 05.954.445/0221-68
            - name: CNPJ
              value: 05.954.445/0221-68
          - balance: "88427.94"
            percentage: "100"
            name: FIX X
            type: CNPJ
            public_identifications:
            - name: CNPJ
              value: 05.954.445/0221-68
            - name: CNPJ
              value: 05.954.445/0221-68
          id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
          last_accessed_at: 2021-03-09T10:28:40Z
          category: CHECKING_ACCOUNT
          public_identification_name: CLABE
          bank_product_id: bank_product_id
        - loan_data:
            contract_amount: 202000
            number_of_installments_total: 60
            no_interest_payment: 5.637376656633329
            interest_rates:
            - name: jurosEfetivo
              type: MONTHLY
              value: 7.85
            - name: jurosEfetivo
              type: MONTHLY
              value: 7.85
            fees:
            - type: OPERATION_FEE
              value: 5.6
            - type: OPERATION_FEE
              value: 5.6
            limit_day: limit_day
            last_payment_date: last_payment_date
            cutting_day: cutting_day
            cutting_date: cutting_date
            loan_type: Consignado
            outstanding_principal: 142023
            contract_start_date: 2020-03-01T00:00:00.000+00:00
            last_period_balance: 1.4658129805029452
            collected_at: 2022-02-09T08:45:50.406032Z
            principal: 192000
            contract_end_date: 2027-10-01T00:00:00.000+00:00
            number_of_installments_outstanding: 48
            contract_number: 890ASLDJF87SD00
            payment_day: "27"
            outstanding_balance: 182000
            credit_limit: 6.027456183070403
            interest_rate: 5.962133916683182
            monthly_payment: 1000
          internal_identification: internal_identification
          link: 30cb4806-6e00-48a4-91c9-ca55968576c8
          created_at: 2022-02-09T08:45:50.406032Z
          public_identification_value: "150194683119900273"
          type: Cuentas de efectivo
          collected_at: 2019-09-27T13:01:41.941Z
          institution:
            name: erebor_mx_retail
            type: bank
          number: "4057068115181"
          balance:
            current: 5874.13
            available: 5621.12
          credit_data:
            no_interest_payment: 2690.83
            end_date: end_date
            credit_limit: 192000
            minimum_payment: 2400.3
            last_payment_date: last_payment_date
            interest_rate: 4
            cutting_date: 2019-12-11
            collected_at: 2019-09-27T13:01:41.941Z
            next_payment_date: 2019-12-13
            monthly_payment: 0.8008281904610115
          receivables_data:
            current: 2193.83
            available: 800.37
            anticipated: 1393.46
            collected_at: 2022-02-09T08:45:50.406032Z
          name: Cuenta Perfiles- M.N. - MXN-666
          gig_payment_data:
            number: "123184016786312246"
            method: BANK_ACCOUNT
            issuer: AZTECA - BANCO AZTECA SA
            holder_name: Elisa Rojas Rivas
            collected_at: 2019-09-27T13:01:41.941Z
          balance_type: ASSET
          currency: MXN
          funds_data:
          - balance: "88427.94"
            percentage: "100"
            name: FIX X
            type: CNPJ
            public_identifications:
            - name: CNPJ
              value: 05.954.445/0221-68
            - name: CNPJ
              value: 05.954.445/0221-68
          - balance: "88427.94"
            percentage: "100"
            name: FIX X
            type: CNPJ
            public_identifications:
            - name: CNPJ
              value: 05.954.445/0221-68
            - name: CNPJ
              value: 05.954.445/0221-68
          id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
          last_accessed_at: 2021-03-09T10:28:40Z
          category: CHECKING_ACCOUNT
          public_identification_name: CLABE
          bank_product_id: bank_product_id
      properties:
        count:
          description: The total number of results in your Belvo account.
          example: 130
          format: int32
          type: integer
        next:
          description: |
            The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

            In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
          example: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
          nullable: true
          type: string
        previous:
          description: "The URL to the previous page of results. If there is no previous\
            \ page, the value is `null`."
          nullable: true
          type: string
          example: null
        results:
          description: An array of Account objects.
          items:
            $ref: '#/components/schemas/Account'
          type: array
      type: object
    StandardRequest:
      example:
        link: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
        save_data: true
        token: 1234ab
      properties:
        link:
          description: The `link.id` that you want to get information for.
          example: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
          format: uuid
          type: string
        token:
          description: The OTP token generated by the bank.
          example: 1234ab
          type: string
        save_data:
          default: true
          description: |-
            Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
            When set to `false`, the data won't be persisted and we return a 200 OK response.
          type: boolean
      required:
      - link
      type: object
    RequestTimeoutError:
      description: "Belvo has a limit regarding the time it takes to log in, retrieve\
        \ account data, and log out. A timeout occurs when there is a very high amount\
        \ of data and everything could not be obtained within the allotted time."
      properties:
        code:
          description: |-
            A unique error code (`request_timeout`) that allows you to classify and handle the error programmatically.

            ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#408-request_timeout" target="_blank">408 request_timeout errors</a>.
          example: request_timeout
          type: string
        message:
          description: "A short description of the error. \n\nFor `request_timeout`\
            \ errors, the description is:\n  \n  - `The request timed out, you can\
            \ retry asking for less data by changing your query parameters`."
          example: "The request timed out, you can retry asking for less data by changing\
            \ your query parameters"
          type: string
        request_id:
          description: "A 32-character unique ID of the request (matching a regex\
            \ pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo\
            \ support team to accelerate investigations."
          example: 9e7b283c6efa449c9c028a16b5c249fb
          pattern: "[a-f0-9]{32}"
          type: string
      title: Request Timeout
      type: object
    PatchBody:
      description: A JSON object containing a session UUID and a MFA token
      example:
        session: 6e7b283c6efa449c9c028a16b5c249fa
        link: 683005d6-f45c-4adb-b289-f1a12f50f80c
        save_data: true
        token: 1234ab
      properties:
        session:
          description: The session you want to resume. You need to use the `session`
            value that is provided in the 428 Token Required response that you receive
            after you make your POST request.
          example: 6e7b283c6efa449c9c028a16b5c249fa
          pattern: "[a-f0-9]{32}"
          type: string
        token:
          description: The MFA token generated by the institution and required to
            continue a session.
          example: 1234ab
          type: string
        link:
          description: The `link.id` you want to resume. Must be the same `link.id`
            as the one you receive in the 428 Token Required response that contains
            the `session` ID.
          example: 683005d6-f45c-4adb-b289-f1a12f50f80c
          format: uuid
          type: string
        save_data:
          default: true
          description: |-
            Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
            When set to `false`, the data won't be persisted and we return a 200 OK response.
          example: true
          type: boolean
      required:
      - link
      - session
      type: object
    transactionFilters:
      additionalProperties: false
      properties:
        account:
          type: string
        account__in:
          type: string
        account__balance__available:
          type: string
        account__balance__available__lt:
          type: string
        account__balance__available__lte:
          type: string
        account__balance__available__range:
          type: string
        account__balance__current:
          type: string
        account__balance__current__lt:
          type: string
        account__balance__current__lte:
          type: string
        account__balance__current__gt:
          type: string
        account__balance__current__gte:
          type: string
        account__balance__current__range:
          type: string
        account_type:
          type: string
        account_type__in:
          type: string
        collected_at:
          type: string
        collected_at__gt:
          type: string
        collected_at__lt:
          type: string
        collected_at__gte:
          type: string
        collected_at__lte:
          type: string
        collected_at__range:
          type: string
        accounting_date:
          type: string
        accounting_date__gt:
          type: string
        accounting_date__lt:
          type: string
        accounting_date__gte:
          type: string
        accounting_date__lte:
          type: string
        accounting_date__range:
          type: string
        value_date:
          type: string
        value_date__gt:
          type: string
        value_date__lt:
          type: string
        value_date__gte:
          type: string
        value_date__lte:
          type: string
        value_date__range:
          type: string
        amount:
          type: string
        amount__gt:
          type: string
        amount__gte:
          type: string
        amount__lt:
          type: string
        amount__lte:
          type: string
        amount__range:
          type: string
        reference:
          type: string
        reference__in:
          type: string
        type:
          type: string
        type__in:
          type: string
        status:
          type: string
        status__in:
          type: string
        currency:
          type: string
        currency__in:
          type: string
        credit_card_data__bill_name__in:
          type: string
        created_at:
          type: string
        created_at__gt:
          type: string
        created_at__lt:
          type: string
        created_at__gte:
          type: string
        created_at__lte:
          type: string
        created_at__range:
          type: string
      type: object
    TransactionMerchantData:
      description: |
        Additional data regarding the merchant involved in the transaction.
        We only return merchant information for new transactions made from *checking* or *credit card* accounts.
        > **Get merchant information**
         We can retrieve the merchant information for a transaction as part of our [Transaction categorization](https://developers.belvo.com/docs/banking#transaction-categorization) product, turning raw data into actionable insights. To enable this product, just email our sales team at sales@belvo.com, and they'll get right to it.
      example:
        website: https://merchants-r-us.com
        logo: https://logo.clearbit.com/asesor-contable.es
        merchant_name: Merchants R Us Global
      nullable: true
      properties:
        logo:
          description: The URL to the merchant's logo.
          example: https://logo.clearbit.com/asesor-contable.es
          nullable: true
          type: string
        website:
          description: The URL to the merchant's website.
          example: https://merchants-r-us.com
          nullable: true
          type: string
        merchant_name:
          description: The name of the merchant.
          example: Merchants R Us Global
          type: string
      type: object
    TransactionBreakdown:
      description: List of items representing the breakdown of the total amount in
        a transactions.
      example:
        reference: base_fare
        amount: 10
        description: Trip
      nullable: true
      properties:
        amount:
          description: The price of the transaction (trip or delivery order).
          example: 10
          format: float
          type: number
        reference:
          description: Additional information from the gig institution regarding the
            breakdown.
          example: base_fare
          nullable: true
          type: string
        description:
          description: The description of the breakdown. In some cases this field
            may provide information on how the `breakdown.amount` was calculated.
          example: Trip
          type: string
      type: object
    TransactionGigData:
      description: Additional data provided by the institution on the transaction.
        This data is provided only by gig economy institutions.
      example:
        pickup_longitude: pickup_longitude
        distance: 12
        pickup_at: 2019-11-28T10:27:44.813Z
        breakdown:
        - reference: base_fare
          amount: 10
          description: Trip
        - reference: base_fare
          amount: 10
          description: Trip
        pickup_address: "Carrer de la Llacuna, 162, 08018 Barcelona"
        vehicle_type: CAR
        dropoff_address: "Carrer de la Llacuna, 162, 08018 Barcelona"
        dropoff_latitude: dropoff_latitude
        dropoff_at: 2019-11-28T10:27:44.813Z
        collected_at: 2019-09-27T13:01:41.941Z
        dropoff_longitude: dropoff_longitude
        request_at: 2019-11-28T10:27:44.813Z
        pickup_latitude: pickup_latitude
        payment_method: CASH
        merchant_type: Restaurant
      nullable: true
      properties:
        pickup_at:
          description: Pickup ISO-8601 timestamp for one trip transaction or delivery.
          example: 2019-11-28T10:27:44.813Z
          format: date-time
          nullable: true
          type: string
        dropoff_at:
          description: Dropoff ISO-8601 timestamp for one trip transaction or delivery.
          example: 2019-11-28T10:27:44.813Z
          format: date-time
          nullable: true
          type: string
        request_at:
          description: ISO-8601 timestamp when one trip transaction or delivery was
            requested.
          example: 2019-11-28T10:27:44.813Z
          format: date-time
          nullable: true
          type: string
        pickup_address:
          description: Pickup address for the trip or delivery.
          example: "Carrer de la Llacuna, 162, 08018 Barcelona"
          nullable: true
          type: string
        dropoff_address:
          description: Dropoff address for the trip or delivery.
          example: "Carrer de la Llacuna, 162, 08018 Barcelona"
          nullable: true
          type: string
        pickup_latitude:
          deprecated: true
          description: |
            *This field has been deprecated.*

            *Latitude of the `pickup_address`.*
          nullable: true
          type: string
          example: null
        pickup_longitude:
          deprecated: true
          description: |
            *This field has been deprecated.*

            *Longitude of the `pickup_address`.*
          nullable: true
          type: string
          example: null
        dropoff_latitude:
          deprecated: true
          description: |
            *This field has been deprecated.*

            *Latitude of the `dropoff_address`.*
          nullable: true
          type: string
          example: null
        dropoff_longitude:
          deprecated: true
          description: |
            *This field has been deprecated.*

            *Longitude of the `dropoff_address`.*
          nullable: true
          type: string
          example: null
        distance:
          description: Distance in kilometers for the trip or delivery.
          example: 12
          format: float
          nullable: true
          type: number
        payment_method:
          description: "Payment method for the transaction. For example, `CASH` or\
            \ `IN_APP`."
          example: CASH
          nullable: true
          type: string
        vehicle_type:
          description: Vehicle type used.
          example: CAR
          nullable: true
          type: string
        merchant_type:
          description: Merchant type for the delivery.
          example: Restaurant
          nullable: true
          type: string
        breakdown:
          items:
            $ref: '#/components/schemas/TransactionBreakdown'
          nullable: true
          type: array
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          example: 2019-09-27T13:01:41.941Z
          format: date-time
          nullable: true
          type: string
      type: object
    TransactionCreditCardData:
      description: Additional data provided by the institution for credit card transactions.
      example:
        bill_amount: 300
        bill_name: apr-2020
        bill_status: PAID
        previous_bill_total: "9614.30"
        collected_at: 2019-09-27T13:01:41.941Z
      nullable: true
      properties:
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          example: 2019-09-27T13:01:41.941Z
          format: date-time
          nullable: true
          type: string
        bill_name:
          description: |
            The title of the monthly credit card bill the transaction belongs to. The format of the returned value is institution specific, however, some common examples are:

            - diciembre-2021
            - dec-2021
            - dec-21
          example: apr-2020
          nullable: true
          type: string
        bill_status:
          description: "The status of the bill that the transaction appears on. Can\
            \ be one of:\n\n  - `PAID`: The bill has been paid in full.\n  - `CLOSED`:\
            \ The bill has been closed by the institution.\n  - `OPEN`: The bill is\
            \ currently open. (Note: This is the main bill that Belvo retrieves balance\
            \ data from).\n  - `FUTURE`: The bill is pending.\n  \nℹ️ Note: Some banks\
            \ consider CLOSED as PAID. "
          enum:
          - PAID
          - CLOSED
          - OPEN
          - FUTURE
          - null
          example: PAID
          nullable: true
          type: string
        bill_amount:
          description: "The aggregate bill amount, as of `collected_at`."
          example: 300
          format: float
          nullable: true
          type: number
        previous_bill_total:
          description: "The total amount of the previous month's bill, if available."
          example: "9614.30"
          nullable: true
          type: string
      type: object
    Transaction:
      example:
        amount: 2145.45
        created_at: 2022-02-09T08:45:50.406032Z
        description: SEVEN BUDDHAS RFC:XXXXXXXXXX
        merchant:
          website: https://merchants-r-us.com
          logo: https://logo.clearbit.com/asesor-contable.es
          merchant_name: Merchants R Us Global
        type: OUTFLOW
        collected_at: 2019-11-28T10:27:44.813Z
        reference: "8703"
        gig_data:
          pickup_longitude: pickup_longitude
          distance: 12
          pickup_at: 2019-11-28T10:27:44.813Z
          breakdown:
          - reference: base_fare
            amount: 10
            description: Trip
          - reference: base_fare
            amount: 10
            description: Trip
          pickup_address: "Carrer de la Llacuna, 162, 08018 Barcelona"
          vehicle_type: CAR
          dropoff_address: "Carrer de la Llacuna, 162, 08018 Barcelona"
          dropoff_latitude: dropoff_latitude
          dropoff_at: 2019-11-28T10:27:44.813Z
          collected_at: 2019-09-27T13:01:41.941Z
          dropoff_longitude: dropoff_longitude
          request_at: 2019-11-28T10:27:44.813Z
          pickup_latitude: pickup_latitude
          payment_method: CASH
          merchant_type: Restaurant
        balance: 16907.96
        observations: OPTIONAL OBSERVATIONS
        currency: MXN
        credit_card_data:
          bill_amount: 300
          bill_name: apr-2020
          bill_status: PAID
          previous_bill_total: "9614.30"
          collected_at: 2019-09-27T13:01:41.941Z
        id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
        category: Food & Groceries
        account:
          loan_data:
            contract_amount: 202000
            number_of_installments_total: 60
            no_interest_payment: 5.637376656633329
            interest_rates:
            - name: jurosEfetivo
              type: MONTHLY
              value: 7.85
            - name: jurosEfetivo
              type: MONTHLY
              value: 7.85
            fees:
            - type: OPERATION_FEE
              value: 5.6
            - type: OPERATION_FEE
              value: 5.6
            limit_day: limit_day
            last_payment_date: last_payment_date
            cutting_day: cutting_day
            cutting_date: cutting_date
            loan_type: Consignado
            outstanding_principal: 142023
            contract_start_date: 2020-03-01T00:00:00.000+00:00
            last_period_balance: 1.4658129805029452
            collected_at: 2022-02-09T08:45:50.406032Z
            principal: 192000
            contract_end_date: 2027-10-01T00:00:00.000+00:00
            number_of_installments_outstanding: 48
            contract_number: 890ASLDJF87SD00
            payment_day: "27"
            outstanding_balance: 182000
            credit_limit: 6.027456183070403
            interest_rate: 5.962133916683182
            monthly_payment: 1000
          internal_identification: internal_identification
          link: 30cb4806-6e00-48a4-91c9-ca55968576c8
          created_at: 2022-02-09T08:45:50.406032Z
          public_identification_value: "150194683119900273"
          type: Cuentas de efectivo
          collected_at: 2019-09-27T13:01:41.941Z
          institution:
            name: erebor_mx_retail
            type: bank
          number: "4057068115181"
          balance:
            current: 5874.13
            available: 5621.12
          credit_data:
            no_interest_payment: 2690.83
            end_date: end_date
            credit_limit: 192000
            minimum_payment: 2400.3
            last_payment_date: last_payment_date
            interest_rate: 4
            cutting_date: 2019-12-11
            collected_at: 2019-09-27T13:01:41.941Z
            next_payment_date: 2019-12-13
            monthly_payment: 0.8008281904610115
          receivables_data:
            current: 2193.83
            available: 800.37
            anticipated: 1393.46
            collected_at: 2022-02-09T08:45:50.406032Z
          name: Cuenta Perfiles- M.N. - MXN-666
          gig_payment_data:
            number: "123184016786312246"
            method: BANK_ACCOUNT
            issuer: AZTECA - BANCO AZTECA SA
            holder_name: Elisa Rojas Rivas
            collected_at: 2019-09-27T13:01:41.941Z
          balance_type: ASSET
          currency: MXN
          funds_data:
          - balance: "88427.94"
            percentage: "100"
            name: FIX X
            type: CNPJ
            public_identifications:
            - name: CNPJ
              value: 05.954.445/0221-68
            - name: CNPJ
              value: 05.954.445/0221-68
          - balance: "88427.94"
            percentage: "100"
            name: FIX X
            type: CNPJ
            public_identifications:
            - name: CNPJ
              value: 05.954.445/0221-68
            - name: CNPJ
              value: 05.954.445/0221-68
          id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
          last_accessed_at: 2021-03-09T10:28:40Z
          category: CHECKING_ACCOUNT
          public_identification_name: CLABE
          bank_product_id: bank_product_id
        accounting_date: 2019-10-23T00:00:00.000+00:00
        value_date: 2019-10-23T00:00:00.000+00:00
        status: PENDING
      properties:
        id:
          description: Belvo's unique ID for the transaction.
          example: 076c66e5-90f5-4e01-99c7-50e32f65ae42
          format: uuid
          type: string
        account:
          $ref: '#/components/schemas/Account'
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          example: 2019-11-28T10:27:44.813Z
          format: date-time
          nullable: true
          type: string
        created_at:
          description: The ISO-8601 timestamp of when the data point was last updated
            in Belvo's database.
          example: 2022-02-09T08:45:50.406032Z
          format: date-time
          type: string
        value_date:
          description: "The date when the transaction occurred, in `YYYY-MM-DD` format."
          example: 2019-10-23
          format: date
          nullable: true
          type: string
        accounting_date:
          description: The date when the transaction was processed and accounted for
            by the institution.
          example: 2019-10-23
          format: date
          nullable: true
          type: string
        amount:
          description: |
            The transaction amount.
            ℹ️ The amount displayed is always positive as we indicate the direction of the transaction in the `type` parameter.
          example: 2145.45
          format: float
          type: number
        balance:
          description: The balance at the end of the transaction.
          example: 16907.96
          format: float
          nullable: true
          type: number
        currency:
          description: |-
            The currency of the transaction. For example:
            - 🇧🇷 BRL (Brazilian Real)
            - 🇨🇴 COP (Colombian Peso)
            - 🇲🇽 MXN (Mexican Peso)

             Please note that other currencies other than in the list above may be returned.
          example: MXN
          type: string
        description:
          description: The description of transaction provided by the institution.
            Usually this is the text that the end user sees in the online platform.
          example: SEVEN BUDDHAS RFC:XXXXXXXXXX
          nullable: true
          type: string
        observations:
          description: Additional observations provided by the institution on the
            transaction.
          example: OPTIONAL OBSERVATIONS
          nullable: true
          type: string
        merchant:
          $ref: '#/components/schemas/TransactionMerchantData'
        category:
          description: |
            The name of the category to which this transaction belongs.

            > **Get transaction categorization**
            We can clean and categorize transactions for you as part of our [Transaction categorization](https://developers.belvo.com/docs/banking#transaction-categorization) product, turning raw data into actionable insights. To enable this product, just email our sales team at sales@belvo.com, and they'll get right to it.

            We return one of the following enum values:

              - `Deposits`
              - `Home & Life`
              - `Food & Groceries`
              - `Online Platforms & Leisure`
              - `Transport & Travel`
              - `Personal Shopping`
              - `Taxes`
              - `Withdrawal & ATM`
              - `Credits & Loans`
              - `Bills & Utilities`
              - `Investments & Savings`
              - `Fees & Charges`
              - `Income & Payments`
              - `Transfers`
          enum:
          - Deposits
          - Home & Life
          - Food & Groceries
          - Online Platforms & Leisure
          - Transport & Travel
          - Personal Shopping
          - Taxes
          - Withdrawal & ATM
          - Credits & Loans
          - Bills & Utilities
          - Investments & Savings
          - Fees & Charges
          - Income & Payments
          - Transfers
          - null
          example: Food & Groceries
          nullable: true
          type: string
        reference:
          description: "The reference number of the transaction, provided by the bank."
          example: "8703"
          maxLength: 128
          nullable: true
          type: string
        type:
          description: |
            The direction of the transaction:
            - `INFLOW` indicates money coming into the account.
            - `OUTFLOW` indicates money going out of the account.
          enum:
          - OUTFLOW
          - INFLOW
          - null
          nullable: true
          type: string
        status:
          description: |
            The status of the transaction.

            We return one of the following enum values:

              - `PENDING`
              - `PROCESSED`
              - `UNCATEGORIZED`
          enum:
          - PENDING
          - PROCESSED
          - UNCATEGORIZED
          - null
          nullable: true
          type: string
        gig_data:
          $ref: '#/components/schemas/TransactionGigData'
        credit_card_data:
          $ref: '#/components/schemas/TransactionCreditCardData'
      required:
      - account
      - accounting_date
      - amount
      - balance
      - collected_at
      - currency
      - description
      - observations
      - reference
      - status
      - type
      - value_date
      type: object
    TransactionsPaginatedResponse:
      example:
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: previous
        count: 130
        results:
        - amount: 2145.45
          created_at: 2022-02-09T08:45:50.406032Z
          description: SEVEN BUDDHAS RFC:XXXXXXXXXX
          merchant:
            website: https://merchants-r-us.com
            logo: https://logo.clearbit.com/asesor-contable.es
            merchant_name: Merchants R Us Global
          type: OUTFLOW
          collected_at: 2019-11-28T10:27:44.813Z
          reference: "8703"
          gig_data:
            pickup_longitude: pickup_longitude
            distance: 12
            pickup_at: 2019-11-28T10:27:44.813Z
            breakdown:
            - reference: base_fare
              amount: 10
              description: Trip
            - reference: base_fare
              amount: 10
              description: Trip
            pickup_address: "Carrer de la Llacuna, 162, 08018 Barcelona"
            vehicle_type: CAR
            dropoff_address: "Carrer de la Llacuna, 162, 08018 Barcelona"
            dropoff_latitude: dropoff_latitude
            dropoff_at: 2019-11-28T10:27:44.813Z
            collected_at: 2019-09-27T13:01:41.941Z
            dropoff_longitude: dropoff_longitude
            request_at: 2019-11-28T10:27:44.813Z
            pickup_latitude: pickup_latitude
            payment_method: CASH
            merchant_type: Restaurant
          balance: 16907.96
          observations: OPTIONAL OBSERVATIONS
          currency: MXN
          credit_card_data:
            bill_amount: 300
            bill_name: apr-2020
            bill_status: PAID
            previous_bill_total: "9614.30"
            collected_at: 2019-09-27T13:01:41.941Z
          id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
          category: Food & Groceries
          account:
            loan_data:
              contract_amount: 202000
              number_of_installments_total: 60
              no_interest_payment: 5.637376656633329
              interest_rates:
              - name: jurosEfetivo
                type: MONTHLY
                value: 7.85
              - name: jurosEfetivo
                type: MONTHLY
                value: 7.85
              fees:
              - type: OPERATION_FEE
                value: 5.6
              - type: OPERATION_FEE
                value: 5.6
              limit_day: limit_day
              last_payment_date: last_payment_date
              cutting_day: cutting_day
              cutting_date: cutting_date
              loan_type: Consignado
              outstanding_principal: 142023
              contract_start_date: 2020-03-01T00:00:00.000+00:00
              last_period_balance: 1.4658129805029452
              collected_at: 2022-02-09T08:45:50.406032Z
              principal: 192000
              contract_end_date: 2027-10-01T00:00:00.000+00:00
              number_of_installments_outstanding: 48
              contract_number: 890ASLDJF87SD00
              payment_day: "27"
              outstanding_balance: 182000
              credit_limit: 6.027456183070403
              interest_rate: 5.962133916683182
              monthly_payment: 1000
            internal_identification: internal_identification
            link: 30cb4806-6e00-48a4-91c9-ca55968576c8
            created_at: 2022-02-09T08:45:50.406032Z
            public_identification_value: "150194683119900273"
            type: Cuentas de efectivo
            collected_at: 2019-09-27T13:01:41.941Z
            institution:
              name: erebor_mx_retail
              type: bank
            number: "4057068115181"
            balance:
              current: 5874.13
              available: 5621.12
            credit_data:
              no_interest_payment: 2690.83
              end_date: end_date
              credit_limit: 192000
              minimum_payment: 2400.3
              last_payment_date: last_payment_date
              interest_rate: 4
              cutting_date: 2019-12-11
              collected_at: 2019-09-27T13:01:41.941Z
              next_payment_date: 2019-12-13
              monthly_payment: 0.8008281904610115
            receivables_data:
              current: 2193.83
              available: 800.37
              anticipated: 1393.46
              collected_at: 2022-02-09T08:45:50.406032Z
            name: Cuenta Perfiles- M.N. - MXN-666
            gig_payment_data:
              number: "123184016786312246"
              method: BANK_ACCOUNT
              issuer: AZTECA - BANCO AZTECA SA
              holder_name: Elisa Rojas Rivas
              collected_at: 2019-09-27T13:01:41.941Z
            balance_type: ASSET
            currency: MXN
            funds_data:
            - balance: "88427.94"
              percentage: "100"
              name: FIX X
              type: CNPJ
              public_identifications:
              - name: CNPJ
                value: 05.954.445/0221-68
              - name: CNPJ
                value: 05.954.445/0221-68
            - balance: "88427.94"
              percentage: "100"
              name: FIX X
              type: CNPJ
              public_identifications:
              - name: CNPJ
                value: 05.954.445/0221-68
              - name: CNPJ
                value: 05.954.445/0221-68
            id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
            last_accessed_at: 2021-03-09T10:28:40Z
            category: CHECKING_ACCOUNT
            public_identification_name: CLABE
            bank_product_id: bank_product_id
          accounting_date: 2019-10-23T00:00:00.000+00:00
          value_date: 2019-10-23T00:00:00.000+00:00
          status: PENDING
        - amount: 2145.45
          created_at: 2022-02-09T08:45:50.406032Z
          description: SEVEN BUDDHAS RFC:XXXXXXXXXX
          merchant:
            website: https://merchants-r-us.com
            logo: https://logo.clearbit.com/asesor-contable.es
            merchant_name: Merchants R Us Global
          type: OUTFLOW
          collected_at: 2019-11-28T10:27:44.813Z
          reference: "8703"
          gig_data:
            pickup_longitude: pickup_longitude
            distance: 12
            pickup_at: 2019-11-28T10:27:44.813Z
            breakdown:
            - reference: base_fare
              amount: 10
              description: Trip
            - reference: base_fare
              amount: 10
              description: Trip
            pickup_address: "Carrer de la Llacuna, 162, 08018 Barcelona"
            vehicle_type: CAR
            dropoff_address: "Carrer de la Llacuna, 162, 08018 Barcelona"
            dropoff_latitude: dropoff_latitude
            dropoff_at: 2019-11-28T10:27:44.813Z
            collected_at: 2019-09-27T13:01:41.941Z
            dropoff_longitude: dropoff_longitude
            request_at: 2019-11-28T10:27:44.813Z
            pickup_latitude: pickup_latitude
            payment_method: CASH
            merchant_type: Restaurant
          balance: 16907.96
          observations: OPTIONAL OBSERVATIONS
          currency: MXN
          credit_card_data:
            bill_amount: 300
            bill_name: apr-2020
            bill_status: PAID
            previous_bill_total: "9614.30"
            collected_at: 2019-09-27T13:01:41.941Z
          id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
          category: Food & Groceries
          account:
            loan_data:
              contract_amount: 202000
              number_of_installments_total: 60
              no_interest_payment: 5.637376656633329
              interest_rates:
              - name: jurosEfetivo
                type: MONTHLY
                value: 7.85
              - name: jurosEfetivo
                type: MONTHLY
                value: 7.85
              fees:
              - type: OPERATION_FEE
                value: 5.6
              - type: OPERATION_FEE
                value: 5.6
              limit_day: limit_day
              last_payment_date: last_payment_date
              cutting_day: cutting_day
              cutting_date: cutting_date
              loan_type: Consignado
              outstanding_principal: 142023
              contract_start_date: 2020-03-01T00:00:00.000+00:00
              last_period_balance: 1.4658129805029452
              collected_at: 2022-02-09T08:45:50.406032Z
              principal: 192000
              contract_end_date: 2027-10-01T00:00:00.000+00:00
              number_of_installments_outstanding: 48
              contract_number: 890ASLDJF87SD00
              payment_day: "27"
              outstanding_balance: 182000
              credit_limit: 6.027456183070403
              interest_rate: 5.962133916683182
              monthly_payment: 1000
            internal_identification: internal_identification
            link: 30cb4806-6e00-48a4-91c9-ca55968576c8
            created_at: 2022-02-09T08:45:50.406032Z
            public_identification_value: "150194683119900273"
            type: Cuentas de efectivo
            collected_at: 2019-09-27T13:01:41.941Z
            institution:
              name: erebor_mx_retail
              type: bank
            number: "4057068115181"
            balance:
              current: 5874.13
              available: 5621.12
            credit_data:
              no_interest_payment: 2690.83
              end_date: end_date
              credit_limit: 192000
              minimum_payment: 2400.3
              last_payment_date: last_payment_date
              interest_rate: 4
              cutting_date: 2019-12-11
              collected_at: 2019-09-27T13:01:41.941Z
              next_payment_date: 2019-12-13
              monthly_payment: 0.8008281904610115
            receivables_data:
              current: 2193.83
              available: 800.37
              anticipated: 1393.46
              collected_at: 2022-02-09T08:45:50.406032Z
            name: Cuenta Perfiles- M.N. - MXN-666
            gig_payment_data:
              number: "123184016786312246"
              method: BANK_ACCOUNT
              issuer: AZTECA - BANCO AZTECA SA
              holder_name: Elisa Rojas Rivas
              collected_at: 2019-09-27T13:01:41.941Z
            balance_type: ASSET
            currency: MXN
            funds_data:
            - balance: "88427.94"
              percentage: "100"
              name: FIX X
              type: CNPJ
              public_identifications:
              - name: CNPJ
                value: 05.954.445/0221-68
              - name: CNPJ
                value: 05.954.445/0221-68
            - balance: "88427.94"
              percentage: "100"
              name: FIX X
              type: CNPJ
              public_identifications:
              - name: CNPJ
                value: 05.954.445/0221-68
              - name: CNPJ
                value: 05.954.445/0221-68
            id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
            last_accessed_at: 2021-03-09T10:28:40Z
            category: CHECKING_ACCOUNT
            public_identification_name: CLABE
            bank_product_id: bank_product_id
          accounting_date: 2019-10-23T00:00:00.000+00:00
          value_date: 2019-10-23T00:00:00.000+00:00
          status: PENDING
      properties:
        count:
          description: The total number of results in your Belvo account.
          example: 130
          format: int32
          type: integer
        next:
          description: |
            The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

            In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
          example: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
          nullable: true
          type: string
        previous:
          description: "The URL to the previous page of results. If there is no previous\
            \ page, the value is `null`."
          nullable: true
          type: string
          example: null
        results:
          description: Array of transaction objects.
          items:
            $ref: '#/components/schemas/Transaction'
          type: array
      type: object
    TransactionsRequest:
      example:
        link: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
        date_to: 2020-10-05
        account: d4617561-1c01-4b2f-83b6-a594f7b3bc57
        save_data: true
        date_from: 2020-08-05
        token: 1234ab
      properties:
        link:
          description: The `link.id` that you want to get information for.
          example: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
          format: uuid
          type: string
        account:
          description: "If provided, we return transactions only from this account."
          example: d4617561-1c01-4b2f-83b6-a594f7b3bc57
          format: uuid
          type: string
        date_from:
          description: |-
            The date from which you want to start getting transactions for, in `YYYY-MM-DD` format.

            ⚠️ The value of `date_from` cannot be greater than `date_to`.
          example: 2020-08-05
          pattern: "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          type: string
        date_to:
          description: |-
            The date you want to stop getting transactions for, in `YYYY-MM-DD` format.

            ⚠️ The value of `date_to` cannot be greater than today's date (in other words, no future dates).
          example: 2020-10-05
          pattern: "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          type: string
        token:
          description: The OTP token generated by the bank.
          example: 1234ab
          type: string
        save_data:
          default: true
          description: |-
            Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
            When set to `false`, the data won't be persisted and we return a 200 OK response.
          type: boolean
      required:
      - date_from
      - date_to
      - link
      type: object
    balanceFilters:
      additionalProperties: false
      properties:
        account:
          type: string
        account__in:
          type: string
        account__type:
          type: string
        account__type__in:
          type: string
        balance:
          type: string
        balance__lt:
          type: string
        balance__lte:
          type: string
        balance__gt:
          type: string
        balance__gte:
          type: string
        balance__range:
          type: string
        currency:
          type: string
        currency__in:
          type: string
        current_balance:
          type: string
        current_balance__lt:
          type: string
        current_balance__lte:
          type: string
        current_balance__gt:
          type: string
        current_balance__gte:
          type: string
        current_balance__range:
          type: string
        id:
          type: string
        id__in:
          type: string
        institution:
          type: string
        institution__in:
          type: string
        link:
          type: string
        link__in:
          type: string
        value_date:
          type: string
        value_date__gt:
          type: string
        value_date__lt:
          type: string
        value_date__gte:
          type: string
        value_date__lte:
          type: string
        value_date__range:
          type: string
      type: object
    Balance:
      example:
        balance: 50000
        statement: statement
        current_balance: 0.8008281904610115
        id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
        account:
          loan_data:
            contract_amount: 202000
            number_of_installments_total: 60
            no_interest_payment: 5.637376656633329
            interest_rates:
            - name: jurosEfetivo
              type: MONTHLY
              value: 7.85
            - name: jurosEfetivo
              type: MONTHLY
              value: 7.85
            fees:
            - type: OPERATION_FEE
              value: 5.6
            - type: OPERATION_FEE
              value: 5.6
            limit_day: limit_day
            last_payment_date: last_payment_date
            cutting_day: cutting_day
            cutting_date: cutting_date
            loan_type: Consignado
            outstanding_principal: 142023
            contract_start_date: 2020-03-01T00:00:00.000+00:00
            last_period_balance: 1.4658129805029452
            collected_at: 2022-02-09T08:45:50.406032Z
            principal: 192000
            contract_end_date: 2027-10-01T00:00:00.000+00:00
            number_of_installments_outstanding: 48
            contract_number: 890ASLDJF87SD00
            payment_day: "27"
            outstanding_balance: 182000
            credit_limit: 6.027456183070403
            interest_rate: 5.962133916683182
            monthly_payment: 1000
          internal_identification: internal_identification
          link: 30cb4806-6e00-48a4-91c9-ca55968576c8
          created_at: 2022-02-09T08:45:50.406032Z
          public_identification_value: "150194683119900273"
          type: Cuentas de efectivo
          collected_at: 2019-09-27T13:01:41.941Z
          institution:
            name: erebor_mx_retail
            type: bank
          number: "4057068115181"
          balance:
            current: 5874.13
            available: 5621.12
          credit_data:
            no_interest_payment: 2690.83
            end_date: end_date
            credit_limit: 192000
            minimum_payment: 2400.3
            last_payment_date: last_payment_date
            interest_rate: 4
            cutting_date: 2019-12-11
            collected_at: 2019-09-27T13:01:41.941Z
            next_payment_date: 2019-12-13
            monthly_payment: 0.8008281904610115
          receivables_data:
            current: 2193.83
            available: 800.37
            anticipated: 1393.46
            collected_at: 2022-02-09T08:45:50.406032Z
          name: Cuenta Perfiles- M.N. - MXN-666
          gig_payment_data:
            number: "123184016786312246"
            method: BANK_ACCOUNT
            issuer: AZTECA - BANCO AZTECA SA
            holder_name: Elisa Rojas Rivas
            collected_at: 2019-09-27T13:01:41.941Z
          balance_type: ASSET
          currency: MXN
          funds_data:
          - balance: "88427.94"
            percentage: "100"
            name: FIX X
            type: CNPJ
            public_identifications:
            - name: CNPJ
              value: 05.954.445/0221-68
            - name: CNPJ
              value: 05.954.445/0221-68
          - balance: "88427.94"
            percentage: "100"
            name: FIX X
            type: CNPJ
            public_identifications:
            - name: CNPJ
              value: 05.954.445/0221-68
            - name: CNPJ
              value: 05.954.445/0221-68
          id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
          last_accessed_at: 2021-03-09T10:28:40Z
          category: CHECKING_ACCOUNT
          public_identification_name: CLABE
          bank_product_id: bank_product_id
        value_date: 2019-10-23T00:00:00.000+00:00
        collected_at: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: Belvo's unique ID for the balance request.
          example: 076c66e5-90f5-4e01-99c7-50e32f65ae42
          format: uuid
          type: string
        account:
          $ref: '#/components/schemas/Account'
        value_date:
          description: "The date when the `balance` was available, in `YYYY-MM-DD`\
            \ format."
          example: 2019-10-23
          format: date
          type: string
        balance:
          description: The funds available in the account by the end of the `value_date`.
          example: 50000
          format: float
          type: number
        current_balance:
          deprecated: true
          description: |
            *This field has been deprecated. Please use the `balance` field instead.*
          nullable: true
          type: number
          example: null
        statement:
          deprecated: true
          description: |
            *This field has been deprecated.*

            *The ID of the banking statement used to extract the `balance`.*
          nullable: true
          type: string
          example: null
        collected_at:
          deprecated: true
          description: |
            This field has been deprecated.

            The ISO-8601 timestamp when the data point was collected.
          format: date-time
          nullable: true
          type: string
          example: null
      type: object
    BalancesPaginatedResponse:
      example:
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: previous
        count: 130
        results:
        - balance: 50000
          statement: statement
          current_balance: 0.8008281904610115
          id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
          account:
            loan_data:
              contract_amount: 202000
              number_of_installments_total: 60
              no_interest_payment: 5.637376656633329
              interest_rates:
              - name: jurosEfetivo
                type: MONTHLY
                value: 7.85
              - name: jurosEfetivo
                type: MONTHLY
                value: 7.85
              fees:
              - type: OPERATION_FEE
                value: 5.6
              - type: OPERATION_FEE
                value: 5.6
              limit_day: limit_day
              last_payment_date: last_payment_date
              cutting_day: cutting_day
              cutting_date: cutting_date
              loan_type: Consignado
              outstanding_principal: 142023
              contract_start_date: 2020-03-01T00:00:00.000+00:00
              last_period_balance: 1.4658129805029452
              collected_at: 2022-02-09T08:45:50.406032Z
              principal: 192000
              contract_end_date: 2027-10-01T00:00:00.000+00:00
              number_of_installments_outstanding: 48
              contract_number: 890ASLDJF87SD00
              payment_day: "27"
              outstanding_balance: 182000
              credit_limit: 6.027456183070403
              interest_rate: 5.962133916683182
              monthly_payment: 1000
            internal_identification: internal_identification
            link: 30cb4806-6e00-48a4-91c9-ca55968576c8
            created_at: 2022-02-09T08:45:50.406032Z
            public_identification_value: "150194683119900273"
            type: Cuentas de efectivo
            collected_at: 2019-09-27T13:01:41.941Z
            institution:
              name: erebor_mx_retail
              type: bank
            number: "4057068115181"
            balance:
              current: 5874.13
              available: 5621.12
            credit_data:
              no_interest_payment: 2690.83
              end_date: end_date
              credit_limit: 192000
              minimum_payment: 2400.3
              last_payment_date: last_payment_date
              interest_rate: 4
              cutting_date: 2019-12-11
              collected_at: 2019-09-27T13:01:41.941Z
              next_payment_date: 2019-12-13
              monthly_payment: 0.8008281904610115
            receivables_data:
              current: 2193.83
              available: 800.37
              anticipated: 1393.46
              collected_at: 2022-02-09T08:45:50.406032Z
            name: Cuenta Perfiles- M.N. - MXN-666
            gig_payment_data:
              number: "123184016786312246"
              method: BANK_ACCOUNT
              issuer: AZTECA - BANCO AZTECA SA
              holder_name: Elisa Rojas Rivas
              collected_at: 2019-09-27T13:01:41.941Z
            balance_type: ASSET
            currency: MXN
            funds_data:
            - balance: "88427.94"
              percentage: "100"
              name: FIX X
              type: CNPJ
              public_identifications:
              - name: CNPJ
                value: 05.954.445/0221-68
              - name: CNPJ
                value: 05.954.445/0221-68
            - balance: "88427.94"
              percentage: "100"
              name: FIX X
              type: CNPJ
              public_identifications:
              - name: CNPJ
                value: 05.954.445/0221-68
              - name: CNPJ
                value: 05.954.445/0221-68
            id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
            last_accessed_at: 2021-03-09T10:28:40Z
            category: CHECKING_ACCOUNT
            public_identification_name: CLABE
            bank_product_id: bank_product_id
          value_date: 2019-10-23T00:00:00.000+00:00
          collected_at: 2000-01-23T04:56:07.000+00:00
        - balance: 50000
          statement: statement
          current_balance: 0.8008281904610115
          id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
          account:
            loan_data:
              contract_amount: 202000
              number_of_installments_total: 60
              no_interest_payment: 5.637376656633329
              interest_rates:
              - name: jurosEfetivo
                type: MONTHLY
                value: 7.85
              - name: jurosEfetivo
                type: MONTHLY
                value: 7.85
              fees:
              - type: OPERATION_FEE
                value: 5.6
              - type: OPERATION_FEE
                value: 5.6
              limit_day: limit_day
              last_payment_date: last_payment_date
              cutting_day: cutting_day
              cutting_date: cutting_date
              loan_type: Consignado
              outstanding_principal: 142023
              contract_start_date: 2020-03-01T00:00:00.000+00:00
              last_period_balance: 1.4658129805029452
              collected_at: 2022-02-09T08:45:50.406032Z
              principal: 192000
              contract_end_date: 2027-10-01T00:00:00.000+00:00
              number_of_installments_outstanding: 48
              contract_number: 890ASLDJF87SD00
              payment_day: "27"
              outstanding_balance: 182000
              credit_limit: 6.027456183070403
              interest_rate: 5.962133916683182
              monthly_payment: 1000
            internal_identification: internal_identification
            link: 30cb4806-6e00-48a4-91c9-ca55968576c8
            created_at: 2022-02-09T08:45:50.406032Z
            public_identification_value: "150194683119900273"
            type: Cuentas de efectivo
            collected_at: 2019-09-27T13:01:41.941Z
            institution:
              name: erebor_mx_retail
              type: bank
            number: "4057068115181"
            balance:
              current: 5874.13
              available: 5621.12
            credit_data:
              no_interest_payment: 2690.83
              end_date: end_date
              credit_limit: 192000
              minimum_payment: 2400.3
              last_payment_date: last_payment_date
              interest_rate: 4
              cutting_date: 2019-12-11
              collected_at: 2019-09-27T13:01:41.941Z
              next_payment_date: 2019-12-13
              monthly_payment: 0.8008281904610115
            receivables_data:
              current: 2193.83
              available: 800.37
              anticipated: 1393.46
              collected_at: 2022-02-09T08:45:50.406032Z
            name: Cuenta Perfiles- M.N. - MXN-666
            gig_payment_data:
              number: "123184016786312246"
              method: BANK_ACCOUNT
              issuer: AZTECA - BANCO AZTECA SA
              holder_name: Elisa Rojas Rivas
              collected_at: 2019-09-27T13:01:41.941Z
            balance_type: ASSET
            currency: MXN
            funds_data:
            - balance: "88427.94"
              percentage: "100"
              name: FIX X
              type: CNPJ
              public_identifications:
              - name: CNPJ
                value: 05.954.445/0221-68
              - name: CNPJ
                value: 05.954.445/0221-68
            - balance: "88427.94"
              percentage: "100"
              name: FIX X
              type: CNPJ
              public_identifications:
              - name: CNPJ
                value: 05.954.445/0221-68
              - name: CNPJ
                value: 05.954.445/0221-68
            id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
            last_accessed_at: 2021-03-09T10:28:40Z
            category: CHECKING_ACCOUNT
            public_identification_name: CLABE
            bank_product_id: bank_product_id
          value_date: 2019-10-23T00:00:00.000+00:00
          collected_at: 2000-01-23T04:56:07.000+00:00
      properties:
        count:
          description: The total number of results in your Belvo account.
          example: 130
          format: int32
          type: integer
        next:
          description: |
            The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

            In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
          example: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
          nullable: true
          type: string
        previous:
          description: "The URL to the previous page of results. If there is no previous\
            \ page, the value is `null`."
          nullable: true
          type: string
          example: null
        results:
          description: Array of balance objects.
          items:
            $ref: '#/components/schemas/Balance'
          type: array
      type: object
    BalancesRequest:
      example:
        link: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
        date_to: 2021-02-15
        account: d4617561-1c01-4b2f-83b6-a594f7b3bc57
        save_data: true
        date_from: 2021-01-18
        token: 1234ab
      properties:
        link:
          description: The `link.id` that you want to get information for.
          example: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
          format: uuid
          type: string
        account:
          description: "If provided, only balances matching this `account.id` are\
            \ returned."
          example: d4617561-1c01-4b2f-83b6-a594f7b3bc57
          format: uuid
          nullable: true
          type: string
        date_from:
          description: |-
            Date from which you want to start receiving balances, in `YYYY-MM-DD` format.

            ⚠️ The value of `date_from` cannot be greater than `date_to`.
          example: 2021-01-18
          pattern: "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          type: string
        date_to:
          description: |-
            Date that you want to stop receiving balances, in `YYYY-MM-DD` format.

            ⚠️ The value of `date_to` cannot be greater than today's date (in other words, no future dates).
          example: 2021-02-15
          pattern: "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          type: string
        token:
          description: The OTP token generated by the bank.
          example: 1234ab
          type: string
        save_data:
          default: true
          description: |-
            Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
            When set to `false`, the data won't be persisted and we return a 200 OK response.
          type: boolean
      required:
      - date_from
      - date_to
      - link
      type: object
    institutionFilters:
      properties:
        code:
          type: string
        code__in:
          type: string
        country_code:
          type: string
        country_code__in:
          type: string
        display_name:
          type: string
        name:
          type: string
        name__in:
          type: string
        resources__allin:
          type: string
        status:
          type: string
        status__in:
          type: string
        type:
          type: string
        type__in:
          type: string
        website:
          type: string
      type: object
    InstitutionsFormFieldValues:
      properties:
        code:
          description: The code of the document.
          example: "001"
          type: string
        label:
          description: |
            The label for the field. For example:
            - Cédula de Ciudadanía
            - Cédula de Extranjería
            - Pasaporte
          example: Cédula de Ciudadanía
          type: string
        validation:
          description: The type of input validation used for the field.
          example: "^.{1,}$"
          type: string
        validation_message:
          description: The message displayed when an invalid input is provided in
            the form field.
          example: Invalid document number
          type: string
        placeholder:
          description: The placeholder text in the form field.
          example: DEF4444908M22
          type: string
      type: object
    InstitutionsFormField:
      properties:
        name:
          description: "The username, password, or username type field."
          example: username
          type: string
        type:
          description: "The input type for the form field. For example, string."
          example: text
          type: string
        label:
          description: |
            The label of the form field. For example:
            - Client number
            - Key Bancanet
            - Document
          example: Client number
          type: string
        validation:
          description: The type of input validation used for the field.
          example: "^.{1,}$"
          type: string
        placeholder:
          description: The placeholder text in the form field.
          example: ABC333333A33
          type: string
        validation_message:
          description: The message displayed when an invalid input is provided in
            the form field.
          example: Invalid client number
          type: string
        values:
          description: "If the form field is for documents, the institution may require\
            \ additional input regarding the document type."
          items:
            $ref: '#/components/schemas/InstitutionsFormFieldValues'
          type: array
      type: object
    InstitutionsFeature:
      example:
        name: token_required
        description: The institution may require a token during link creation or login
      properties:
        name:
          description: The name of the feature.
          example: token_required
          type: string
        description:
          description: The description of the feature.
          example: The institution may require a token during link creation or login
          type: string
      type: object
    Institution:
      example:
        website: https://www.erebor.com/
        resources:
        - ACCOUNTS
        - BALANCES
        - INCOMES
        - OWNERS
        - RECURRING_EXPENSES
        - RISK_INSIGHTS
        - TRANSACTIONS
        type: bank
        display_name: Erebor Mexico
        primary_color: '#056dae'
        integration_type: credentials
        icon_logo: https://statics.belvo.io/widget/images/institutions/erebor.svg
        features:
        - name: token_required
          description: The institution may require a token during link creation or
            login
        - name: token_required
          description: The institution may require a token during link creation or
            login
        form_fields: null
        name: erebor_mx_retail
        country_codes:
        - MX
        - MX
        logo: https://belvo-api-media.s3.amazonaws.com/logos/erebor_logo.png
        text_logo: https://statics.belvo.io/widget/images/institutions/erebor.svg
        id: 1003
        status: healthy
      properties:
        id:
          description: The ID of the institution as designated by Belvo.
          example: 1003
          format: int32
          type: integer
        name:
          description: |-
            The name of the institution, as designated by Belvo.
            Please see our [Institutions](https://developers.belvo.com/docs/institution) DevPortal article for a detailed list of institution names.
          example: erebor_mx_retail
          type: string
        type:
          description: |
            The type of institution.

            Can be either:

              - `bank`
              - `fiscal`
              - `gig`
          enum:
          - bank
          - fiscal
          - gig
          example: bank
          type: string
        website:
          description: The URL of the institution's website.
          example: https://www.erebor.com/
          nullable: true
          type: string
        display_name:
          description: The customer-facing name of the institution.
          example: Erebor Mexico
          type: string
        country_codes:
          description: "The country codes where the institution is available, for\
            \ example:\n- \U0001f1e7\U0001f1f7 BR (Brazil)\n- \U0001f1e8\U0001f1f4\
            \ CO (Colombia)\n- \U0001f1f2\U0001f1fd MX (Mexico)  \n"
          items:
            example: MX
            type: string
          type: array
        primary_color:
          description: The primary color on the institution's website.
          example: '#056dae'
          type: string
        logo:
          description: The URL of the institution's logo.
          example: https://belvo-api-media.s3.amazonaws.com/logos/erebor_logo.png
          nullable: true
          type: string
        icon_logo:
          description: The URL of the institution's icon logo.
          example: https://statics.belvo.io/widget/images/institutions/erebor.svg
          nullable: true
          type: string
        text_logo:
          description: The URL of the institution's text logo.
          example: https://statics.belvo.io/widget/images/institutions/erebor.svg
          nullable: true
          type: string
        form_fields:
          $ref: '#/components/schemas/Institution_form_fields'
        features:
          description: |
            The features that the institution supports. If the institution has no special features, then Belvo returns an empty array.

            Here is a list of the available features:
            - `token_required` indicates that the institution may require a token during link creation or when making any other requests.
          items:
            $ref: '#/components/schemas/InstitutionsFeature'
          type: array
        resources:
          description: |
            A list of Belvo resources that you can use with the institution. This list includes one or more of the following resources:

              - `ACCOUNTS`
              - `BALANCES`
              - `INCOMES`
              - `INVESTMENTS_PORTFOLIOS`
              - `INVESTMENTS_TRANSACTIONS`
              - `INVOICES`
              - `OWNERS`
              - `RECURRING_EXPENSES`
              - `RISK_INSIGHTS`
              - `TRANSACTIONS`
              - `TAX_COMPLIANCE_STATUS`
              - `TAX_STATUS`
              - `TAX_RETURNS`
          example:
          - ACCOUNTS
          - BALANCES
          - INCOMES
          - OWNERS
          - RECURRING_EXPENSES
          - RISK_INSIGHTS
          - TRANSACTIONS
          items:
            description: A Belvo resource that the institution supports.
            example: ACCOUNTS
            type: string
          type: array
        integration_type:
          description: |
            The type of technology used to access the institution.

            - `credentials`: Uses Belvo's scraping technology, combined with user credentials, to perform requests.
            - `openbanking`: Uses the bank's openbanking API to perform requests.
          enum:
          - credentials
          - openbanking
          example: credentials
          type: string
        status:
          description: |
            Indicates whether Belvo's integration with the institution is currently active (`healthy`) or undergoing maintenance (`down`).
          enum:
          - healthy
          - down
          example: healthy
          type: string
      type: object
    InstitutionsPaginatedResponse:
      example:
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: previous
        count: 130
        results:
        - website: https://www.erebor.com/
          resources:
          - ACCOUNTS
          - BALANCES
          - INCOMES
          - OWNERS
          - RECURRING_EXPENSES
          - RISK_INSIGHTS
          - TRANSACTIONS
          type: bank
          display_name: Erebor Mexico
          primary_color: '#056dae'
          integration_type: credentials
          icon_logo: https://statics.belvo.io/widget/images/institutions/erebor.svg
          features:
          - name: token_required
            description: The institution may require a token during link creation
              or login
          - name: token_required
            description: The institution may require a token during link creation
              or login
          form_fields: null
          name: erebor_mx_retail
          country_codes:
          - MX
          - MX
          logo: https://belvo-api-media.s3.amazonaws.com/logos/erebor_logo.png
          text_logo: https://statics.belvo.io/widget/images/institutions/erebor.svg
          id: 1003
          status: healthy
        - website: https://www.erebor.com/
          resources:
          - ACCOUNTS
          - BALANCES
          - INCOMES
          - OWNERS
          - RECURRING_EXPENSES
          - RISK_INSIGHTS
          - TRANSACTIONS
          type: bank
          display_name: Erebor Mexico
          primary_color: '#056dae'
          integration_type: credentials
          icon_logo: https://statics.belvo.io/widget/images/institutions/erebor.svg
          features:
          - name: token_required
            description: The institution may require a token during link creation
              or login
          - name: token_required
            description: The institution may require a token during link creation
              or login
          form_fields: null
          name: erebor_mx_retail
          country_codes:
          - MX
          - MX
          logo: https://belvo-api-media.s3.amazonaws.com/logos/erebor_logo.png
          text_logo: https://statics.belvo.io/widget/images/institutions/erebor.svg
          id: 1003
          status: healthy
      properties:
        count:
          description: The total number of results in your Belvo account.
          example: 130
          format: int32
          type: integer
        next:
          description: |
            The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

            In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
          example: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
          nullable: true
          type: string
        previous:
          description: "The URL to the previous page of results. If there is no previous\
            \ page, the value is `null`."
          nullable: true
          type: string
          example: null
        results:
          description: Array of institution objects.
          items:
            $ref: '#/components/schemas/Institution'
          type: array
      type: object
    ownerFilters:
      additionalProperties: false
      properties:
        created_at__gt:
          type: string
        created_at__lt:
          type: string
        created_at__gte:
          type: string
        created_at__lte:
          type: string
        created_at__range:
          type: string
        email:
          type: string
        id:
          type: string
        id__in:
          type: string
        link:
          type: string
        link__in:
          type: string
      type: object
    OwnerDocumentId:
      description: Information regarding the identification document the owner provided
        to the bank.
      example:
        document_number: 235578435-S
        document_type: CPF
      nullable: true
      properties:
        document_type:
          description: "The type of document the owner provided to the institution\
            \ to open the account. For example: \n\n- \U0001f1e7\U0001f1f7 `CPF` or\
            \ `CNPJ`\n- \U0001f1e8\U0001f1f4 `Cedula de Ciudadania`\n- \U0001f1f2\U0001f1fd\
            \ `CURP`\n"
          example: CPF
          nullable: true
          type: string
        document_number:
          description: The document's identification number.
          example: 235578435-S
          nullable: true
          type: string
      required:
      - document_number
      - document_type
      type: object
    OwnersGigData:
      description: |
        Additional information from the gig institution regarding the owner.

        > **Note**: This field is only valid for gig institutions.
      example:
        acceptance_rate: 97
        collected_at: 2019-09-27T13:01:41.941Z
        status: INACTIVE
      nullable: true
      properties:
        collected_at:
          description: The ISO timestamp when the data point was collected.
          example: 2019-09-27T13:01:41.941Z
          format: date-time
          type: string
        status:
          description: "The current status of the gig account's owner, according to\
            \ the institution."
          example: INACTIVE
          nullable: true
          type: string
        acceptance_rate:
          description: The percentage rate of how often the owner accepts a delivery
            or trip request.
          example: 97
          format: float
          nullable: true
          type: number
      type: object
    Owner:
      example:
        address: "Carrer de la Llacuna, 162, 08018 Barcelona"
        internal_identification: 7e5838e4
        link: 30cb4806-6e00-48a4-91c9-ca55968576c8
        created_at: 2022-02-09T08:45:50.406032Z
        last_name: last_name
        display_name: John Doe
        document_id:
          document_number: 235578435-S
          document_type: CPF
        collected_at: 2019-09-27T13:01:41.941Z
        gig_data:
          acceptance_rate: 97
          collected_at: 2019-09-27T13:01:41.941Z
          status: INACTIVE
        phone_number: +52-XXX-XXX-XXXX
        id: c749315b-eec2-435d-a458-06912878564f
        first_name: first_name
        email: johndoe@belvo.com
        second_last_name: second_last_name
      properties:
        id:
          description: Belvo's unique identifier used to reference the current owner.
          example: c749315b-eec2-435d-a458-06912878564f
          format: uuid
          type: string
        link:
          description: Belvo's unique ID used to reference the current Link.
          example: 30cb4806-6e00-48a4-91c9-ca55968576c8
          format: uuid
          type: string
        internal_identification:
          description: The institution's internal identifier for the owner.
          example: 7e5838e4
          nullable: true
          type: string
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          example: 2019-09-27T13:01:41.941Z
          format: date-time
          nullable: true
          type: string
        created_at:
          description: The ISO-8601 timestamp of when the data point was last updated
            in Belvo's database.
          example: 2022-02-09T08:45:50.406032Z
          format: date-time
          type: string
        display_name:
          description: "The full name of the owner, as provided by the bank."
          example: John Doe
          maxLength: 128
          nullable: true
          type: string
        email:
          description: The account owner's registered email address.
          example: johndoe@belvo.com
          format: email
          maxLength: 256
          nullable: true
          type: string
        phone_number:
          description: The account owner's registered phone number.
          example: +52-XXX-XXX-XXXX
          nullable: true
          type: string
        address:
          description: The accounts owners registered address.
          example: "Carrer de la Llacuna, 162, 08018 Barcelona"
          nullable: true
          type: string
        document_id:
          $ref: '#/components/schemas/OwnerDocumentId'
        gig_data:
          $ref: '#/components/schemas/OwnersGigData'
        first_name:
          deprecated: true
          description: |
            *This field has been deprecated.*

            *The first name of the account owner.*
          nullable: true
          type: string
          example: null
        last_name:
          deprecated: true
          description: |
            *This field has been deprecated.*

            *The last name of the account owner.*
          nullable: true
          type: string
          example: null
        second_last_name:
          deprecated: true
          description: |
            *This field has been deprecated.*

            *The second last name of the account owner.*
          nullable: true
          type: string
          example: null
      required:
      - address
      - collected_at
      - display_name
      - email
      - internal_identification
      - phone_number
      type: object
    OwnersPaginatedResponse:
      example:
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: previous
        count: 130
        results:
        - address: "Carrer de la Llacuna, 162, 08018 Barcelona"
          internal_identification: 7e5838e4
          link: 30cb4806-6e00-48a4-91c9-ca55968576c8
          created_at: 2022-02-09T08:45:50.406032Z
          last_name: last_name
          display_name: John Doe
          document_id:
            document_number: 235578435-S
            document_type: CPF
          collected_at: 2019-09-27T13:01:41.941Z
          gig_data:
            acceptance_rate: 97
            collected_at: 2019-09-27T13:01:41.941Z
            status: INACTIVE
          phone_number: +52-XXX-XXX-XXXX
          id: c749315b-eec2-435d-a458-06912878564f
          first_name: first_name
          email: johndoe@belvo.com
          second_last_name: second_last_name
        - address: "Carrer de la Llacuna, 162, 08018 Barcelona"
          internal_identification: 7e5838e4
          link: 30cb4806-6e00-48a4-91c9-ca55968576c8
          created_at: 2022-02-09T08:45:50.406032Z
          last_name: last_name
          display_name: John Doe
          document_id:
            document_number: 235578435-S
            document_type: CPF
          collected_at: 2019-09-27T13:01:41.941Z
          gig_data:
            acceptance_rate: 97
            collected_at: 2019-09-27T13:01:41.941Z
            status: INACTIVE
          phone_number: +52-XXX-XXX-XXXX
          id: c749315b-eec2-435d-a458-06912878564f
          first_name: first_name
          email: johndoe@belvo.com
          second_last_name: second_last_name
      properties:
        count:
          description: The total number of results in your Belvo account.
          example: 130
          format: int32
          type: integer
        next:
          description: |
            The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

            In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
          example: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
          nullable: true
          type: string
        previous:
          description: "The URL to the previous page of results. If there is no previous\
            \ page, the value is `null`."
          nullable: true
          type: string
          example: null
        results:
          description: Array of owner objects.
          items:
            $ref: '#/components/schemas/Owner'
          type: array
      type: object
    invoiceFilters:
      additionalProperties: false
      properties:
        created_at:
          type: string
        created_at__lt:
          type: string
        created_at__lte:
          type: string
        created_at__gt:
          type: string
        created_at__gte:
          type: string
        created_at__range:
          type: string
        id:
          type: string
        id__in:
          type: string
        invoice_date:
          type: string
        invoice_date__lt:
          type: string
        invoice_date__lte:
          type: string
        invoice_date__gt:
          type: string
        invoice_date__gte:
          type: string
        invoice_date__range:
          type: string
        invoice_identification:
          type: string
        invoice_identification__lt:
          type: string
        invoice_identification__lte:
          type: string
        invoice_identification__gt:
          type: string
        invoice_identification__gte:
          type: string
        invoice_identification__range:
          type: string
        link__in:
          type: string
        status:
          type: string
        status__in:
          type: string
        total_amount:
          type: string
        total_amount__lt:
          type: string
        total_amount__lte:
          type: string
        total_amount__gt:
          type: string
        total_amount__gte:
          type: string
        total_amount__range:
          type: string
        type:
          type: string
        type__in:
          type: string
      type: object
    InvoiceDetailRetainedTax:
      example:
        retained_tax_amount: 209.79
        tax_percentage: 10
        tax: ISR
        collected_at: 2019-09-27T13:01:41.941Z
      properties:
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          example: 2019-09-27T13:01:41.941Z
          format: date-time
          nullable: true
          type: string
        tax:
          description: "The type of retained tax (for example, ISR, IVA or IEPS)."
          example: ISR
          nullable: true
          type: string
        tax_percentage:
          description: The percentage of tax retained.
          example: 10
          format: float
          nullable: true
          type: number
        retained_tax_amount:
          description: The amount of retained tax.
          example: 209.79
          format: float
          nullable: true
          type: number
      required:
      - retained_tax_amount
      - tax
      - tax_percentage
      type: object
    InvoiceDetail:
      example:
        tax_amount: 64
        quantity: 10
        total_amount: 464
        product_identification: "84101600"
        tax_percentage: 16
        description: December 2019 accounting fees
        unit_code: E48
        pre_tax_amount: 400
        unit_description: Unidad de servicio
        unit_amount: 200
        retained_taxes:
        - retained_tax_amount: 209.79
          tax_percentage: 10
          tax: ISR
          collected_at: 2019-09-27T13:01:41.941Z
        - retained_tax_amount: 209.79
          tax_percentage: 10
          tax: ISR
          collected_at: 2019-09-27T13:01:41.941Z
        collected_at: 2019-09-27T13:01:41.941Z
      properties:
        description:
          description: The description of the invoice item (an invoice can have one
            or more items).
          example: December 2019 accounting fees
          nullable: true
          type: string
        product_identification:
          description: |
            The identification code of the product or the service, as defined by the legal entity in the country.
            - 🇲🇽 [Mexico](http://200.57.3.89/Pys/catPyS.aspx)
          example: "84101600"
          nullable: true
          type: string
        quantity:
          description: The quantity of this invoice item.
          example: 10
          format: int32
          nullable: true
          type: integer
        unit_code:
          description: "The unit of measure, as defined by the legal entity in the\
            \ country. \n- \U0001f1f2\U0001f1fd Mexico [SAT catalog reference](https://developers.belvo.com/docs/sat-catalogs#unit-code)\n"
          example: E48
          nullable: true
          type: string
        unit_description:
          description: |
            The description of the item, as defined by the legal entity in the country.
            - 🇲🇽 Mexico [SAT catalog reference](https://developers.belvo.com/docs/sat-catalogs#unit-code)
          example: Unidad de servicio
          nullable: true
          type: string
        unit_amount:
          description: The price of one a singular item.
          example: 200
          format: float
          nullable: true
          type: number
        pre_tax_amount:
          description: The total price for this item before tax is applied (`quantity`
            x `unit_amount`).
          example: 400
          format: float
          nullable: true
          type: number
        tax_percentage:
          description: The tax percentage to apply.
          example: 16
          format: float
          nullable: true
          type: number
        tax_amount:
          description: The amount of tax for this invoice item (`pre_tax_amount` x
            `tax_percentage`).
          example: 64
          format: float
          nullable: true
          type: number
        total_amount:
          description: The total price for this invoice item (`pre_tax_amount` + `tax_amount`).
          example: 464
          format: float
          nullable: true
          type: number
        retained_taxes:
          description: The retained tax on the invoice item.
          items:
            $ref: '#/components/schemas/InvoiceDetailRetainedTax'
          type: array
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          example: 2019-09-27T13:01:41.941Z
          format: date-time
          nullable: true
          type: string
      required:
      - description
      - pre_tax_amount
      - product_identification
      - quantity
      - tax_amount
      - tax_percentage
      - total_amount
      - unit_amount
      - unit_code
      - unit_description
      type: object
    InvoicesPaymentsRelatedDocuments:
      description: List of all the related deferred invoices affected by the payment.
      example:
        amount_paid: 8000
        partiality_number: 1
        outstanding_balance: 10877.84
        invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
        currency: MXN
        previous_balance: 18877.84
        payment_method: PPD
      properties:
        invoice_identification:
          description: The fiscal institution's unique ID for the related deferred
            invoice.
          example: 7EE015F3-6311-11EA-B02A-00155D014007
          nullable: true
          type: string
        currency:
          description: |-
            The currency of the related invoice. For example:
            - 🇧🇷 BRL (Brazilian Real)
            - 🇨🇴 COP (Colombian Peso)
            - 🇲🇽 MXN (Mexican Peso)

             Please note that other currencies other than in the list above may be returned.
          example: MXN
          nullable: true
          type: string
        payment_method:
          description: The payment method of the related invoice.
          example: PPD
          nullable: true
          type: string
        partiality_number:
          description: The payment installment number.
          example: 1
          format: int32
          type: integer
        previous_balance:
          description: The invoice amount before the payment.
          example: 18877.84
          format: float
          nullable: true
          type: number
        amount_paid:
          description: The amount paid in this installment.
          example: 8000
          format: float
          nullable: true
          type: number
        outstanding_balance:
          description: The amount remaining to be paid.
          example: 10877.84
          format: float
          nullable: true
          type: number
      required:
      - amount_paid
      - currency
      - invoice_identification
      - outstanding_balance
      - payment_method
      - previous_balance
      type: object
    InvoicesPayments:
      example:
        date: 2020-03-17T12:00:00Z
        related_documents:
        - amount_paid: 8000
          partiality_number: 1
          outstanding_balance: 10877.84
          invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
          currency: MXN
          previous_balance: 18877.84
          payment_method: PPD
        - amount_paid: 8000
          partiality_number: 1
          outstanding_balance: 10877.84
          invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
          currency: MXN
          previous_balance: 18877.84
          payment_method: PPD
        payment_type: "03"
        amount: 8000.5
        exchange_rate: "3.75"
        payer_rfc: BKJM840515VB1
        payer_account_number: "13343663245699"
        currency: BRL
        beneficiary_rfc: BNM840515VB1
        beneficiary_account_number: "12343453245633"
        operation_number: "831840"
        payer_bank_name: CITI BANAMEX
      properties:
        date:
          description: ISO-8601 timestamp when the payment was made.
          example: 2020-03-17T12:00:00Z
          format: date-time
          nullable: true
          type: string
        payment_type:
          description: |
            Payment type code used for this invoice, as defined by the country's legal entity.
            - 🇲🇽 Mexico [SAT catalog reference article](https://developers.belvo.com/docs/sat-catalogs#payment-type)
          example: "03"
          nullable: true
          type: string
        currency:
          description: |-
            The currency of the payment. For example:
            - 🇧🇷 BRL (Brazilian Real)
            - 🇨🇴 COP (Colombian Peso)
            - 🇲🇽 MXN (Mexican Peso)

             Please note that other currencies other than in the list above may be returned.
          example: BRL
          nullable: true
          type: string
        exchange_rate:
          description: The `currency` to MXN currency exchange rate when the payment
            was made.
          example: "3.75"
          nullable: true
          type: string
        amount:
          description: "The invoice amount, in the currency of the original invoice."
          example: 8000.5
          format: float
          nullable: true
          type: number
        operation_number:
          description: The fiscal institution's internal identifier for the operation.
          example: "831840"
          nullable: true
          type: string
        beneficiary_rfc:
          description: The fiscal ID of the payment beneficiary.
          example: BNM840515VB1
          nullable: true
          type: string
        beneficiary_account_number:
          description: The bank account number of the payment beneficiary.
          example: "12343453245633"
          nullable: true
          type: string
        payer_rfc:
          description: The fiscal ID of the payment issuer.
          example: BKJM840515VB1
          nullable: true
          type: string
        payer_account_number:
          description: The bank account number of the payment issuer.
          example: "13343663245699"
          nullable: true
          type: string
        payer_bank_name:
          description: The banking institution that was used by the payment issuer.
          example: CITI BANAMEX
          nullable: true
          type: string
        related_documents:
          description: A list of all the related deferred invoices affected by the
            payment.
          items:
            $ref: '#/components/schemas/InvoicesPaymentsRelatedDocuments'
          type: array
      required:
      - amount
      - beneficiary_account_number
      - currency
      - date
      - exchange_rate
      - operation_number
      - payer_account_number
      - payer_bank_name
      - payer_rfc
      - payment_type
      - related_documents
      type: object
    InvoicesPayroll:
      description: Details regarding the payroll payment. Only applicable for payroll
        invoices.
      example:
        amount: 20400.1
        days: 30
        date_to: 2018-07-31T00:00:00.000+00:00
        type: O
        version: "1.2"
        payment_date: 2000-01-23
        date_from: 2018-07-01T00:00:00.000+00:00
        collected_at: 2019-09-27T13:01:41.941Z
      nullable: true
      properties:
        days:
          description: The number of days covered by the payment.
          example: 30
          format: int32
          nullable: true
          type: integer
        type:
          description: |
            The payroll type, as defined by the legal entity of the country.
            - 🇲🇽 Mexico [SAT catalog reference article](https://developers.belvo.com/docs/sat-catalogs#payroll-type)
          example: O
          nullable: true
          type: string
        amount:
          description: The total amount of the payroll payment.
          example: 20400.1
          format: float
          type: number
        version:
          description: The version of the payroll object.
          example: "1.2"
          type: string
        date_from:
          description: The start date of the payment period.
          example: 2018-07-01
          format: date
          nullable: true
          type: string
        date_to:
          description: The end date of the payment period.
          example: 2018-07-31
          format: date
          nullable: true
          type: string
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          example: 2019-09-27T13:01:41.941Z
          format: date-time
          nullable: true
          type: string
        payment_date:
          description: The payment date.
          format: date
          type: string
      required:
      - amount
      - date_from
      - date_to
      - days
      - payment_date
      - type
      - version
      type: object
    InvoiceWarnings:
      description: Object containing information about any warnings related to this
        invoice.
      example:
        code: sat_xml_limit_reached
        message: The daily limit for XML downloads set by SAT was reached so this
          invoice might be missing data. Please check https://tinyurl.com/yydzhy5d
          for more information on this error.
      nullable: true
      properties:
        code:
          description: The warning code.
          example: sat_xml_limit_reached
          nullable: true
          type: string
        message:
          description: The description of the warning.
          example: The daily limit for XML downloads set by SAT was reached so this
            invoice might be missing data. Please check https://tinyurl.com/yydzhy5d
            for more information on this error.
          nullable: true
          type: string
      required:
      - code
      - message
      type: object
    InvoiceWithId:
      example:
        tax_amount: 64
        receiver_id: BBB222222BB22
        discount_amount: 10
        usage: P01
        payments:
        - date: 2020-03-17T12:00:00Z
          related_documents:
          - amount_paid: 8000
            partiality_number: 1
            outstanding_balance: 10877.84
            invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
            currency: MXN
            previous_balance: 18877.84
            payment_method: PPD
          - amount_paid: 8000
            partiality_number: 1
            outstanding_balance: 10877.84
            invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
            currency: MXN
            previous_balance: 18877.84
            payment_method: PPD
          payment_type: "03"
          amount: 8000.5
          exchange_rate: "3.75"
          payer_rfc: BKJM840515VB1
          payer_account_number: "13343663245699"
          currency: BRL
          beneficiary_rfc: BNM840515VB1
          beneficiary_account_number: "12343453245633"
          operation_number: "831840"
          payer_bank_name: CITI BANAMEX
        - date: 2020-03-17T12:00:00Z
          related_documents:
          - amount_paid: 8000
            partiality_number: 1
            outstanding_balance: 10877.84
            invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
            currency: MXN
            previous_balance: 18877.84
            payment_method: PPD
          - amount_paid: 8000
            partiality_number: 1
            outstanding_balance: 10877.84
            invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
            currency: MXN
            previous_balance: 18877.84
            payment_method: PPD
          payment_type: "03"
          amount: 8000.5
          exchange_rate: "3.75"
          payer_rfc: BKJM840515VB1
          payer_account_number: "13343663245699"
          currency: BRL
          beneficiary_rfc: BNM840515VB1
          beneficiary_account_number: "12343453245633"
          operation_number: "831840"
          payer_bank_name: CITI BANAMEX
        link: 30cb4806-6e00-48a4-91c9-ca55968576c8
        created_at: 2022-02-09T08:45:50.406032Z
        invoice_identification: A1A1A1A1-2B2B-3C33-D44D-555555E55EE
        sender_name: ACME CORP
        type: OUTFLOW
        receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
        sender_id: AAA111111AA11
        invoice_date: 2019-12-01T00:00:00.000+00:00
        place_of_issue: "01165"
        xml: xml
        payment_method_description: payment_method_description
        receiver_name: BELVO CORP
        invoice_type: Ingreso
        currency: MXN
        id: c749315b-eec2-435d-a458-06912878564f
        payment_method: PUE
        invoice_details:
        - tax_amount: 64
          quantity: 10
          total_amount: 464
          product_identification: "84101600"
          tax_percentage: 16
          description: December 2019 accounting fees
          unit_code: E48
          pre_tax_amount: 400
          unit_description: Unidad de servicio
          unit_amount: 200
          retained_taxes:
          - retained_tax_amount: 209.79
            tax_percentage: 10
            tax: ISR
            collected_at: 2019-09-27T13:01:41.941Z
          - retained_tax_amount: 209.79
            tax_percentage: 10
            tax: ISR
            collected_at: 2019-09-27T13:01:41.941Z
          collected_at: 2019-09-27T13:01:41.941Z
        - tax_amount: 64
          quantity: 10
          total_amount: 464
          product_identification: "84101600"
          tax_percentage: 16
          description: December 2019 accounting fees
          unit_code: E48
          pre_tax_amount: 400
          unit_description: Unidad de servicio
          unit_amount: 200
          retained_taxes:
          - retained_tax_amount: 209.79
            tax_percentage: 10
            tax: ISR
            collected_at: 2019-09-27T13:01:41.941Z
          - retained_tax_amount: 209.79
            tax_percentage: 10
            tax: ISR
            collected_at: 2019-09-27T13:01:41.941Z
          collected_at: 2019-09-27T13:01:41.941Z
        exchange_rate: 0.052
        certification_authority: CCC333333CC33
        cancelation_status: cancelation_status
        warnings:
          code: sat_xml_limit_reached
          message: The daily limit for XML downloads set by SAT was reached so this
            invoice might be missing data. Please check https://tinyurl.com/yydzhy5d
            for more information on this error.
        version: "3.3"
        subtotal_amount: 400
        collected_at: 2019-09-27T13:01:41.941Z
        cancelation_update_date: 2019-12-02T00:00:00.000+00:00
        sender_blacklist_status: sender_blacklist_status
        payment_type: "99"
        total_amount: 454
        sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
        folio: "26"
        payroll:
          amount: 20400.1
          days: 30
          date_to: 2018-07-31T00:00:00.000+00:00
          type: O
          version: "1.2"
          payment_date: 2000-01-23
          date_from: 2018-07-01T00:00:00.000+00:00
          collected_at: 2019-09-27T13:01:41.941Z
        payment_type_description: payment_type_description
        certification_date: 2019-12-01T00:00:00.000+00:00
        receiver_blacklist_status: receiver_blacklist_status
        status: Vigente
      properties:
        id:
          description: Belvo's unique identifier used to reference the current invoice.
          example: c749315b-eec2-435d-a458-06912878564f
          format: uuid
          type: string
        link:
          description: The `link.id` the invoice belongs to.
          example: 30cb4806-6e00-48a4-91c9-ca55968576c8
          type: string
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          example: 2019-09-27T13:01:41.941Z
          format: date-time
          nullable: true
          type: string
        created_at:
          description: The ISO-8601 timestamp of when the data point was last updated
            in Belvo's database.
          example: 2022-02-09T08:45:50.406032Z
          format: date-time
          type: string
        invoice_identification:
          description: The fiscal institution's unique ID for the invoice.
          example: A1A1A1A1-2B2B-3C33-D44D-555555E55EE
          nullable: true
          type: string
        invoice_date:
          description: The date of the invoice.
          example: 2019-12-01
          format: date
          nullable: true
          type: string
        status:
          description: The status of the invoice. Can be either *Vigente* (valid)
            or *Cancelado* (cancelled).
          example: Vigente
          nullable: true
          type: string
        invoice_type:
          description: |
            The fiscal institution's classification of the invoice.

            For Mexico's SAT, we return one of the following enum values:

              - `Egreso`
              - `Ingreso`
              - `Nómina`
              - `Pago`
              - `Traslado`
          enum:
          - Egreso
          - Ingreso
          - Nómina
          - Pago
          - Traslado
          example: Ingreso
          nullable: true
          type: string
        type:
          description: |
            The type of the invoice (from the perspective of the invoice sender). Can be either `INFLOW` or `OUTFLOW`.
          enum:
          - OUTFLOW
          - INFLOW
          example: OUTFLOW
          nullable: true
          type: string
        sender_id:
          description: The fiscal ID of the invoice sender
          example: AAA111111AA11
          nullable: true
          type: string
        sender_name:
          description: The name of the invoice sender.
          example: ACME CORP
          nullable: true
          type: string
        sender_tax_fraud_status:
          description: |-
            Indicates whether or not the sender is on SAT's tax fraud list for having submitted incorrect data, having outstanding payments, or having conducted business that is in violation of the fiscal institution's regulations.<br><br>
            SAT updates the tax fraud list every three months. <br><br>
            For more information regarding the reason's a taxpayer can be put on the tax fraud list, please see [Article 69](http://omawww.sat.gob.mx/cifras_sat/Paginas/datos/vinculo.html?page=ListCompleta69.html) and [Article 69-B](http://omawww.sat.gob.mx/cifras_sat/Paginas/datos/vinculo.html?page=ListCompleta69B.html) of Mexico's Código Fiscal de la Federación. <br><br>
            Possible statuses are:
            - `INVESTIGATING` <br> The fiscal institution has identified irregularities and open an investigation regarding the taxpayer. <br> - `DISMISSED` <br> The fiscal institution has investigated the taxpayer and declared them innocent. <br> - `CONFIRMED` <br> The fiscal institution has confirmed that the taxpayer is guilty. <br> - `OVERTURNED` <br> The fiscal institution has reassessed a previously confirmed taxpayer and, based on new evidence, has taken the taxpayer off the tax fraud list. <br> - `NO_TAX_FRAUD_STATUS` <br> The receiver or sender is not found in the list (in other words, they are complying with the fiscal institution's regulations).
          example: NO_TAX_FRAUD_STATUS
          nullable: true
          type: string
        receiver_id:
          description: The fiscal ID of the invoice receiver.
          example: BBB222222BB22
          nullable: true
          type: string
        receiver_name:
          description: The name of the invoice receiver.
          example: BELVO CORP
          nullable: true
          type: string
        receiver_tax_fraud_status:
          description: |-
            Indicates whether or not the receiver is on SAT's tax fraud list for having submitted incorrect data, having outstanding payments, or having conducted business that is in violation of the fiscal institution's regulations.<br><br>
            SAT updates the tax fraud list every three months. <br><br>
            For more information regarding the reason's a taxpayer can be put on the tax fraud list, please see [Article 69](http://omawww.sat.gob.mx/cifras_sat/Paginas/datos/vinculo.html?page=ListCompleta69.html) and [Article 69-B](http://omawww.sat.gob.mx/cifras_sat/Paginas/datos/vinculo.html?page=ListCompleta69B.html) of Mexico's Código Fiscal de la Federación. <br><br>
            Possible statuses are:
            - `INVESTIGATING` <br> The fiscal institution has identified irregularities and open an investigation regarding the taxpayer. <br> - `DISMISSED` <br> The fiscal institution has investigated the taxpayer and declared them innocent. <br> - `CONFIRMED` <br> The fiscal institution has confirmed that the taxpayer is guilty. <br> - `OVERTURNED` <br> The fiscal institution has reassessed a previously confirmed taxpayer and, based on new evidence, has taken the taxpayer off the tax fraud list. <br> - `NO_TAX_FRAUD_STATUS` <br> The receiver or sender is not found in the list (in other words, they are complying with the fiscal institution's regulations).
          example: NO_TAX_FRAUD_STATUS
          nullable: true
          type: string
        cancelation_status:
          description: "If the invoice is cancelled, this field indicates the status\
            \ of the cancellation."
          nullable: true
          type: string
        cancelation_update_date:
          description: The date of the invoice cancelation.
          example: 2019-12-02
          format: date
          nullable: true
          type: string
        certification_date:
          description: The date of the fiscal certification.
          example: 2019-12-01
          format: date
          nullable: true
          type: string
        certification_authority:
          description: The fiscal ID of the certification provider.
          example: CCC333333CC33
          nullable: true
          type: string
        payment_type:
          description: |
            The payment type code used for this invoice, as defined by the country legal entity.
            - 🇲🇽 Mexico [SAT catalog reference article](https://developers.belvo.com/docs/sat-catalogs#payment-type)
          example: "99"
          nullable: true
          type: string
        payment_type_description:
          deprecated: true
          description: |
            *This field has been deprecated.*

            *The description of the payment method used for this invoice.*
          nullable: true
          type: string
          example: null
        payment_method:
          description: |
            The payment method code used for this invoice, as defined by the legal entity of the country.

            - 🇲🇽 Mexico [SAT catalog reference article](https://developers.belvo.com/docs/sat-catalogs#payment-method). For Mexico, we return `PUE`, `PIP`, OR `PPD`.
          enum:
          - PUE
          - PIP
          - PPD
          - null
          example: PUE
          nullable: true
          type: string
        payment_method_description:
          deprecated: true
          description: |
            *This field has been deprecated.*

            *The description of the payment method used for this invoice.*
          nullable: true
          type: string
          example: null
        usage:
          description: "The invoice's usage code, as defined by the legal entity of\
            \ the country. \n- \U0001f1f2\U0001f1fd Mexico [SAT catalog reference\
            \ article](https://developers.belvo.com/docs/sat-catalogs#usage)\n"
          example: P01
          nullable: true
          type: string
        version:
          description: The CFDI version of the invoice.
          example: "3.3"
          nullable: true
          type: string
        place_of_issue:
          description: The postcode of where the invoice was issued.
          example: "01165"
          nullable: true
          type: string
        invoice_details:
          description: |
            A list of descriptions for each item (purchased product or service provided) in the invoice.
          items:
            $ref: '#/components/schemas/InvoiceDetail'
          type: array
        currency:
          description: |-
            The currency of the invoice. For example:
            - 🇧🇷 BRL (Brazilian Real)
            - 🇨🇴 COP (Colombian Peso)
            - 🇲🇽 MXN (Mexican Peso)

             Please note that other currencies other than in the list above may be returned.
          example: MXN
          nullable: true
          type: string
        subtotal_amount:
          description: The pretax amount of this invoice (sum of each item's `pre_tax_amount`).
          example: 400
          format: float
          nullable: true
          type: number
        exchange_rate:
          description: The exchange rate used in this invoice for the currency.
          example: 0.052
          format: float
          nullable: true
          type: number
        tax_amount:
          description: The amount of tax for this invoice (sum of each item's `tax_amount`).
          example: 64
          format: float
          nullable: true
          type: number
        discount_amount:
          description: The total amount discounted in this invoice.
          example: 10
          format: float
          nullable: true
          type: number
        total_amount:
          description: The total amount of the invoice (`subtotal_amount` + `tax_amount`
            - `discount_amount`)
          example: 454
          format: float
          nullable: true
          type: number
        payments:
          description: A list detailing all the invoice payments.
          items:
            $ref: '#/components/schemas/InvoicesPayments'
          type: array
        payroll:
          $ref: '#/components/schemas/InvoicesPayroll'
        folio:
          description: The internal control number that the taxpayer assigns to the
            invoice.
          example: "26"
          nullable: true
          type: string
        xml:
          description: XML of the invoice document.
          nullable: true
          type: string
        warnings:
          $ref: '#/components/schemas/InvoiceWarnings'
        sender_blacklist_status:
          deprecated: true
          description: |
            This field has been deprecated. Please use `sender_tax_fraud_status` instead.
          nullable: true
          type: string
          example: null
        receiver_blacklist_status:
          deprecated: true
          description: |
            This field has been deprecated. Please use `receiver_tax_fraud_status` instead.
          nullable: true
          type: string
          example: null
      required:
      - cancelation_status
      - cancelation_update_date
      - certification_authority
      - certification_date
      - collected_at
      - currency
      - discount_amount
      - exchange_rate
      - invoice_date
      - invoice_details
      - invoice_identification
      - invoice_type
      - payment_type
      - payment_type_description
      - payments
      - payroll
      - receiver_id
      - receiver_name
      - sender_id
      - sender_name
      - status
      - subtotal_amount
      - tax_amount
      - total_amount
      - type
      type: object
    InvoicesResponsePaginatedResponse:
      example:
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: previous
        count: 130
        results:
        - tax_amount: 64
          receiver_id: BBB222222BB22
          discount_amount: 10
          usage: P01
          payments:
          - date: 2020-03-17T12:00:00Z
            related_documents:
            - amount_paid: 8000
              partiality_number: 1
              outstanding_balance: 10877.84
              invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
              currency: MXN
              previous_balance: 18877.84
              payment_method: PPD
            - amount_paid: 8000
              partiality_number: 1
              outstanding_balance: 10877.84
              invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
              currency: MXN
              previous_balance: 18877.84
              payment_method: PPD
            payment_type: "03"
            amount: 8000.5
            exchange_rate: "3.75"
            payer_rfc: BKJM840515VB1
            payer_account_number: "13343663245699"
            currency: BRL
            beneficiary_rfc: BNM840515VB1
            beneficiary_account_number: "12343453245633"
            operation_number: "831840"
            payer_bank_name: CITI BANAMEX
          - date: 2020-03-17T12:00:00Z
            related_documents:
            - amount_paid: 8000
              partiality_number: 1
              outstanding_balance: 10877.84
              invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
              currency: MXN
              previous_balance: 18877.84
              payment_method: PPD
            - amount_paid: 8000
              partiality_number: 1
              outstanding_balance: 10877.84
              invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
              currency: MXN
              previous_balance: 18877.84
              payment_method: PPD
            payment_type: "03"
            amount: 8000.5
            exchange_rate: "3.75"
            payer_rfc: BKJM840515VB1
            payer_account_number: "13343663245699"
            currency: BRL
            beneficiary_rfc: BNM840515VB1
            beneficiary_account_number: "12343453245633"
            operation_number: "831840"
            payer_bank_name: CITI BANAMEX
          link: 30cb4806-6e00-48a4-91c9-ca55968576c8
          created_at: 2022-02-09T08:45:50.406032Z
          invoice_identification: A1A1A1A1-2B2B-3C33-D44D-555555E55EE
          sender_name: ACME CORP
          type: OUTFLOW
          receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
          sender_id: AAA111111AA11
          invoice_date: 2019-12-01T00:00:00.000+00:00
          place_of_issue: "01165"
          xml: xml
          payment_method_description: payment_method_description
          receiver_name: BELVO CORP
          invoice_type: Ingreso
          currency: MXN
          id: c749315b-eec2-435d-a458-06912878564f
          payment_method: PUE
          invoice_details:
          - tax_amount: 64
            quantity: 10
            total_amount: 464
            product_identification: "84101600"
            tax_percentage: 16
            description: December 2019 accounting fees
            unit_code: E48
            pre_tax_amount: 400
            unit_description: Unidad de servicio
            unit_amount: 200
            retained_taxes:
            - retained_tax_amount: 209.79
              tax_percentage: 10
              tax: ISR
              collected_at: 2019-09-27T13:01:41.941Z
            - retained_tax_amount: 209.79
              tax_percentage: 10
              tax: ISR
              collected_at: 2019-09-27T13:01:41.941Z
            collected_at: 2019-09-27T13:01:41.941Z
          - tax_amount: 64
            quantity: 10
            total_amount: 464
            product_identification: "84101600"
            tax_percentage: 16
            description: December 2019 accounting fees
            unit_code: E48
            pre_tax_amount: 400
            unit_description: Unidad de servicio
            unit_amount: 200
            retained_taxes:
            - retained_tax_amount: 209.79
              tax_percentage: 10
              tax: ISR
              collected_at: 2019-09-27T13:01:41.941Z
            - retained_tax_amount: 209.79
              tax_percentage: 10
              tax: ISR
              collected_at: 2019-09-27T13:01:41.941Z
            collected_at: 2019-09-27T13:01:41.941Z
          exchange_rate: 0.052
          certification_authority: CCC333333CC33
          cancelation_status: cancelation_status
          warnings:
            code: sat_xml_limit_reached
            message: The daily limit for XML downloads set by SAT was reached so this
              invoice might be missing data. Please check https://tinyurl.com/yydzhy5d
              for more information on this error.
          version: "3.3"
          subtotal_amount: 400
          collected_at: 2019-09-27T13:01:41.941Z
          cancelation_update_date: 2019-12-02T00:00:00.000+00:00
          sender_blacklist_status: sender_blacklist_status
          payment_type: "99"
          total_amount: 454
          sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
          folio: "26"
          payroll:
            amount: 20400.1
            days: 30
            date_to: 2018-07-31T00:00:00.000+00:00
            type: O
            version: "1.2"
            payment_date: 2000-01-23
            date_from: 2018-07-01T00:00:00.000+00:00
            collected_at: 2019-09-27T13:01:41.941Z
          payment_type_description: payment_type_description
          certification_date: 2019-12-01T00:00:00.000+00:00
          receiver_blacklist_status: receiver_blacklist_status
          status: Vigente
        - tax_amount: 64
          receiver_id: BBB222222BB22
          discount_amount: 10
          usage: P01
          payments:
          - date: 2020-03-17T12:00:00Z
            related_documents:
            - amount_paid: 8000
              partiality_number: 1
              outstanding_balance: 10877.84
              invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
              currency: MXN
              previous_balance: 18877.84
              payment_method: PPD
            - amount_paid: 8000
              partiality_number: 1
              outstanding_balance: 10877.84
              invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
              currency: MXN
              previous_balance: 18877.84
              payment_method: PPD
            payment_type: "03"
            amount: 8000.5
            exchange_rate: "3.75"
            payer_rfc: BKJM840515VB1
            payer_account_number: "13343663245699"
            currency: BRL
            beneficiary_rfc: BNM840515VB1
            beneficiary_account_number: "12343453245633"
            operation_number: "831840"
            payer_bank_name: CITI BANAMEX
          - date: 2020-03-17T12:00:00Z
            related_documents:
            - amount_paid: 8000
              partiality_number: 1
              outstanding_balance: 10877.84
              invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
              currency: MXN
              previous_balance: 18877.84
              payment_method: PPD
            - amount_paid: 8000
              partiality_number: 1
              outstanding_balance: 10877.84
              invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
              currency: MXN
              previous_balance: 18877.84
              payment_method: PPD
            payment_type: "03"
            amount: 8000.5
            exchange_rate: "3.75"
            payer_rfc: BKJM840515VB1
            payer_account_number: "13343663245699"
            currency: BRL
            beneficiary_rfc: BNM840515VB1
            beneficiary_account_number: "12343453245633"
            operation_number: "831840"
            payer_bank_name: CITI BANAMEX
          link: 30cb4806-6e00-48a4-91c9-ca55968576c8
          created_at: 2022-02-09T08:45:50.406032Z
          invoice_identification: A1A1A1A1-2B2B-3C33-D44D-555555E55EE
          sender_name: ACME CORP
          type: OUTFLOW
          receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
          sender_id: AAA111111AA11
          invoice_date: 2019-12-01T00:00:00.000+00:00
          place_of_issue: "01165"
          xml: xml
          payment_method_description: payment_method_description
          receiver_name: BELVO CORP
          invoice_type: Ingreso
          currency: MXN
          id: c749315b-eec2-435d-a458-06912878564f
          payment_method: PUE
          invoice_details:
          - tax_amount: 64
            quantity: 10
            total_amount: 464
            product_identification: "84101600"
            tax_percentage: 16
            description: December 2019 accounting fees
            unit_code: E48
            pre_tax_amount: 400
            unit_description: Unidad de servicio
            unit_amount: 200
            retained_taxes:
            - retained_tax_amount: 209.79
              tax_percentage: 10
              tax: ISR
              collected_at: 2019-09-27T13:01:41.941Z
            - retained_tax_amount: 209.79
              tax_percentage: 10
              tax: ISR
              collected_at: 2019-09-27T13:01:41.941Z
            collected_at: 2019-09-27T13:01:41.941Z
          - tax_amount: 64
            quantity: 10
            total_amount: 464
            product_identification: "84101600"
            tax_percentage: 16
            description: December 2019 accounting fees
            unit_code: E48
            pre_tax_amount: 400
            unit_description: Unidad de servicio
            unit_amount: 200
            retained_taxes:
            - retained_tax_amount: 209.79
              tax_percentage: 10
              tax: ISR
              collected_at: 2019-09-27T13:01:41.941Z
            - retained_tax_amount: 209.79
              tax_percentage: 10
              tax: ISR
              collected_at: 2019-09-27T13:01:41.941Z
            collected_at: 2019-09-27T13:01:41.941Z
          exchange_rate: 0.052
          certification_authority: CCC333333CC33
          cancelation_status: cancelation_status
          warnings:
            code: sat_xml_limit_reached
            message: The daily limit for XML downloads set by SAT was reached so this
              invoice might be missing data. Please check https://tinyurl.com/yydzhy5d
              for more information on this error.
          version: "3.3"
          subtotal_amount: 400
          collected_at: 2019-09-27T13:01:41.941Z
          cancelation_update_date: 2019-12-02T00:00:00.000+00:00
          sender_blacklist_status: sender_blacklist_status
          payment_type: "99"
          total_amount: 454
          sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
          folio: "26"
          payroll:
            amount: 20400.1
            days: 30
            date_to: 2018-07-31T00:00:00.000+00:00
            type: O
            version: "1.2"
            payment_date: 2000-01-23
            date_from: 2018-07-01T00:00:00.000+00:00
            collected_at: 2019-09-27T13:01:41.941Z
          payment_type_description: payment_type_description
          certification_date: 2019-12-01T00:00:00.000+00:00
          receiver_blacklist_status: receiver_blacklist_status
          status: Vigente
      properties:
        count:
          description: The total number of results in your Belvo account.
          example: 130
          format: int32
          type: integer
        next:
          description: |
            The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

            In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
          example: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
          nullable: true
          type: string
        previous:
          description: "The URL to the previous page of results. If there is no previous\
            \ page, the value is `null`."
          nullable: true
          type: string
          example: null
        results:
          description: Array of invoice objects.
          items:
            $ref: '#/components/schemas/InvoiceWithId'
          type: array
      type: object
    InvoicesRequest:
      example:
        link: d4617561-1c01-4b2f-83b6-a594f7b3bc57
        date_to: 2020-02-01
        type: OUTFLOW
        attach_xml: false
        save_data: true
        date_from: 2020-01-01
      properties:
        link:
          description: The fiscal `link.id` to use.
          example: d4617561-1c01-4b2f-83b6-a594f7b3bc57
          format: uuid
          type: string
        date_from:
          description: |
            The date from which you want to start getting invoices for, in `YYYY-MM-DD` format.

            ⚠️ The value of `date_from` cannot be greater than `date_to`.
          example: 2020-01-01
          pattern: "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          type: string
        date_to:
          description: |
            The date you want to stop getting invoices for, in `YYYY-MM-DD` format.

            ⚠️ The number of days between `date_from` and `date_to` cannot be over 365.

            ⚠️ The value of `date_to` cannot be greater than today's date (in other words, no future dates).
          example: 2020-02-01
          pattern: "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          type: string
        type:
          description: |
            The direction of the invoice (from the perspective of the Link owner).

            - `OUTFLOW` indicates a sent invoice.
            - `INFLOW` indicates a received invoice.
          enum:
          - OUTFLOW
          - INFLOW
          type: string
        attach_xml:
          default: false
          description: "When set to `true`, you will receive the XML invoice in the\
            \ response."
          type: boolean
        save_data:
          default: true
          description: |-
            Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
            When set to `false`, the data won't be persisted and we return a 200 OK response.
          example: true
          type: boolean
      required:
      - date_from
      - date_to
      - link
      - type
      type: object
    taxReturnFilters:
      additionalProperties: false
      properties:
        created_at__lt:
          type: string
        created_at__lte:
          type: string
        created_at__gt:
          type: string
        created_at__gte:
          type: string
        created_at__range:
          type: string
        id:
          type: string
        id__in:
          type: string
        informacion_general__ejercicio:
          type: string
        informacion_general__ejercicio__lt:
          type: string
        informacion_general__ejercicio__lte:
          type: string
        informacion_general__ejercicio__gt:
          type: string
        informacion_general__ejercicio__gte:
          type: string
        informacion_general__ejercicio__range:
          type: string
        informacion_general__tipo_declaracion:
          type: string
        informacion_general__tipo_declaracion__in:
          type: string
        link__in:
          type: string
      type: object
    TaxReturnPersonal:
      additionalProperties: true
      properties:
        id:
          description: Unique identifier created by Belvo used to reference the current
            Tax Return.
          example: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
          format: uuid
          type: string
        link:
          description: The `link.id` the statement belongs to
          example: 30cb4806-6e00-48a4-91c9-ca55968576c8
          format: uuid
          type: string
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          example: 2019-09-27T13:01:41.941Z
          format: date-time
          nullable: true
          type: string
        created_at:
          description: The ISO-8601 timestamp of when the data point was last updated
            in Belvo's database.
          example: 2022-02-09T08:45:50.406032Z
          format: date-time
          type: string
        informacion_general:
          description: "General information on the tax return (year, RFC, return type,\
            \ person/company name, and so on)."
          nullable: true
          type: object
        sueldos_salarios:
          description: Details regarding the income information together combined
            with withheld taxes.
          nullable: true
          type: object
        servicios_profesionales:
          description: Details regarding the income and tax information from professional
            services provided.
          nullable: true
          type: object
        deducciones_personales:
          description: List of all personal tax deductions.
          nullable: true
          type: object
        determinacion_impuesto:
          description: Details regarding the final tax return.
          nullable: true
          type: object
        retenciones:
          description: Details on the already withheld taxes.
          nullable: true
          type: object
        dividendos:
          description: Details regarding dividends.
          nullable: true
          type: object
        datos_informativos:
          description: Extra informative data on the tax return.
          nullable: true
          type: object
        pdf:
          description: Tax return PDF as a binary.
          example: !!binary |-
            PVBERi1TVFJJTkc9
          format: binary
          nullable: true
          type: string
        receipt_pdf:
          description: The acknowledgement receipt from the fiscal institution confirming
            that they received the tax return.
          example: !!binary |-
            PVBERi1TVFJJTkc9
          format: binary
          nullable: true
          type: string
      required:
      - collected_at
      - deducciones_personales
      - determinacion_impuesto
      - dividendos
      - informacion_general
      - pdf
      - receipt_pdf
      - retenciones
      - servicios_profesionales
      - sueldos_salarios
      title: Tax Return Personal
      type: object
    TaxReturnsPersonalPaginated:
      additionalProperties: true
      properties:
        count:
          description: The total number of results in your Belvo account.
          example: 130
          format: int32
          type: integer
        next:
          description: |
            The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

            In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
          example: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
          nullable: true
          type: string
        previous:
          description: "The URL to the previous page of results. If there is no previous\
            \ page, the value is `null`."
          nullable: true
          type: string
          example: null
        results:
          description: Array of Personal Tax Return objects.
          items:
            $ref: '#/components/schemas/TaxReturnPersonal'
          type: array
      title: Tax Return Personal
      type: object
    TaxReturnPersonalMonthly:
      additionalProperties: true
      properties:
        id:
          description: Unique identifier created by Belvo used to reference the current
            Tax Return.
          example: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
          format: uuid
          type: string
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          example: 2022-02-09T08:45:50.406032Z
          format: date-time
          nullable: true
          type: string
        created_at:
          description: The ISO-8601 timestamp of when the data point was last updated
            in Belvo's database.
          example: 2022-02-09T08:45:50.406032Z
          format: date-time
          type: string
        informacion_general:
          description: "General information regarding the tax return (year, RFC, return\
            \ type, person/company name, and so on)."
          nullable: true
          type: object
        isr:
          description: Information used to calculate the monthly provisional payments
            of the income tax.
          nullable: true
          type: object
        iva:
          description: Information used to calculate the monthly provisional payments
            of the VAT tax.
          nullable: true
          type: object
        pdf:
          description: Tax return PDF as a binary.
          example: !!binary |-
            PVBERi1TVFJJTkc9
          format: binary
          nullable: true
          type: string
        receipt_pdf:
          description: The acknowledgement receipt from the fiscal institution confirming
            that they received the tax return.
          example: !!binary |-
            PVBERi1TVFJJTkc9
          format: binary
          nullable: true
          type: string
        type:
          description: The type of tax return. Can be either monthly or annual.
          example: monthly
          type: string
      required:
      - collected_at
      - informacion_general
      - isr
      - iva
      - pdf
      - type
      title: Tax Return Personal Monthly
      type: object
    TaxReturnsPersonalMonthlyPaginated:
      additionalProperties: true
      properties:
        count:
          description: The total number of results in your Belvo account.
          example: 130
          format: int32
          type: integer
        next:
          description: |
            The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

            In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
          example: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
          nullable: true
          type: string
        previous:
          description: "The URL to the previous page of results. If there is no previous\
            \ page, the value is `null`."
          nullable: true
          type: string
          example: null
        results:
          description: Array of Monthly Personal Tax Return objects.
          items:
            $ref: '#/components/schemas/TaxReturnPersonalMonthly'
          type: array
      title: Tax Return Personal Monthly
      type: object
    TaxReturnBusiness:
      additionalProperties: true
      properties:
        id:
          description: Unique identifier created by Belvo used to reference the current
            Tax Return.
          example: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
          format: uuid
          type: string
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          example: 2019-09-27T13:01:41.941Z
          format: date-time
          nullable: true
          type: string
        created_at:
          description: The ISO-8601 timestamp of when the data point was last updated
            in Belvo's database.
          example: 2022-02-09T08:45:50.406032Z
          format: date-time
          type: string
        informacion_general:
          description: "General information regarding the tax return (year, RFC, return\
            \ type, person/company name, and so on)."
          nullable: true
          type: object
        datos_adicionales:
          description: Additional data regarding the tax return.
          nullable: true
          type: object
        estado_resultados:
          description: Detailed information about the legal entity's yearly profit
            and loss.
          nullable: true
          type: object
        estado_posicion_financiera_balance:
          description: Details regarding balance sheet of the legal entity.
          nullable: true
          type: object
        conciliacion_entre_resultado_contable_fiscal:
          description: Details regarding the accounting reconciliation.
          nullable: true
          type: object
        deducciones_autorizadas:
          description: Details regarding the legal entity's deductions.
          nullable: true
          type: object
        cifras_cierre_ejercicio:
          description: Details regarding key numbers at the end of the fiscal exercise.
          nullable: true
          type: object
        determinacion_del_impuesto_sobre_la_renta:
          description: Details regarding the final tax return.
          nullable: true
          type: object
        dividendos_o_utilidades_distribuidos:
          description: Details regarding distributed dividends.
          nullable: true
          type: object
        detalle_pago_r1_isr_personas_morales:
          description: Details of the tax payment.
          nullable: true
          type: object
        pdf:
          description: Tax return PDF as a binary.
          example: !!binary |-
            PVBERi1TVFJJTkc9
          format: binary
          nullable: true
          type: string
        receipt_pdf:
          description: The acknowledgement receipt from the fiscal institution confirming
            that they received the tax return.
          example: !!binary |-
            PVBERi1TVFJJTkc9
          format: binary
          nullable: true
          type: string
      required:
      - cifras_cierre_ejercicio
      - collected_at
      - conciliacion_entre_resultado_contable_fiscal
      - detalle_pago_r1_isr_personas_morales
      - determinacion_del_impuesto_sobre_la_renta
      - estado_posicion_financiera_balance
      - estado_resultados
      - informacion_general
      - pdf
      - receipt_pdf
      title: Tax Return Business
      type: object
    TaxReturnsBusinessPaginated:
      additionalProperties: true
      properties:
        count:
          description: The total number of results in your Belvo account.
          example: 130
          format: int32
          type: integer
        next:
          description: |
            The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

            In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
          example: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
          nullable: true
          type: string
        previous:
          description: "The URL to the previous page of results. If there is no previous\
            \ page, the value is `null`."
          nullable: true
          type: string
          example: null
        results:
          description: Array of Business Tax Return objects.
          items:
            $ref: '#/components/schemas/TaxReturnBusiness'
          type: array
      title: Tax Return Personal Business
      type: object
    TaxReturnBusinessMonthly:
      additionalProperties: true
      properties:
        id:
          description: Unique identifier created by Belvo used to reference the current
            Tax Return.
          example: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
          format: uuid
          type: string
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          example: 2019-09-27T13:01:41.941Z
          format: date-time
          nullable: true
          type: string
        created_at:
          description: The ISO-8601 timestamp of when the data point was last updated
            in Belvo's database.
          example: 2022-02-09T08:45:50.406032Z
          format: date-time
          type: string
        informacion_general:
          description: "General information regarding the tax return (year, RFC, return\
            \ type, person/company name, and so on)."
          nullable: true
          type: object
        determinacion_isr:
          description: Information used to calculate the provisional income tax for
            the period.
          nullable: true
          type: object
        detalle_pago_isr:
          description: Information on the monthly provisional payments for the income
            tax.
          nullable: true
          type: object
        determinacion_iva:
          description: Information used to calculate the provisional VAT tax for the
            period.
          nullable: true
          type: object
        detalle_pago_iva:
          description: Information on the monthly provisional payments for the VAT
            tax.
          nullable: true
          type: object
        pdf:
          description: Tax return PDF as a binary.
          example: !!binary |-
            PVBERi1TVFJJTkc9
          format: binary
          nullable: true
          type: string
        receipt_pdf:
          description: The acknowledgement receipt from the fiscal institution confirming
            that they received the tax return.
          example: !!binary |-
            PVBERi1TVFJJTkc9
          format: binary
          nullable: true
          type: string
        type:
          description: The type of tax return. Can be either monthly or annual.
          example: monthly
          nullable: true
          type: string
      required:
      - collected_at
      - detalle_pago_isr
      - detalle_pago_iva
      - determinacion_isr
      - determinacion_iva
      - informacion_general
      - pdf
      - type
      title: Tax Return Business Monthly
      type: object
    TaxReturnsBusinessMonthlyPaginated:
      additionalProperties: true
      properties:
        count:
          description: The total number of results in your Belvo account.
          example: 130
          format: int32
          type: integer
        next:
          description: |
            The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

            In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
          example: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
          nullable: true
          type: string
        previous:
          description: "The URL to the previous page of results. If there is no previous\
            \ page, the value is `null`."
          nullable: true
          type: string
          example: null
        results:
          description: Array of Monthly Business Tax Return objects.
          items:
            $ref: '#/components/schemas/TaxReturnBusinessMonthly'
          type: array
      title: Tax Return Personal Business Monthly
      type: object
    TaxReturnsMonthlyRequest:
      description: Request body for monthly tax returns
      properties:
        link:
          description: The fiscal `link.id` you want specific tax return information
            for.
          example: d4617561-1c01-4b2f-83b6-a594f7b3bc57
          format: uuid
          type: string
        attach_pdf:
          default: false
          description: "When this is set to `true`, you will receive the PDF as a\
            \ binary string in the response."
          example: false
          type: boolean
        save_data:
          default: true
          description: |-
            Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
            When set to `false`, the data won't be persisted and we return a 200 OK response.
          example: true
          type: boolean
        type:
          default: monthly
          description: |
            The type of tax return to return. For monthly tax returns, this field must be set to `monthly`.
          type: string
        date_from:
          description: |-
            The starting date you want to get tax returns for, in `YYYY-MM-DD` format.

            ⚠️ The value of `date_from` cannot be greater than `date_to`.
          example: 2018-01-01
          type: string
        date_to:
          description: |-
            The date you want to stop getting tax returns for, in `YYYY-MM-DD` format.

            ⚠️ The value of `date_to` cannot be greater than today's date (in other words, no future dates).
          example: 2019-01-01
          type: string
      required:
      - date_from
      - date_to
      - link
      - type
      title: Monthly Tax Returns
      type: object
    TaxReturnsYearlyRequest:
      description: Request body for yearly tax returns
      properties:
        link:
          description: The fiscal `link.id` you want specific tax return information
            for.
          example: d4617561-1c01-4b2f-83b6-a594f7b3bc57
          format: uuid
          type: string
        attach_pdf:
          default: false
          description: "When this is set to `true`, you will receive the PDF as a\
            \ binary string in the response."
          example: false
          type: boolean
        save_data:
          default: true
          description: |-
            Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
            When set to `false`, the data won't be persisted and we return a 200 OK response.
          example: true
          type: boolean
        type:
          default: yearly
          description: |
            The type of tax return to return. For yearly tax returns this must be set to `yearly`.

            By default, Belvo returns the yearly (annual) tax returns.
          type: string
        year_from:
          description: |
            The starting year you want to get tax returns for, in `YYYY` format.
          example: "2018"
          type: string
        year_to:
          description: |
            The year you want to stop getting tax returns for, in `YYYY` format.
          example: "2019"
          type: string
      required:
      - link
      - type
      - year_from
      - year_to
      title: Yearly Tax Returns
      type: object
    taxStatusFilters:
      additionalProperties: false
      properties:
        created_at__gt:
          type: string
        created_at__gte:
          type: string
        created_at__lt:
          type: string
        created_at__lte:
          type: string
        created_at__range:
          type: string
        id:
          type: string
        id__in:
          type: string
        link__in:
          type: string
      type: object
    TaxStatusTaxPayerInformation:
      description: Details regarding the taxpayer.
      example:
        social_name: John Doe SA DE CV
        phone: "1234567890"
        status_padron: ACTIVO
        name: JOHN
        last_status_change_date: 2016-02-16T00:00:00.000+00:00
        commercial_name: JOHNDOE
        first_last_name: DOE
        rfc: BEMP12345G58
        curp: BEMP12345HKGLLT00
        start_operations_date: 2016-02-16T00:00:00.000+00:00
        email: john_doe@gmail.com
        second_last_name: SCHMOE
      nullable: true
      properties:
        rfc:
          description: The tax payers's RFC number.
          example: BEMP12345G58
          nullable: true
          type: string
        curp:
          description: The tax payers's Clave Única de Registro de Población (CURP)
            number.
          example: BEMP12345HKGLLT00
          nullable: true
          type: string
        name:
          description: The tax payers's first name.
          example: JOHN
          nullable: true
          type: string
        first_last_name:
          description: The tax payers's first last name.
          example: DOE
          nullable: true
          type: string
        second_last_name:
          description: The tax payers's second last name.
          example: SCHMOE
          nullable: true
          type: string
        start_operations_date:
          description: Date when the tax payer commenced taxable commercial activities.
          example: 2016-02-16
          format: date
          nullable: true
          type: string
        status_padron:
          description: Status of the taxpayer in the Federal Register of Taxpayers
            (RFC). Can be `ACTIVO` or `INACTIVO`.
          example: ACTIVO
          nullable: true
          type: string
        last_status_change_date:
          description: Date when `status_padron` was most recently updated.
          example: 2016-02-16
          format: date
          nullable: true
          type: string
        commercial_name:
          description: The name of the company designated for consumers and the general
            public.
          example: JOHNDOE
          nullable: true
          type: string
        social_name:
          description: The unique and exclusive name within the national territory
            that companies receive for legal or administrative purposes.
          example: John Doe SA DE CV
          nullable: true
          type: string
        email:
          description: Contact email address for the tax payer.
          example: john_doe@gmail.com
          nullable: true
          type: string
        phone:
          description: Contact phone number for the tax payer.
          example: "1234567890"
          nullable: true
          type: string
      required:
      - last_status_change_date
      - rfc
      - start_operations_date
      - status_padron
      type: object
    TaxStatusAddressBetweenStreet:
      example:
        street_two: CALLE NUEVA ROMA
        street_one: CALLE PRINCIPE
      properties:
        street_one:
          description: The first street that `street` is located between.
          example: CALLE PRINCIPE
          nullable: true
          type: string
        street_two:
          description: The second street that `street` is located between.
          example: CALLE NUEVA ROMA
          nullable: true
          type: string
      type: object
    TaxStatusAddress:
      description: The tax payer's address details.
      example:
        exterior_number: "432"
        street: LA MALINCHE
        locality: TLALPAN
        municipality: TLALPAN
        suburb: COLINAS DEL BOSQUE
        street_type: CALLE
        interior_number: PLANTA BAJA
        state: CIUDAD DE MEXICO
        postal_code: "12345"
        between_street:
        - street_two: CALLE NUEVA ROMA
          street_one: CALLE PRINCIPE
        - street_two: CALLE NUEVA ROMA
          street_one: CALLE PRINCIPE
      nullable: true
      properties:
        postal_code:
          description: The postcode of the address.
          example: "12345"
          nullable: true
          type: string
        street_type:
          description: The `street` type.
          example: CALLE
          nullable: true
          type: string
        street:
          description: The tax payers street.
          example: LA MALINCHE
          nullable: true
          type: string
        exterior_number:
          description: The street number.
          example: "432"
          nullable: true
          type: string
        interior_number:
          description: Additional address information.
          example: PLANTA BAJA
          nullable: true
          type: string
        suburb:
          description: The suburb of the tax payer.
          example: COLINAS DEL BOSQUE
          nullable: true
          type: string
        locality:
          description: The locality of the address.
          example: TLALPAN
          nullable: true
          type: string
        municipality:
          description: The municipality of the address.
          example: TLALPAN
          nullable: true
          type: string
        state:
          description: The state that the address is in.
          example: CIUDAD DE MEXICO
          nullable: true
          type: string
        between_street:
          description: Additional information about where the `street` is located.
          items:
            $ref: '#/components/schemas/TaxStatusAddressBetweenStreet'
          nullable: true
          type: array
      required:
      - postal_code
      type: object
    TaxStatusEconomicActivity:
      example:
        end_date: 2000-01-23
        percentage: "1"
        initial_date: 2020-12-06T00:00:00.000+00:00
        economic_activity: Asalariado
        order: "2"
      properties:
        economic_activity:
          description: The description of the economic activity.
          example: Asalariado
          nullable: true
          type: string
        end_date:
          description: The end date of the economic activity.
          format: date
          nullable: true
          type: string
          example: null
        initial_date:
          description: The start date of the economic activity.
          example: 2020-12-06
          format: date
          nullable: true
          type: string
        order:
          description: The order of the economic activity.
          example: "2"
          nullable: true
          type: string
        percentage:
          description: The percentage of the economic activity.
          example: "1"
          nullable: true
          type: string
      type: object
    TaxStatusRegimens:
      example:
        end_date: 2000-01-23
        initial_date: 2020-12-06T00:00:00.000+00:00
        regimen: Régimen de Ingresos por Dividendos (socios y accionistas)
      properties:
        end_date:
          description: The end date of the regimen.
          format: date
          nullable: true
          type: string
          example: null
        initial_date:
          description: The start date of the regimen.
          example: 2020-12-06
          format: date
          nullable: true
          type: string
        regimen:
          description: The description of the regimen.
          example: Régimen de Ingresos por Dividendos (socios y accionistas)
          nullable: true
          type: string
      required:
      - end_date
      - initial_date
      - regimen
      type: object
    TaxStatusObligations:
      description: |
        Details regarding a business's obligations.

        ℹ️ For non-business accounts, this field will return empty.
      example:
        end_date: 2000-01-23
        obligation: Declaración informativa de IVA con la anual de ISR
        initial_date: 2020-12-06T00:00:00.000+00:00
        expiration: Conjuntamente con la declaración anual del ejercicio.
      properties:
        obligation:
          description: The description of the obligation.
          example: Declaración informativa de IVA con la anual de ISR
          nullable: true
          type: string
        expiration:
          description: "The deadline to fulfill the obligation, as imposed by the\
            \ tax authority"
          example: Conjuntamente con la declaración anual del ejercicio.
          nullable: true
          type: string
        initial_date:
          description: The date when obligation started.
          example: 2020-12-06
          format: date
          nullable: true
          type: string
        end_date:
          description: The date when obligation ended.
          format: date
          nullable: true
          type: string
          example: null
      type: object
    TaxStatus:
      example:
        official_name: John Doe
        address:
          exterior_number: "432"
          street: LA MALINCHE
          locality: TLALPAN
          municipality: TLALPAN
          suburb: COLINAS DEL BOSQUE
          street_type: CALLE
          interior_number: PLANTA BAJA
          state: CIUDAD DE MEXICO
          postal_code: "12345"
          between_street:
          - street_two: CALLE NUEVA ROMA
            street_one: CALLE PRINCIPE
          - street_two: CALLE NUEVA ROMA
            street_one: CALLE PRINCIPE
        id_cif: "12345678901"
        tax_payer_information:
          social_name: John Doe SA DE CV
          phone: "1234567890"
          status_padron: ACTIVO
          name: JOHN
          last_status_change_date: 2016-02-16T00:00:00.000+00:00
          commercial_name: JOHNDOE
          first_last_name: DOE
          rfc: BEMP12345G58
          curp: BEMP12345HKGLLT00
          start_operations_date: 2016-02-16T00:00:00.000+00:00
          email: john_doe@gmail.com
          second_last_name: SCHMOE
        link: c2280c05-cbeb-4a29-ae53-8f837a77995b
        obligations:
        - end_date: 2000-01-23
          obligation: Declaración informativa de IVA con la anual de ISR
          initial_date: 2020-12-06T00:00:00.000+00:00
          expiration: Conjuntamente con la declaración anual del ejercicio.
        - end_date: 2000-01-23
          obligation: Declaración informativa de IVA con la anual de ISR
          initial_date: 2020-12-06T00:00:00.000+00:00
          expiration: Conjuntamente con la declaración anual del ejercicio.
        created_at: 2022-02-09T08:45:50.406032Z
        regimens:
        - end_date: 2000-01-23
          initial_date: 2020-12-06T00:00:00.000+00:00
          regimen: Régimen de Ingresos por Dividendos (socios y accionistas)
        - end_date: 2000-01-23
          initial_date: 2020-12-06T00:00:00.000+00:00
          regimen: Régimen de Ingresos por Dividendos (socios y accionistas)
        place_and_date_of_issuance: "TLALPAN , CIUDAD DE MEXICO A 19 DE MARZO DE 2020"
        economic_activity:
        - end_date: 2000-01-23
          percentage: "1"
          initial_date: 2020-12-06T00:00:00.000+00:00
          economic_activity: Asalariado
          order: "2"
        - end_date: 2000-01-23
          percentage: "1"
          initial_date: 2020-12-06T00:00:00.000+00:00
          economic_activity: Asalariado
          order: "2"
        collected_at: 2020-04-23T21:32:55.336Z
        pdf: !!binary |-
          PVBERi1TVFJJTkc9
        digital_stamp: '||2020/04/26|GHTF980303F7|CONSTANCIA DE SITUACIÓN FISCAL|2044441088666600000034||'
        digital_stamp_chain: EtenSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjow=
        id: 21e9e25b-10a8-48a5-9e6a-4072b364b53f
      properties:
        id:
          description: Unique identifier created by Belvo used to reference the current
            Tax Status.
          example: 21e9e25b-10a8-48a5-9e6a-4072b364b53f
          format: uuid
          type: string
        link:
          description: The Link ID that the tax status is associated with.
          example: c2280c05-cbeb-4a29-ae53-8f837a77995b
          format: uuid
          type: string
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          example: 2020-04-23T21:32:55.336Z
          format: date-time
          nullable: true
          type: string
        created_at:
          description: The ISO-8601 timestamp of when the data point was last updated
            in Belvo's database.
          example: 2022-02-09T08:45:50.406032Z
          format: date-time
          type: string
        place_and_date_of_issuance:
          description: The place and date of that the tax status was issued.
          example: "TLALPAN , CIUDAD DE MEXICO A 19 DE MARZO DE 2020"
          nullable: true
          type: string
        official_name:
          description: The name of the person or business.
          example: John Doe
          nullable: true
          type: string
        id_cif:
          description: The taxpayer's *Cédula de Identificación Fiscal* (CIF) ID.
          example: "12345678901"
          nullable: true
          type: string
        tax_payer_information:
          $ref: '#/components/schemas/TaxStatusTaxPayerInformation'
        address:
          $ref: '#/components/schemas/TaxStatusAddress'
        economic_activity:
          description: |
            A list of economic activity objects.
          items:
            $ref: '#/components/schemas/TaxStatusEconomicActivity'
          nullable: true
          type: array
        regimens:
          description: |
            A list of regimen objects.
          items:
            $ref: '#/components/schemas/TaxStatusRegimens'
          nullable: true
          type: array
        obligations:
          description: |
            Details regarding a business's obligations.

            ℹ️ For non-business accounts, this field will return empty.
          items:
            $ref: '#/components/schemas/TaxStatusObligations'
          nullable: true
          type: array
        digital_stamp:
          description: The validation certificate of the document.
          example: '||2020/04/26|GHTF980303F7|CONSTANCIA DE SITUACIÓN FISCAL|2044441088666600000034||'
          nullable: true
          type: string
        digital_stamp_chain:
          description: |
            A data chain containing the basic structure of a fiscal digital check.

            - 🇲🇽 Mexico: Comprobante Fiscal Digital por Internet (CFDI)
          example: EtenSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjow=
          nullable: true
          type: string
        pdf:
          description: Tax status PDF as a binary string.
          example: !!binary |-
            PVBERi1TVFJJTkc9
          format: binary
          nullable: true
          type: string
      required:
      - collected_at
      - pdf
      type: object
    TaxStatusPaginatedResponse:
      example:
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: previous
        count: 130
        results:
        - official_name: John Doe
          address:
            exterior_number: "432"
            street: LA MALINCHE
            locality: TLALPAN
            municipality: TLALPAN
            suburb: COLINAS DEL BOSQUE
            street_type: CALLE
            interior_number: PLANTA BAJA
            state: CIUDAD DE MEXICO
            postal_code: "12345"
            between_street:
            - street_two: CALLE NUEVA ROMA
              street_one: CALLE PRINCIPE
            - street_two: CALLE NUEVA ROMA
              street_one: CALLE PRINCIPE
          id_cif: "12345678901"
          tax_payer_information:
            social_name: John Doe SA DE CV
            phone: "1234567890"
            status_padron: ACTIVO
            name: JOHN
            last_status_change_date: 2016-02-16T00:00:00.000+00:00
            commercial_name: JOHNDOE
            first_last_name: DOE
            rfc: BEMP12345G58
            curp: BEMP12345HKGLLT00
            start_operations_date: 2016-02-16T00:00:00.000+00:00
            email: john_doe@gmail.com
            second_last_name: SCHMOE
          link: c2280c05-cbeb-4a29-ae53-8f837a77995b
          obligations:
          - end_date: 2000-01-23
            obligation: Declaración informativa de IVA con la anual de ISR
            initial_date: 2020-12-06T00:00:00.000+00:00
            expiration: Conjuntamente con la declaración anual del ejercicio.
          - end_date: 2000-01-23
            obligation: Declaración informativa de IVA con la anual de ISR
            initial_date: 2020-12-06T00:00:00.000+00:00
            expiration: Conjuntamente con la declaración anual del ejercicio.
          created_at: 2022-02-09T08:45:50.406032Z
          regimens:
          - end_date: 2000-01-23
            initial_date: 2020-12-06T00:00:00.000+00:00
            regimen: Régimen de Ingresos por Dividendos (socios y accionistas)
          - end_date: 2000-01-23
            initial_date: 2020-12-06T00:00:00.000+00:00
            regimen: Régimen de Ingresos por Dividendos (socios y accionistas)
          place_and_date_of_issuance: "TLALPAN , CIUDAD DE MEXICO A 19 DE MARZO DE\
            \ 2020"
          economic_activity:
          - end_date: 2000-01-23
            percentage: "1"
            initial_date: 2020-12-06T00:00:00.000+00:00
            economic_activity: Asalariado
            order: "2"
          - end_date: 2000-01-23
            percentage: "1"
            initial_date: 2020-12-06T00:00:00.000+00:00
            economic_activity: Asalariado
            order: "2"
          collected_at: 2020-04-23T21:32:55.336Z
          pdf: !!binary |-
            PVBERi1TVFJJTkc9
          digital_stamp: '||2020/04/26|GHTF980303F7|CONSTANCIA DE SITUACIÓN FISCAL|2044441088666600000034||'
          digital_stamp_chain: EtenSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjow=
          id: 21e9e25b-10a8-48a5-9e6a-4072b364b53f
        - official_name: John Doe
          address:
            exterior_number: "432"
            street: LA MALINCHE
            locality: TLALPAN
            municipality: TLALPAN
            suburb: COLINAS DEL BOSQUE
            street_type: CALLE
            interior_number: PLANTA BAJA
            state: CIUDAD DE MEXICO
            postal_code: "12345"
            between_street:
            - street_two: CALLE NUEVA ROMA
              street_one: CALLE PRINCIPE
            - street_two: CALLE NUEVA ROMA
              street_one: CALLE PRINCIPE
          id_cif: "12345678901"
          tax_payer_information:
            social_name: John Doe SA DE CV
            phone: "1234567890"
            status_padron: ACTIVO
            name: JOHN
            last_status_change_date: 2016-02-16T00:00:00.000+00:00
            commercial_name: JOHNDOE
            first_last_name: DOE
            rfc: BEMP12345G58
            curp: BEMP12345HKGLLT00
            start_operations_date: 2016-02-16T00:00:00.000+00:00
            email: john_doe@gmail.com
            second_last_name: SCHMOE
          link: c2280c05-cbeb-4a29-ae53-8f837a77995b
          obligations:
          - end_date: 2000-01-23
            obligation: Declaración informativa de IVA con la anual de ISR
            initial_date: 2020-12-06T00:00:00.000+00:00
            expiration: Conjuntamente con la declaración anual del ejercicio.
          - end_date: 2000-01-23
            obligation: Declaración informativa de IVA con la anual de ISR
            initial_date: 2020-12-06T00:00:00.000+00:00
            expiration: Conjuntamente con la declaración anual del ejercicio.
          created_at: 2022-02-09T08:45:50.406032Z
          regimens:
          - end_date: 2000-01-23
            initial_date: 2020-12-06T00:00:00.000+00:00
            regimen: Régimen de Ingresos por Dividendos (socios y accionistas)
          - end_date: 2000-01-23
            initial_date: 2020-12-06T00:00:00.000+00:00
            regimen: Régimen de Ingresos por Dividendos (socios y accionistas)
          place_and_date_of_issuance: "TLALPAN , CIUDAD DE MEXICO A 19 DE MARZO DE\
            \ 2020"
          economic_activity:
          - end_date: 2000-01-23
            percentage: "1"
            initial_date: 2020-12-06T00:00:00.000+00:00
            economic_activity: Asalariado
            order: "2"
          - end_date: 2000-01-23
            percentage: "1"
            initial_date: 2020-12-06T00:00:00.000+00:00
            economic_activity: Asalariado
            order: "2"
          collected_at: 2020-04-23T21:32:55.336Z
          pdf: !!binary |-
            PVBERi1TVFJJTkc9
          digital_stamp: '||2020/04/26|GHTF980303F7|CONSTANCIA DE SITUACIÓN FISCAL|2044441088666600000034||'
          digital_stamp_chain: EtenSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjow=
          id: 21e9e25b-10a8-48a5-9e6a-4072b364b53f
      properties:
        count:
          description: The total number of results in your Belvo account.
          example: 130
          format: int32
          type: integer
        next:
          description: |
            The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

            In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
          example: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
          nullable: true
          type: string
        previous:
          description: "The URL to the previous page of results. If there is no previous\
            \ page, the value is `null`."
          nullable: true
          type: string
          example: null
        results:
          description: Array of tax status objects.
          items:
            $ref: '#/components/schemas/TaxStatus'
          type: array
      type: object
    TaxStatusRequest:
      example:
        link: d4617561-1c01-4b2f-83b6-a594f7b3bc57
        attach_pdf: false
        save_data: true
      properties:
        link:
          description: The fiscal `link.id` to use.
          example: d4617561-1c01-4b2f-83b6-a594f7b3bc57
          format: uuid
          type: string
        attach_pdf:
          default: false
          description: "When set to `true`, you will receive the PDF in binary format\
            \ in the response."
          type: boolean
        save_data:
          default: true
          description: |-
            Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
            When set to `false`, the data won't be persisted and we return a 200 OK response.
          example: true
          type: boolean
      required:
      - link
      type: object
    taxComplianceStatusFilters:
      additionalProperties: false
      properties:
        created_at__gt:
          type: string
        created_at__gte:
          type: string
        created_at__lt:
          type: string
        created_at__lte:
          type: string
        created_at__range:
          type: string
        id:
          type: string
        id__in:
          type: string
        link__in:
          type: string
      type: object
    TaxComplianceStatus:
      example:
        pdf: !!binary |-
          PVBERi1TVFJJTkc9
        internal_identification: 20NE1234567
        created_at: 2022-02-09T08:45:50.406032Z
        id: 91106968-1abd-4d64-85c1-4e73d96fb997
        rfc: KDFC211118IS0
        outcome: NEGATIVE
        collected_at: 2022-02-09T08:45:50.406032Z
      properties:
        id:
          description: Unique identifier created by Belvo used to reference the current
            Tax Compliance Status.
          example: 91106968-1abd-4d64-85c1-4e73d96fb997
          format: uuid
          type: string
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          example: 2022-02-09T08:45:50.406032Z
          format: date-time
          nullable: true
          type: string
        created_at:
          description: The ISO-8601 timestamp of when the data point was last updated
            in Belvo's database.
          example: 2022-02-09T08:45:50.406032Z
          format: date-time
          type: string
        internal_identification:
          description: The institution’s internal identification number for the document.
          example: 20NE1234567
          nullable: true
          type: string
        pdf:
          description: Tax compliance status PDF as a binary.
          example: !!binary |-
            PVBERi1TVFJJTkc9
          format: binary
          nullable: true
          type: string
        rfc:
          description: The account holder's RFC (Registro Federal de Contribuyentes)
            number.
          example: KDFC211118IS0
          nullable: true
          type: string
        outcome:
          description: "Indicates whether the taxpayer is complying to all their tax\
            \ obligations (`POSITIVE`), if they are not (`NEGATIVE`), or have none\
            \ to comply to (`NO_OBLIGATIONS`)."
          enum:
          - POSITIVE
          - NEGATIVE
          - NO_OBLIGATIONS
          example: NEGATIVE
          nullable: true
          type: string
      required:
      - collected_at
      - pdf
      type: object
    TaxComplianceStatusPaginatedResponse:
      example:
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: previous
        count: 130
        results:
        - pdf: !!binary |-
            PVBERi1TVFJJTkc9
          internal_identification: 20NE1234567
          created_at: 2022-02-09T08:45:50.406032Z
          id: 91106968-1abd-4d64-85c1-4e73d96fb997
          rfc: KDFC211118IS0
          outcome: NEGATIVE
          collected_at: 2022-02-09T08:45:50.406032Z
        - pdf: !!binary |-
            PVBERi1TVFJJTkc9
          internal_identification: 20NE1234567
          created_at: 2022-02-09T08:45:50.406032Z
          id: 91106968-1abd-4d64-85c1-4e73d96fb997
          rfc: KDFC211118IS0
          outcome: NEGATIVE
          collected_at: 2022-02-09T08:45:50.406032Z
      properties:
        count:
          description: The total number of results in your Belvo account.
          example: 130
          format: int32
          type: integer
        next:
          description: |
            The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

            In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
          example: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
          nullable: true
          type: string
        previous:
          description: "The URL to the previous page of results. If there is no previous\
            \ page, the value is `null`."
          nullable: true
          type: string
          example: null
        results:
          description: Array of tax compliance status objects.
          items:
            $ref: '#/components/schemas/TaxComplianceStatus'
          type: array
      type: object
    TaxComplianceStatusRequest:
      example:
        link: d4617561-1c01-4b2f-83b6-a594f7b3bc57
        attach_pdf: false
        save_data: true
      properties:
        link:
          description: The fiscal `link.id` to use.
          example: d4617561-1c01-4b2f-83b6-a594f7b3bc57
          format: uuid
          type: string
        attach_pdf:
          default: false
          description: "When set to `true`, you will receive the PDF in binary format\
            \ in the response."
          type: boolean
        save_data:
          default: true
          description: |-
            Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
            When set to `false`, the data won't be persisted and we return a 200 OK response.
          example: true
          type: boolean
      required:
      - link
      type: object
    incomeFilters:
      additionalProperties: false
      properties:
        account:
          type: string
        account__in:
          type: string
        created_at__gt:
          type: string
        created_at__gte:
          type: string
        created_at__lt:
          type: string
        created_at__lte:
          type: string
        created_at__range:
          type: string
        id:
          description: Exact match for a specific ID.
          example: a7f4f311-728c-4c88-86ca-bbb6b8dd4435
          type: string
        id__in:
          description: Find one match among two or more IDs.
          example: "a7f4f311-728c-4c88-86ca-bbb6b8dd4435,8a577cf8-4be3-4921-a3a3-5ffef472f2dc"
          type: string
      type: object
    IncomeSourceTransaction:
      example:
        amount: 2145.45
        description: NOMINA BUDDHAS RFC:XXXXXXXXXX
        value_date: 2019-10-23T00:00:00.000+00:00
      nullable: true
      properties:
        amount:
          description: The transaction amount.
          example: 2145.45
          format: float
          maximum: 10000000000
          minimum: 0
          type: number
        value_date:
          description: "The date when the transaction occurred, in `YYYY-MM-DD` format."
          example: 2019-10-23
          format: date
          type: string
        description:
          description: "The description of the transaction provided by the institution.\
            \ Usually, this is the text that the end user would see in the bank statement."
          example: NOMINA BUDDHAS RFC:XXXXXXXXXX
          type: string
      required:
      - amount
      - description
      - value_date
      type: object
    IncomeSources:
      description: |
        A list of income sources for the account.

        For each income source, we provide additional insights such as:
        - Frequency of the income transactions.
        - Key metrics about the transaction amounts.

        ℹ️ If no income sources are found, we return an empty array.
      example:
        days_since_last_transaction: 6
        average_transaction_amount: 31166.66
        confidence: HIGH
        std_transaction_amount: 1040.83
        maximum_days_between_consecutive_income_transactions: 32
        transactions:
        - amount: 2145.45
          description: NOMINA BUDDHAS RFC:XXXXXXXXXX
          value_date: 2019-10-23T00:00:00.000+00:00
        - amount: 2145.45
          description: NOMINA BUDDHAS RFC:XXXXXXXXXX
          value_date: 2019-10-23T00:00:00.000+00:00
        type: SALARY
        average_days_between_consecutive_income_transactions: 30.5
        frequency: MONTHLY
        median_days_between_consecutive_income_transactions: 30.5
        median_transaction_amount: 31500
        maximum_transaction_amount: 32000
        std_days_between_consecutive_income_transactions: 2.12
        minimum_days_between_consecutive_income_transactions: 29
        minimum_transaction_amount: 30000
      nullable: true
      properties:
        transactions:
          description: |
            A list of supporting transactions for this income source.


            ℹ️ If no income transactions are found, we return an empty array.
          items:
            $ref: '#/components/schemas/IncomeSourceTransaction'
          type: array
        confidence:
          description: |
            Belvo's level of confidence that the source is actually an income.

            We return one of the following enum values:

              - `HIGH`
              - `MEDIUM`
          enum:
          - HIGH
          - MEDIUM
          example: HIGH
          type: string
        type:
          description: |
            The type of income.

            We return one of the following enum values:

              - `SALARY`
              - `CASH_DEPOSIT`
              - `PENSION`
              - `UNKNOWN`
          enum:
          - SALARY
          - CASH_DEPOSIT
          - PENSION
          - UNKNOWN
          example: SALARY
          type: string
        frequency:
          description: |
            How often the income transaction occurs.

            We return one of the following enum values:

              - `MONTHLY`
              - `FORTNIGHTLY`
              - `WEEKLY`
              - `IRREGULAR`
          enum:
          - MONTHLY
          - FORTNIGHTLY
          - WEEKLY
          - IRREGULAR
          example: MONTHLY
          type: string
        std_transaction_amount:
          description: The standard deviation of the income transaction.
          example: 1040.83
          format: float
          nullable: true
          type: number
        average_transaction_amount:
          description: The average income transaction amount.
          example: 31166.66
          format: float
          type: number
        median_transaction_amount:
          description: The median income transaction amount.
          example: 31500
          format: float
          type: number
        minimum_transaction_amount:
          description: The minimum income transaction amount.
          example: 30000
          format: float
          type: number
        maximum_transaction_amount:
          description: The maximum income transaction amount.
          example: 32000
          format: float
          type: number
        days_since_last_transaction:
          description: The number of days since the last income transaction.
          example: 6
          format: int32
          type: integer
        average_days_between_consecutive_income_transactions:
          description: The average number of days between consecutive income transactions.
          example: 30.5
          format: float
          type: number
        std_days_between_consecutive_income_transactions:
          description: The standard deviation of days between consecutive income transactions.
          example: 2.12
          format: float
          nullable: true
          type: number
        median_days_between_consecutive_income_transactions:
          description: The median number of days between consecutive income transactions.
          example: 30.5
          format: float
          type: number
        minimum_days_between_consecutive_income_transactions:
          description: The minimum number of days between consecutive income transactions.
          example: 29
          format: int32
          type: integer
        maximum_days_between_consecutive_income_transactions:
          description: The maximum number of days between consecutive income transactions.
          example: 32
          format: int32
          type: integer
      required:
      - average_days_between_consecutive_income_transactions
      - average_transaction_amount
      - confidence
      - days_since_last_transaction
      - frequency
      - maximum_days_between_consecutive_income_transactions
      - maximum_transaction_amount
      - median_days_between_consecutive_income_transactions
      - median_transaction_amount
      - minimum_days_between_consecutive_income_transactions
      - minimum_transaction_amount
      - std_days_between_consecutive_income_transactions
      - std_transaction_amount
      - transactions
      - type
      type: object
    IncomesAggregations:
      description: |
        A list of aggregated data for the incomes.


        ℹ️ If not income information can be found, we return an empty array.
      example:
        full_periods: 2
        periods_with_income: 3
        total_number_of_sources: 3
        median_income_per_period: 1990.73
        minimum_income_per_period: 1861.08
        period_unit: MONTH
        maximum_income_per_period: 4374.4
        lookback_periods: 3
        type: ALL
        minimum_confidence: HIGH
        std_income_per_period: 1415.12
        average_income_per_period: 2742.07
      nullable: true
      properties:
        period_unit:
          description: |
            Period to be considered. At present all calculations are based on *rolling months*.

            Note: A *rolling month* is a period of 30 days. For example, 15-03-2021 to 14-04-2021.
          example: MONTH
          type: string
        type:
          description: |-
            The type of income used in the calculations. At present, Belvo takes into consideration all the income types into the calculation.
            We return one of the following enum values:

              - `ALL`
              - `CASH_DEPOSIT`
              - `PENSION`
              - `SALARY`
              - `UNKNOWN`
          enum:
          - ALL
          - CASH_DEPOSIT
          - PENSION
          - SALARY
          - UNKNOWN
          example: ALL
          type: string
        minimum_confidence:
          description: |
            The lowest confidence score of the income transactions used in performing the calculations.

            When the `minimum_confidence` enum is equal to:
            - `HIGH`, only transactions with high confidence score are used.
            - `MEDIUM`, all transactions with a confidence score of medium or high are used.
          enum:
          - MEDIUM
          - HIGH
          example: HIGH
          type: string
        lookback_periods:
          description: Number of `period_unit`s used to generate insights and calculations.
          example: 3
          format: int32
          type: integer
        full_periods:
          description: Number of `period_unit`s with data to perform calculations.
          example: 2
          format: int32
          type: integer
        periods_with_income:
          description: |
            Number of `period_unit`s with at least one income available with a confidence of either `HIGH` or `MEDIUM`.
          example: 3
          format: int32
          type: integer
        total_number_of_sources:
          description: The total number of income transactions in the last `period_unit`s.
          example: 3
          format: int32
          type: integer
        std_income_per_period:
          description: |
            The standard deviation of the income amount calculated per month, given the past three `period_unit`s.
          example: 1415.12
          format: float
          type: number
        average_income_per_period:
          description: |
            The average income amount calculated per month, given the past three `period_unit`s.
          example: 2742.07
          format: float
          type: number
        median_income_per_period:
          description: |
            The median income amount calculated per month, given the past three `period_unit`s.
          example: 1990.73
          format: float
          type: number
        maximum_income_per_period:
          description: |
            The maximum income amount calculated per month, given the past three `period_unit`s.
          example: 4374.4
          format: float
          type: number
        minimum_income_per_period:
          description: |
            The minimum income amount calculated per month, given the past three `period_unit`s.
          example: 1861.08
          format: float
          type: number
      required:
      - average_income_per_period
      - full_periods
      - lookback_periods
      - maximum_income_per_period
      - median_income_per_period
      - minimum_confidence
      - minimum_income_per_period
      - period_unit
      - periods_with_income
      - std_income_per_period
      - total_number_of_sources
      - type
      type: object
    Income:
      description: Income insights
      example:
        sources:
        - days_since_last_transaction: 6
          average_transaction_amount: 31166.66
          confidence: HIGH
          std_transaction_amount: 1040.83
          maximum_days_between_consecutive_income_transactions: 32
          transactions:
          - amount: 2145.45
            description: NOMINA BUDDHAS RFC:XXXXXXXXXX
            value_date: 2019-10-23T00:00:00.000+00:00
          - amount: 2145.45
            description: NOMINA BUDDHAS RFC:XXXXXXXXXX
            value_date: 2019-10-23T00:00:00.000+00:00
          type: SALARY
          average_days_between_consecutive_income_transactions: 30.5
          frequency: MONTHLY
          median_days_between_consecutive_income_transactions: 30.5
          median_transaction_amount: 31500
          maximum_transaction_amount: 32000
          std_days_between_consecutive_income_transactions: 2.12
          minimum_days_between_consecutive_income_transactions: 29
          minimum_transaction_amount: 30000
        - days_since_last_transaction: 6
          average_transaction_amount: 31166.66
          confidence: HIGH
          std_transaction_amount: 1040.83
          maximum_days_between_consecutive_income_transactions: 32
          transactions:
          - amount: 2145.45
            description: NOMINA BUDDHAS RFC:XXXXXXXXXX
            value_date: 2019-10-23T00:00:00.000+00:00
          - amount: 2145.45
            description: NOMINA BUDDHAS RFC:XXXXXXXXXX
            value_date: 2019-10-23T00:00:00.000+00:00
          type: SALARY
          average_days_between_consecutive_income_transactions: 30.5
          frequency: MONTHLY
          median_days_between_consecutive_income_transactions: 30.5
          median_transaction_amount: 31500
          maximum_transaction_amount: 32000
          std_days_between_consecutive_income_transactions: 2.12
          minimum_days_between_consecutive_income_transactions: 29
          minimum_transaction_amount: 30000
        currency: MXN
        id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
        aggregations:
        - full_periods: 2
          periods_with_income: 3
          total_number_of_sources: 3
          median_income_per_period: 1990.73
          minimum_income_per_period: 1861.08
          period_unit: MONTH
          maximum_income_per_period: 4374.4
          lookback_periods: 3
          type: ALL
          minimum_confidence: HIGH
          std_income_per_period: 1415.12
          average_income_per_period: 2742.07
        - full_periods: 2
          periods_with_income: 3
          total_number_of_sources: 3
          median_income_per_period: 1990.73
          minimum_income_per_period: 1861.08
          period_unit: MONTH
          maximum_income_per_period: 4374.4
          lookback_periods: 3
          type: ALL
          minimum_confidence: HIGH
          std_income_per_period: 1415.12
          average_income_per_period: 2742.07
        account:
          loan_data:
            contract_amount: 202000
            number_of_installments_total: 60
            no_interest_payment: 5.637376656633329
            interest_rates:
            - name: jurosEfetivo
              type: MONTHLY
              value: 7.85
            - name: jurosEfetivo
              type: MONTHLY
              value: 7.85
            fees:
            - type: OPERATION_FEE
              value: 5.6
            - type: OPERATION_FEE
              value: 5.6
            limit_day: limit_day
            last_payment_date: last_payment_date
            cutting_day: cutting_day
            cutting_date: cutting_date
            loan_type: Consignado
            outstanding_principal: 142023
            contract_start_date: 2020-03-01T00:00:00.000+00:00
            last_period_balance: 1.4658129805029452
            collected_at: 2022-02-09T08:45:50.406032Z
            principal: 192000
            contract_end_date: 2027-10-01T00:00:00.000+00:00
            number_of_installments_outstanding: 48
            contract_number: 890ASLDJF87SD00
            payment_day: "27"
            outstanding_balance: 182000
            credit_limit: 6.027456183070403
            interest_rate: 5.962133916683182
            monthly_payment: 1000
          internal_identification: internal_identification
          link: 30cb4806-6e00-48a4-91c9-ca55968576c8
          created_at: 2022-02-09T08:45:50.406032Z
          public_identification_value: "150194683119900273"
          type: Cuentas de efectivo
          collected_at: 2019-09-27T13:01:41.941Z
          institution:
            name: erebor_mx_retail
            type: bank
          number: "4057068115181"
          balance:
            current: 5874.13
            available: 5621.12
          credit_data:
            no_interest_payment: 2690.83
            end_date: end_date
            credit_limit: 192000
            minimum_payment: 2400.3
            last_payment_date: last_payment_date
            interest_rate: 4
            cutting_date: 2019-12-11
            collected_at: 2019-09-27T13:01:41.941Z
            next_payment_date: 2019-12-13
            monthly_payment: 0.8008281904610115
          receivables_data:
            current: 2193.83
            available: 800.37
            anticipated: 1393.46
            collected_at: 2022-02-09T08:45:50.406032Z
          name: Cuenta Perfiles- M.N. - MXN-666
          gig_payment_data:
            number: "123184016786312246"
            method: BANK_ACCOUNT
            issuer: AZTECA - BANCO AZTECA SA
            holder_name: Elisa Rojas Rivas
            collected_at: 2019-09-27T13:01:41.941Z
          balance_type: ASSET
          currency: MXN
          funds_data:
          - balance: "88427.94"
            percentage: "100"
            name: FIX X
            type: CNPJ
            public_identifications:
            - name: CNPJ
              value: 05.954.445/0221-68
            - name: CNPJ
              value: 05.954.445/0221-68
          - balance: "88427.94"
            percentage: "100"
            name: FIX X
            type: CNPJ
            public_identifications:
            - name: CNPJ
              value: 05.954.445/0221-68
            - name: CNPJ
              value: 05.954.445/0221-68
          id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
          last_accessed_at: 2021-03-09T10:28:40Z
          category: CHECKING_ACCOUNT
          public_identification_name: CLABE
          bank_product_id: bank_product_id
        collected_at: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: Belvo's unique identifier used to reference the current income.
          example: 076c66e5-90f5-4e01-99c7-50e32f65ae42
          format: uuid
          type: string
        account:
          $ref: '#/components/schemas/Account'
        currency:
          description: |-
            The currency of the income. For example:
            - 🇧🇷 BRL (Brazilian Real)
            - 🇨🇴 COP (Colombian Peso)
            - 🇲🇽 MXN (Mexican Peso)

             Please note that other currencies other than in the list above may be returned.
          example: MXN
          maxLength: 3
          minLength: 3
          type: string
        sources:
          description: |
            A list of income sources for the account.

            For each income source, we provide additional insights such as:
            - Frequency of the income transactions.
            - Key metrics about the transaction amounts.
          items:
            $ref: '#/components/schemas/IncomeSources'
          type: array
        aggregations:
          description: |
            A list of aggregated metrics for the income.
          items:
            $ref: '#/components/schemas/IncomesAggregations'
          type: array
        collected_at:
          deprecated: true
          description: |
            This field has been deprecated.

            The ISO-8601 timestamp when the data point was collected.
          format: date-time
          nullable: true
          type: string
          example: null
      required:
      - account
      - aggregations
      - collected_at
      - currency
      - id
      - sources
      type: object
    IncomesPaginatedResponse:
      example:
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: previous
        count: 130
        results:
        - sources:
          - days_since_last_transaction: 6
            average_transaction_amount: 31166.66
            confidence: HIGH
            std_transaction_amount: 1040.83
            maximum_days_between_consecutive_income_transactions: 32
            transactions:
            - amount: 2145.45
              description: NOMINA BUDDHAS RFC:XXXXXXXXXX
              value_date: 2019-10-23T00:00:00.000+00:00
            - amount: 2145.45
              description: NOMINA BUDDHAS RFC:XXXXXXXXXX
              value_date: 2019-10-23T00:00:00.000+00:00
            type: SALARY
            average_days_between_consecutive_income_transactions: 30.5
            frequency: MONTHLY
            median_days_between_consecutive_income_transactions: 30.5
            median_transaction_amount: 31500
            maximum_transaction_amount: 32000
            std_days_between_consecutive_income_transactions: 2.12
            minimum_days_between_consecutive_income_transactions: 29
            minimum_transaction_amount: 30000
          - days_since_last_transaction: 6
            average_transaction_amount: 31166.66
            confidence: HIGH
            std_transaction_amount: 1040.83
            maximum_days_between_consecutive_income_transactions: 32
            transactions:
            - amount: 2145.45
              description: NOMINA BUDDHAS RFC:XXXXXXXXXX
              value_date: 2019-10-23T00:00:00.000+00:00
            - amount: 2145.45
              description: NOMINA BUDDHAS RFC:XXXXXXXXXX
              value_date: 2019-10-23T00:00:00.000+00:00
            type: SALARY
            average_days_between_consecutive_income_transactions: 30.5
            frequency: MONTHLY
            median_days_between_consecutive_income_transactions: 30.5
            median_transaction_amount: 31500
            maximum_transaction_amount: 32000
            std_days_between_consecutive_income_transactions: 2.12
            minimum_days_between_consecutive_income_transactions: 29
            minimum_transaction_amount: 30000
          currency: MXN
          id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
          aggregations:
          - full_periods: 2
            periods_with_income: 3
            total_number_of_sources: 3
            median_income_per_period: 1990.73
            minimum_income_per_period: 1861.08
            period_unit: MONTH
            maximum_income_per_period: 4374.4
            lookback_periods: 3
            type: ALL
            minimum_confidence: HIGH
            std_income_per_period: 1415.12
            average_income_per_period: 2742.07
          - full_periods: 2
            periods_with_income: 3
            total_number_of_sources: 3
            median_income_per_period: 1990.73
            minimum_income_per_period: 1861.08
            period_unit: MONTH
            maximum_income_per_period: 4374.4
            lookback_periods: 3
            type: ALL
            minimum_confidence: HIGH
            std_income_per_period: 1415.12
            average_income_per_period: 2742.07
          account:
            loan_data:
              contract_amount: 202000
              number_of_installments_total: 60
              no_interest_payment: 5.637376656633329
              interest_rates:
              - name: jurosEfetivo
                type: MONTHLY
                value: 7.85
              - name: jurosEfetivo
                type: MONTHLY
                value: 7.85
              fees:
              - type: OPERATION_FEE
                value: 5.6
              - type: OPERATION_FEE
                value: 5.6
              limit_day: limit_day
              last_payment_date: last_payment_date
              cutting_day: cutting_day
              cutting_date: cutting_date
              loan_type: Consignado
              outstanding_principal: 142023
              contract_start_date: 2020-03-01T00:00:00.000+00:00
              last_period_balance: 1.4658129805029452
              collected_at: 2022-02-09T08:45:50.406032Z
              principal: 192000
              contract_end_date: 2027-10-01T00:00:00.000+00:00
              number_of_installments_outstanding: 48
              contract_number: 890ASLDJF87SD00
              payment_day: "27"
              outstanding_balance: 182000
              credit_limit: 6.027456183070403
              interest_rate: 5.962133916683182
              monthly_payment: 1000
            internal_identification: internal_identification
            link: 30cb4806-6e00-48a4-91c9-ca55968576c8
            created_at: 2022-02-09T08:45:50.406032Z
            public_identification_value: "150194683119900273"
            type: Cuentas de efectivo
            collected_at: 2019-09-27T13:01:41.941Z
            institution:
              name: erebor_mx_retail
              type: bank
            number: "4057068115181"
            balance:
              current: 5874.13
              available: 5621.12
            credit_data:
              no_interest_payment: 2690.83
              end_date: end_date
              credit_limit: 192000
              minimum_payment: 2400.3
              last_payment_date: last_payment_date
              interest_rate: 4
              cutting_date: 2019-12-11
              collected_at: 2019-09-27T13:01:41.941Z
              next_payment_date: 2019-12-13
              monthly_payment: 0.8008281904610115
            receivables_data:
              current: 2193.83
              available: 800.37
              anticipated: 1393.46
              collected_at: 2022-02-09T08:45:50.406032Z
            name: Cuenta Perfiles- M.N. - MXN-666
            gig_payment_data:
              number: "123184016786312246"
              method: BANK_ACCOUNT
              issuer: AZTECA - BANCO AZTECA SA
              holder_name: Elisa Rojas Rivas
              collected_at: 2019-09-27T13:01:41.941Z
            balance_type: ASSET
            currency: MXN
            funds_data:
            - balance: "88427.94"
              percentage: "100"
              name: FIX X
              type: CNPJ
              public_identifications:
              - name: CNPJ
                value: 05.954.445/0221-68
              - name: CNPJ
                value: 05.954.445/0221-68
            - balance: "88427.94"
              percentage: "100"
              name: FIX X
              type: CNPJ
              public_identifications:
              - name: CNPJ
                value: 05.954.445/0221-68
              - name: CNPJ
                value: 05.954.445/0221-68
            id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
            last_accessed_at: 2021-03-09T10:28:40Z
            category: CHECKING_ACCOUNT
            public_identification_name: CLABE
            bank_product_id: bank_product_id
          collected_at: 2000-01-23T04:56:07.000+00:00
        - sources:
          - days_since_last_transaction: 6
            average_transaction_amount: 31166.66
            confidence: HIGH
            std_transaction_amount: 1040.83
            maximum_days_between_consecutive_income_transactions: 32
            transactions:
            - amount: 2145.45
              description: NOMINA BUDDHAS RFC:XXXXXXXXXX
              value_date: 2019-10-23T00:00:00.000+00:00
            - amount: 2145.45
              description: NOMINA BUDDHAS RFC:XXXXXXXXXX
              value_date: 2019-10-23T00:00:00.000+00:00
            type: SALARY
            average_days_between_consecutive_income_transactions: 30.5
            frequency: MONTHLY
            median_days_between_consecutive_income_transactions: 30.5
            median_transaction_amount: 31500
            maximum_transaction_amount: 32000
            std_days_between_consecutive_income_transactions: 2.12
            minimum_days_between_consecutive_income_transactions: 29
            minimum_transaction_amount: 30000
          - days_since_last_transaction: 6
            average_transaction_amount: 31166.66
            confidence: HIGH
            std_transaction_amount: 1040.83
            maximum_days_between_consecutive_income_transactions: 32
            transactions:
            - amount: 2145.45
              description: NOMINA BUDDHAS RFC:XXXXXXXXXX
              value_date: 2019-10-23T00:00:00.000+00:00
            - amount: 2145.45
              description: NOMINA BUDDHAS RFC:XXXXXXXXXX
              value_date: 2019-10-23T00:00:00.000+00:00
            type: SALARY
            average_days_between_consecutive_income_transactions: 30.5
            frequency: MONTHLY
            median_days_between_consecutive_income_transactions: 30.5
            median_transaction_amount: 31500
            maximum_transaction_amount: 32000
            std_days_between_consecutive_income_transactions: 2.12
            minimum_days_between_consecutive_income_transactions: 29
            minimum_transaction_amount: 30000
          currency: MXN
          id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
          aggregations:
          - full_periods: 2
            periods_with_income: 3
            total_number_of_sources: 3
            median_income_per_period: 1990.73
            minimum_income_per_period: 1861.08
            period_unit: MONTH
            maximum_income_per_period: 4374.4
            lookback_periods: 3
            type: ALL
            minimum_confidence: HIGH
            std_income_per_period: 1415.12
            average_income_per_period: 2742.07
          - full_periods: 2
            periods_with_income: 3
            total_number_of_sources: 3
            median_income_per_period: 1990.73
            minimum_income_per_period: 1861.08
            period_unit: MONTH
            maximum_income_per_period: 4374.4
            lookback_periods: 3
            type: ALL
            minimum_confidence: HIGH
            std_income_per_period: 1415.12
            average_income_per_period: 2742.07
          account:
            loan_data:
              contract_amount: 202000
              number_of_installments_total: 60
              no_interest_payment: 5.637376656633329
              interest_rates:
              - name: jurosEfetivo
                type: MONTHLY
                value: 7.85
              - name: jurosEfetivo
                type: MONTHLY
                value: 7.85
              fees:
              - type: OPERATION_FEE
                value: 5.6
              - type: OPERATION_FEE
                value: 5.6
              limit_day: limit_day
              last_payment_date: last_payment_date
              cutting_day: cutting_day
              cutting_date: cutting_date
              loan_type: Consignado
              outstanding_principal: 142023
              contract_start_date: 2020-03-01T00:00:00.000+00:00
              last_period_balance: 1.4658129805029452
              collected_at: 2022-02-09T08:45:50.406032Z
              principal: 192000
              contract_end_date: 2027-10-01T00:00:00.000+00:00
              number_of_installments_outstanding: 48
              contract_number: 890ASLDJF87SD00
              payment_day: "27"
              outstanding_balance: 182000
              credit_limit: 6.027456183070403
              interest_rate: 5.962133916683182
              monthly_payment: 1000
            internal_identification: internal_identification
            link: 30cb4806-6e00-48a4-91c9-ca55968576c8
            created_at: 2022-02-09T08:45:50.406032Z
            public_identification_value: "150194683119900273"
            type: Cuentas de efectivo
            collected_at: 2019-09-27T13:01:41.941Z
            institution:
              name: erebor_mx_retail
              type: bank
            number: "4057068115181"
            balance:
              current: 5874.13
              available: 5621.12
            credit_data:
              no_interest_payment: 2690.83
              end_date: end_date
              credit_limit: 192000
              minimum_payment: 2400.3
              last_payment_date: last_payment_date
              interest_rate: 4
              cutting_date: 2019-12-11
              collected_at: 2019-09-27T13:01:41.941Z
              next_payment_date: 2019-12-13
              monthly_payment: 0.8008281904610115
            receivables_data:
              current: 2193.83
              available: 800.37
              anticipated: 1393.46
              collected_at: 2022-02-09T08:45:50.406032Z
            name: Cuenta Perfiles- M.N. - MXN-666
            gig_payment_data:
              number: "123184016786312246"
              method: BANK_ACCOUNT
              issuer: AZTECA - BANCO AZTECA SA
              holder_name: Elisa Rojas Rivas
              collected_at: 2019-09-27T13:01:41.941Z
            balance_type: ASSET
            currency: MXN
            funds_data:
            - balance: "88427.94"
              percentage: "100"
              name: FIX X
              type: CNPJ
              public_identifications:
              - name: CNPJ
                value: 05.954.445/0221-68
              - name: CNPJ
                value: 05.954.445/0221-68
            - balance: "88427.94"
              percentage: "100"
              name: FIX X
              type: CNPJ
              public_identifications:
              - name: CNPJ
                value: 05.954.445/0221-68
              - name: CNPJ
                value: 05.954.445/0221-68
            id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
            last_accessed_at: 2021-03-09T10:28:40Z
            category: CHECKING_ACCOUNT
            public_identification_name: CLABE
            bank_product_id: bank_product_id
          collected_at: 2000-01-23T04:56:07.000+00:00
      properties:
        count:
          description: The total number of results in your Belvo account.
          example: 130
          format: int32
          type: integer
        next:
          description: |
            The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

            In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
          example: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
          nullable: true
          type: string
        previous:
          description: "The URL to the previous page of results. If there is no previous\
            \ page, the value is `null`."
          nullable: true
          type: string
          example: null
        results:
          description: Array of income objects.
          items:
            $ref: '#/components/schemas/Income'
          type: array
      type: object
    IncomesRequest:
      example:
        link: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
        date_to: 2020-12-30
        save_data: true
        date_from: 2020-08-01
        token: 1234ab
      properties:
        link:
          description: The `link.id` that you want to get information for.
          example: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
          format: uuid
          type: string
        date_from:
          description: |-
            The date from which you want to start getting incomes for, in `YYYY-MM-DD` format, within the last 365 days. When you use this parameter, you must also send `date_to`.

            ⚠️ You must have at least 90 days between `date_from` and `date_to`.

            ⚠️ The value of `date_from` cannot be greater than `date_to`.
          example: 2020-08-01
          pattern: "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          type: string
        date_to:
          description: |-
            The date you want to stop getting incomes for, in `YYYY-MM-DD` format, within the last 365 days. When you use this parameter, you must also send `date_from`.

            ⚠️ You must have at least 90 days between `date_from` and `date_to`.

            ⚠️ The value of `date_to` cannot be greater than today's date (in other words, no future dates).
          example: 2020-12-30
          pattern: "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          type: string
        token:
          description: The OTP token generated by the bank.
          example: 1234ab
          type: string
        save_data:
          default: true
          description: |-
            Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
            When set to `false`, the data won't be persisted and we return a 200 OK response.
          type: boolean
      required:
      - link
      type: object
    InvalidPeriodError:
      description: "This error occurs when you request incomes for a link within a\
        \ given date range, however, the period between `date_from` and `date_to`\
        \ is less than 90 days."
      properties:
        code:
          description: |-
            A unique error code (`invalid_period`) that allows you to classify and handle the error programmatically.

            ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-invalid_period" target="_blank">400 invalid_period errors</a>.
          example: invalid_period
          type: string
        message:
          description: "A short description of the error. \n\nFor `invalid_period`\
            \ errors, the description is:\n  \n  - `The number of days between date_from\
            \ and date_to must be at least 90 days`."
          example: The number of days between date_from and date_to must be at least
            90 days
          type: string
        request_id:
          description: "A 32-character unique ID of the request (matching a regex\
            \ pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo\
            \ support team to accelerate investigations."
          example: 9e7b283c6efa449c9c028a16b5c249fb
          pattern: "[a-f0-9]{32}"
          type: string
      title: Invalid Period
      type: object
    recurringExpenseFilters:
      additionalProperties: false
      properties:
        account__in:
          type: string
        id:
          type: string
        id__in:
          type: string
        link__in:
          type: string
      type: object
    RecurringExpenseSourceTransaction:
      description: "An array of minified transaction objects used to evaluate the\
        \ recurring expense. If no transactions were found, we return an empty array."
      example:
        amount: 2145.45
        description: Netflix.com/march
        value_date: 2019-10-23T00:00:00.000+00:00
      nullable: true
      properties:
        amount:
          description: The transaction amount.
          example: 2145.45
          format: float
          type: number
        description:
          description: "The description of the transaction provided by the institution.\
            \ Usually, this is the text that the end user would see in the bank statement.\
            \ The description can be an empty string."
          example: Netflix.com/march
          nullable: true
          type: string
        value_date:
          description: "The date when the transaction occurred, in `YYYY-MM-DD` format."
          example: 2019-10-23
          format: date
          type: string
      required:
      - amount
      - description
      - value_date
      type: object
    RecurringExpenses:
      description: |
        Recurring expense insights.


        ℹ️ If no recurring expense insights are found, we return an empty array.
      example:
        days_since_last_transaction: 5
        median_transaction_amount: 32.9
        payment_type: SUBSCRIPTION
        average_transaction_amount: 32.9
        name: Netflix
        id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
        transactions:
        - amount: 2145.45
          description: Netflix.com/march
          value_date: 2019-10-23T00:00:00.000+00:00
        - amount: 2145.45
          description: Netflix.com/march
          value_date: 2019-10-23T00:00:00.000+00:00
        category: Online Platforms & Leisure
        account:
          loan_data:
            contract_amount: 202000
            number_of_installments_total: 60
            no_interest_payment: 5.637376656633329
            interest_rates:
            - name: jurosEfetivo
              type: MONTHLY
              value: 7.85
            - name: jurosEfetivo
              type: MONTHLY
              value: 7.85
            fees:
            - type: OPERATION_FEE
              value: 5.6
            - type: OPERATION_FEE
              value: 5.6
            limit_day: limit_day
            last_payment_date: last_payment_date
            cutting_day: cutting_day
            cutting_date: cutting_date
            loan_type: Consignado
            outstanding_principal: 142023
            contract_start_date: 2020-03-01T00:00:00.000+00:00
            last_period_balance: 1.4658129805029452
            collected_at: 2022-02-09T08:45:50.406032Z
            principal: 192000
            contract_end_date: 2027-10-01T00:00:00.000+00:00
            number_of_installments_outstanding: 48
            contract_number: 890ASLDJF87SD00
            payment_day: "27"
            outstanding_balance: 182000
            credit_limit: 6.027456183070403
            interest_rate: 5.962133916683182
            monthly_payment: 1000
          internal_identification: internal_identification
          link: 30cb4806-6e00-48a4-91c9-ca55968576c8
          created_at: 2022-02-09T08:45:50.406032Z
          public_identification_value: "150194683119900273"
          type: Cuentas de efectivo
          collected_at: 2019-09-27T13:01:41.941Z
          institution:
            name: erebor_mx_retail
            type: bank
          number: "4057068115181"
          balance:
            current: 5874.13
            available: 5621.12
          credit_data:
            no_interest_payment: 2690.83
            end_date: end_date
            credit_limit: 192000
            minimum_payment: 2400.3
            last_payment_date: last_payment_date
            interest_rate: 4
            cutting_date: 2019-12-11
            collected_at: 2019-09-27T13:01:41.941Z
            next_payment_date: 2019-12-13
            monthly_payment: 0.8008281904610115
          receivables_data:
            current: 2193.83
            available: 800.37
            anticipated: 1393.46
            collected_at: 2022-02-09T08:45:50.406032Z
          name: Cuenta Perfiles- M.N. - MXN-666
          gig_payment_data:
            number: "123184016786312246"
            method: BANK_ACCOUNT
            issuer: AZTECA - BANCO AZTECA SA
            holder_name: Elisa Rojas Rivas
            collected_at: 2019-09-27T13:01:41.941Z
          balance_type: ASSET
          currency: MXN
          funds_data:
          - balance: "88427.94"
            percentage: "100"
            name: FIX X
            type: CNPJ
            public_identifications:
            - name: CNPJ
              value: 05.954.445/0221-68
            - name: CNPJ
              value: 05.954.445/0221-68
          - balance: "88427.94"
            percentage: "100"
            name: FIX X
            type: CNPJ
            public_identifications:
            - name: CNPJ
              value: 05.954.445/0221-68
            - name: CNPJ
              value: 05.954.445/0221-68
          id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
          last_accessed_at: 2021-03-09T10:28:40Z
          category: CHECKING_ACCOUNT
          public_identification_name: CLABE
          bank_product_id: bank_product_id
        frequency: MONTHLY
      properties:
        id:
          description: Belvo's unique identifier used to reference the current recurring
            expense.
          example: 076c66e5-90f5-4e01-99c7-50e32f65ae42
          format: uuid
          type: string
        account:
          $ref: '#/components/schemas/Account'
        name:
          description: |
            The name for the recurring expense.

            ℹ️ **Note**: This information is taken from the description section of a transaction and then normalized to provide you with an easy-to-read name. As such, sometimes the name will reflect the merchant the payment is made to (for example, Netflix.com), while for other recurring expenses, this could be something like "Monthly payment to John".
          example: Netflix
          nullable: true
          type: string
        transactions:
          description: "An array of minified transaction objects used to evaluate\
            \ the recurring expense. If no transactions were found, we return an empty\
            \ array."
          items:
            $ref: '#/components/schemas/RecurringExpenseSourceTransaction'
          type: array
        frequency:
          default: MONTHLY
          description: |
            The frequency at which this recurring expense occurs.
            ℹ️ **Note:** As part of the BETA, Belvo only identifies `MONTHLY` frequencies.
          enum:
          - MONTHLY
          example: MONTHLY
          type: string
        average_transaction_amount:
          description: The average transaction amount of the recurring expense.
          example: 32.9
          format: float
          type: number
        median_transaction_amount:
          description: The median transaction amount of the recurring expense.
          example: 32.9
          format: float
          type: number
        days_since_last_transaction:
          description: |
            Number of days since the last recurring expense occurred.

            Based on the frequency, you can infer how many days until the next charge will occur.
          example: 5
          format: int32
          type: integer
        category:
          description: |
            The transaction category for the recurring expense. For more information on the available categories, please see our [Transaction categorization documentation](https://developers.belvo.com/docs/banking#transaction-categorization).
            ℹ️ **Note:** As part of the BETA - the most common categories that will be returned are:
            - `Online Platforms & Leisure` (Netflix, Spotify, Gym Memberships)
            - `Bills & Utilities` (electricity, telephone, internet)
          example: Online Platforms & Leisure
          nullable: true
          type: string
        payment_type:
          default: SUBSCRIPTION
          description: |
            The type of recurring expense.
            As part of the BETA, Belvo only returns `SUBSCRIPTION` payment types.
          enum:
          - SUBSCRIPTION
          example: SUBSCRIPTION
          nullable: true
          type: string
      required:
      - account
      - average_transaction_amount
      - category
      - days_since_last_transaction
      - frequency
      - median_transaction_amount
      - name
      - payment_type
      - transactions
      type: object
    RecurringExpensesPaginatedResponse:
      example:
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: previous
        count: 130
        results:
        - days_since_last_transaction: 5
          median_transaction_amount: 32.9
          payment_type: SUBSCRIPTION
          average_transaction_amount: 32.9
          name: Netflix
          id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
          transactions:
          - amount: 2145.45
            description: Netflix.com/march
            value_date: 2019-10-23T00:00:00.000+00:00
          - amount: 2145.45
            description: Netflix.com/march
            value_date: 2019-10-23T00:00:00.000+00:00
          category: Online Platforms & Leisure
          account:
            loan_data:
              contract_amount: 202000
              number_of_installments_total: 60
              no_interest_payment: 5.637376656633329
              interest_rates:
              - name: jurosEfetivo
                type: MONTHLY
                value: 7.85
              - name: jurosEfetivo
                type: MONTHLY
                value: 7.85
              fees:
              - type: OPERATION_FEE
                value: 5.6
              - type: OPERATION_FEE
                value: 5.6
              limit_day: limit_day
              last_payment_date: last_payment_date
              cutting_day: cutting_day
              cutting_date: cutting_date
              loan_type: Consignado
              outstanding_principal: 142023
              contract_start_date: 2020-03-01T00:00:00.000+00:00
              last_period_balance: 1.4658129805029452
              collected_at: 2022-02-09T08:45:50.406032Z
              principal: 192000
              contract_end_date: 2027-10-01T00:00:00.000+00:00
              number_of_installments_outstanding: 48
              contract_number: 890ASLDJF87SD00
              payment_day: "27"
              outstanding_balance: 182000
              credit_limit: 6.027456183070403
              interest_rate: 5.962133916683182
              monthly_payment: 1000
            internal_identification: internal_identification
            link: 30cb4806-6e00-48a4-91c9-ca55968576c8
            created_at: 2022-02-09T08:45:50.406032Z
            public_identification_value: "150194683119900273"
            type: Cuentas de efectivo
            collected_at: 2019-09-27T13:01:41.941Z
            institution:
              name: erebor_mx_retail
              type: bank
            number: "4057068115181"
            balance:
              current: 5874.13
              available: 5621.12
            credit_data:
              no_interest_payment: 2690.83
              end_date: end_date
              credit_limit: 192000
              minimum_payment: 2400.3
              last_payment_date: last_payment_date
              interest_rate: 4
              cutting_date: 2019-12-11
              collected_at: 2019-09-27T13:01:41.941Z
              next_payment_date: 2019-12-13
              monthly_payment: 0.8008281904610115
            receivables_data:
              current: 2193.83
              available: 800.37
              anticipated: 1393.46
              collected_at: 2022-02-09T08:45:50.406032Z
            name: Cuenta Perfiles- M.N. - MXN-666
            gig_payment_data:
              number: "123184016786312246"
              method: BANK_ACCOUNT
              issuer: AZTECA - BANCO AZTECA SA
              holder_name: Elisa Rojas Rivas
              collected_at: 2019-09-27T13:01:41.941Z
            balance_type: ASSET
            currency: MXN
            funds_data:
            - balance: "88427.94"
              percentage: "100"
              name: FIX X
              type: CNPJ
              public_identifications:
              - name: CNPJ
                value: 05.954.445/0221-68
              - name: CNPJ
                value: 05.954.445/0221-68
            - balance: "88427.94"
              percentage: "100"
              name: FIX X
              type: CNPJ
              public_identifications:
              - name: CNPJ
                value: 05.954.445/0221-68
              - name: CNPJ
                value: 05.954.445/0221-68
            id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
            last_accessed_at: 2021-03-09T10:28:40Z
            category: CHECKING_ACCOUNT
            public_identification_name: CLABE
            bank_product_id: bank_product_id
          frequency: MONTHLY
        - days_since_last_transaction: 5
          median_transaction_amount: 32.9
          payment_type: SUBSCRIPTION
          average_transaction_amount: 32.9
          name: Netflix
          id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
          transactions:
          - amount: 2145.45
            description: Netflix.com/march
            value_date: 2019-10-23T00:00:00.000+00:00
          - amount: 2145.45
            description: Netflix.com/march
            value_date: 2019-10-23T00:00:00.000+00:00
          category: Online Platforms & Leisure
          account:
            loan_data:
              contract_amount: 202000
              number_of_installments_total: 60
              no_interest_payment: 5.637376656633329
              interest_rates:
              - name: jurosEfetivo
                type: MONTHLY
                value: 7.85
              - name: jurosEfetivo
                type: MONTHLY
                value: 7.85
              fees:
              - type: OPERATION_FEE
                value: 5.6
              - type: OPERATION_FEE
                value: 5.6
              limit_day: limit_day
              last_payment_date: last_payment_date
              cutting_day: cutting_day
              cutting_date: cutting_date
              loan_type: Consignado
              outstanding_principal: 142023
              contract_start_date: 2020-03-01T00:00:00.000+00:00
              last_period_balance: 1.4658129805029452
              collected_at: 2022-02-09T08:45:50.406032Z
              principal: 192000
              contract_end_date: 2027-10-01T00:00:00.000+00:00
              number_of_installments_outstanding: 48
              contract_number: 890ASLDJF87SD00
              payment_day: "27"
              outstanding_balance: 182000
              credit_limit: 6.027456183070403
              interest_rate: 5.962133916683182
              monthly_payment: 1000
            internal_identification: internal_identification
            link: 30cb4806-6e00-48a4-91c9-ca55968576c8
            created_at: 2022-02-09T08:45:50.406032Z
            public_identification_value: "150194683119900273"
            type: Cuentas de efectivo
            collected_at: 2019-09-27T13:01:41.941Z
            institution:
              name: erebor_mx_retail
              type: bank
            number: "4057068115181"
            balance:
              current: 5874.13
              available: 5621.12
            credit_data:
              no_interest_payment: 2690.83
              end_date: end_date
              credit_limit: 192000
              minimum_payment: 2400.3
              last_payment_date: last_payment_date
              interest_rate: 4
              cutting_date: 2019-12-11
              collected_at: 2019-09-27T13:01:41.941Z
              next_payment_date: 2019-12-13
              monthly_payment: 0.8008281904610115
            receivables_data:
              current: 2193.83
              available: 800.37
              anticipated: 1393.46
              collected_at: 2022-02-09T08:45:50.406032Z
            name: Cuenta Perfiles- M.N. - MXN-666
            gig_payment_data:
              number: "123184016786312246"
              method: BANK_ACCOUNT
              issuer: AZTECA - BANCO AZTECA SA
              holder_name: Elisa Rojas Rivas
              collected_at: 2019-09-27T13:01:41.941Z
            balance_type: ASSET
            currency: MXN
            funds_data:
            - balance: "88427.94"
              percentage: "100"
              name: FIX X
              type: CNPJ
              public_identifications:
              - name: CNPJ
                value: 05.954.445/0221-68
              - name: CNPJ
                value: 05.954.445/0221-68
            - balance: "88427.94"
              percentage: "100"
              name: FIX X
              type: CNPJ
              public_identifications:
              - name: CNPJ
                value: 05.954.445/0221-68
              - name: CNPJ
                value: 05.954.445/0221-68
            id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
            last_accessed_at: 2021-03-09T10:28:40Z
            category: CHECKING_ACCOUNT
            public_identification_name: CLABE
            bank_product_id: bank_product_id
          frequency: MONTHLY
      properties:
        count:
          description: The total number of results in your Belvo account.
          example: 130
          format: int32
          type: integer
        next:
          description: |
            The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

            In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
          example: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
          nullable: true
          type: string
        previous:
          description: "The URL to the previous page of results. If there is no previous\
            \ page, the value is `null`."
          nullable: true
          type: string
          example: null
        results:
          description: Array of recurring expense objects.
          items:
            $ref: '#/components/schemas/RecurringExpenses'
          type: array
      type: object
    investmentPortfolioFilters:
      additionalProperties: false
      properties:
        created_at__gt:
          type: string
        created_at__gte:
          type: string
        created_at__lt:
          type: string
        created_at__lte:
          type: string
        created_at__range:
          type: string
        link__in:
          type: string
      type: object
    InvestmentsPortfolioInstrumentPublicId:
      description: The public identifiers for the instrument.
      example:
        type: isin
        value: 435-3354.3333
      properties:
        type:
          description: The type of public identifier for the instrument.
          example: isin
          type: string
        value:
          description: The value of the `public_id.type`.
          example: 435-3354.3333
          type: string
      required:
      - type
      - value
      type: object
    InvestmentsPortfolioInstrumentRedemptionConditions:
      example:
        type: due_date
        value: 12-02-2023
      nullable: true
      properties:
        type:
          description: The name of the redemption condition.
          example: due_date
          type: string
        value:
          description: The value of `redemption_conditions.type`.
          example: 12-02-2023
          type: string
      required:
      - type
      - value
      type: object
    InvestmentsPortfolioInstrumentFees:
      example:
        type: OPERATION_FEE
        value: 123.09
      nullable: true
      properties:
        type:
          description: The fee type incurred when making the purchase of the instrument.
          example: OPERATION_FEE
          type: string
        value:
          description: The value of `fees.type`. The currency of the fee is the same
            as the currency of the instrument.
          example: 123.09
          format: float
          type: number
      required:
      - type
      - value
      type: object
    InvestmentsPortfolioInstrumentInterestRate:
      example:
        index: CDI
        type: yearly
        value: 11.31
      nullable: true
      properties:
        type:
          description: How often the interest rate is calculated on the instrument.
          example: yearly
          type: string
        value:
          description: |
            The interest rate for the instrument, in percent.


            ℹ️  **Note:** If the `interest_rate.index` is present, this value is a percentage of the index. For example, if `interest_rate.index` = `CDI` and `interest_rate.value` = `90`, then the total interest rate applied is 90% of the CDI.
          example: 11.31
          format: float
          type: number
        index:
          description: "If applicable, the index type that the `interest_rates.value`\
            \ is calculated against."
          example: CDI
          nullable: true
          type: string
      required:
      - index
      - type
      - value
      type: object
    InvestmentsPortfolioInstrument:
      example:
        open_date: 2021-08-10T00:00:00.000+00:00
        fees:
        - type: OPERATION_FEE
          value: 123.09
        - type: OPERATION_FEE
          value: 123.09
        interest_rates:
        - index: CDI
          type: yearly
          value: 11.31
        - index: CDI
          type: yearly
          value: 11.31
        quantity: 27.46
        type: DEPOSIT
        public_id:
        - type: isin
          value: 435-3354.3333
        - type: isin
          value: 435-3354.3333
        redemption_conditions:
        - type: due_date
          value: 12-02-2023
        - type: due_date
          value: 12-02-2023
        balance_net: 99.09
        subtype: CBD
        price: 10.41
        balance_gross: 100.09
        name: CBD DIGITAL ESPECIAL
        currency: USD
        id: 30cb4806-6e00-48a4-91c9-ca55968576c8
        profit: 3.08
        average_acquisition_price: 10.01
      nullable: true
      properties:
        id:
          description: Belvo's unique ID used to reference the current instrument.
          example: 30cb4806-6e00-48a4-91c9-ca55968576c8
          format: uuid
          type: string
        public_id:
          description: The public identifiers for the instrument.
          items:
            $ref: '#/components/schemas/InvestmentsPortfolioInstrumentPublicId'
          nullable: true
          type: array
        type:
          description: |
            The instrument type. For more information about instruments, please see our [Investments DevPortal article](https://developers.belvo.com/docs/investments#instruments).

            We return one of the following enum values:

              - `BOND`
              - `DEPOSIT`
              - `ETF`
              - `FUND`
              - `OTHER`
              - `PENSION`
              - `STOCK`
          enum:
          - BOND
          - DEPOSIT
          - ETF
          - FUND
          - OTHER
          - PENSION
          - STOCK
          example: DEPOSIT
          type: string
        subtype:
          description: "The subtype for the instrument, as given by the institution."
          example: CBD
          nullable: true
          type: string
        name:
          description: "The name of the instrument, as given by the institution."
          example: CBD DIGITAL ESPECIAL
          type: string
        currency:
          description: |
            The currency of the instrument. For example:

            - 🇧🇷 BRL (Brazilian Real)
            - 🇨🇴 COP (Colombian Peso)
            - 🇲🇽 MXN (Mexican Peso)
            - 🇺🇸 USD (US Dollar)


            Please note that other currencies other than in the list above may be returned.
          example: USD
          type: string
        price:
          description: The current price of one share in the instrument.
          example: 10.41
          format: float
          nullable: true
          type: number
        quantity:
          description: The total amount of shares owned in the instrument.
          example: 27.46
          format: float
          nullable: true
          type: number
        balance_gross:
          description: The total gross value of the instrument (including taxes).
          example: 100.09
          format: float
          nullable: true
          type: number
        balance_net:
          description: The total net value of the instrument (excluding taxes).
          example: 99.09
          format: float
          nullable: true
          type: number
        average_acquisition_price:
          description: The average price of each share acquired in the instrument.
          example: 10.01
          format: float
          nullable: true
          type: number
        profit:
          description: The current profit earned in the instrument.
          example: 3.08
          format: float
          nullable: true
          type: number
        open_date:
          description: The start date of the instrument. Only applicable for instruments
            of type `bond` or `savings`.
          example: 2021-08-10
          format: date
          nullable: true
          type: string
        redemption_conditions:
          description: |
            An array of conditions that apply to the instrument in order to retrieve the final value.

            For example, the due date, the liquidity date, the previdencia type, and so on.
          items:
            $ref: '#/components/schemas/InvestmentsPortfolioInstrumentRedemptionConditions'
          nullable: true
          type: array
        fees:
          description: An array of fees that apply to the instrument.
          items:
            $ref: '#/components/schemas/InvestmentsPortfolioInstrumentFees'
          nullable: true
          type: array
        interest_rates:
          description: An array of interest rates that apply to the instrument.
          items:
            $ref: '#/components/schemas/InvestmentsPortfolioInstrumentInterestRate'
          nullable: true
          type: array
      required:
      - average_acquisition_price
      - balance_gross
      - balance_net
      - currency
      - fees
      - interest_rates
      - name
      - open_date
      - price
      - profit
      - public_id
      - quantity
      - redemption_conditions
      - subtype
      - type
      type: object
    InvestmentsPortfolio:
      example:
        balance_net: 77370.69
        instruments:
        - open_date: 2021-08-10T00:00:00.000+00:00
          fees:
          - type: OPERATION_FEE
            value: 123.09
          - type: OPERATION_FEE
            value: 123.09
          interest_rates:
          - index: CDI
            type: yearly
            value: 11.31
          - index: CDI
            type: yearly
            value: 11.31
          quantity: 27.46
          type: DEPOSIT
          public_id:
          - type: isin
            value: 435-3354.3333
          - type: isin
            value: 435-3354.3333
          redemption_conditions:
          - type: due_date
            value: 12-02-2023
          - type: due_date
            value: 12-02-2023
          balance_net: 99.09
          subtype: CBD
          price: 10.41
          balance_gross: 100.09
          name: CBD DIGITAL ESPECIAL
          currency: USD
          id: 30cb4806-6e00-48a4-91c9-ca55968576c8
          profit: 3.08
          average_acquisition_price: 10.01
        - open_date: 2021-08-10T00:00:00.000+00:00
          fees:
          - type: OPERATION_FEE
            value: 123.09
          - type: OPERATION_FEE
            value: 123.09
          interest_rates:
          - index: CDI
            type: yearly
            value: 11.31
          - index: CDI
            type: yearly
            value: 11.31
          quantity: 27.46
          type: DEPOSIT
          public_id:
          - type: isin
            value: 435-3354.3333
          - type: isin
            value: 435-3354.3333
          redemption_conditions:
          - type: due_date
            value: 12-02-2023
          - type: due_date
            value: 12-02-2023
          balance_net: 99.09
          subtype: CBD
          price: 10.41
          balance_gross: 100.09
          name: CBD DIGITAL ESPECIAL
          currency: USD
          id: 30cb4806-6e00-48a4-91c9-ca55968576c8
          profit: 3.08
          average_acquisition_price: 10.01
        balance_gross: 76000
        name: Investimento
        balance_type: ASSET
        currency: BRL
        id: 30cb4806-6e00-48a4-91c9-ca55968576c8
        type: FIXED_INCOME
      properties:
        id:
          description: Belvo's unique ID used to reference the current portfolio.
          example: 30cb4806-6e00-48a4-91c9-ca55968576c8
          format: uuid
          type: string
        name:
          description: |
            The name of the portfolio, as given in the institution.
          example: Investimento
          type: string
        type:
          description: |
            The portfolio type.

            We return one of the following enum values:

              - `FIXED_INCOME`
              - `OTHER`
              - `PENSION`
              - `VARIABLE_INCOME`
          enum:
          - FIXED_INCOME
          - OTHER
          - PENSION
          - VARIABLE_INCOME
          example: FIXED_INCOME
          type: string
        balance_type:
          description: |
            Indicates whether this account is either an `ASSET` or a `LIABILITY`. You can consider the balance of an `ASSET` as being positive, while the balance of a `LIABILITY` as negative.
          example: ASSET
          nullable: true
          type: string
        balance_gross:
          description: |
            The current gross total value of the entire portfolio and all its underlying instruments, as given by the institution.
          example: 76000
          format: float
          nullable: true
          type: number
        balance_net:
          description: |
            The total current value of the entire portfolio and all its underlying instruments, as given by the institution.

            ℹ️ **Note:** In Brazil, this is usually calculated based on the net value (that is, not including tax).
          example: 77370.69
          format: float
          nullable: true
          type: number
        currency:
          description: |
            The currency of the portfolio. For example:


            - 🇧🇷 BRL (Brazilian Real)
            - 🇨🇴 COP (Colombian Peso)
            - 🇲🇽 MXN (Mexican Peso)


            Please note that other currencies other than in the list above may be returned.
          example: BRL
          type: string
        instruments:
          description: An array of instruments that fall into the investment portfolio.
          items:
            $ref: '#/components/schemas/InvestmentsPortfolioInstrument'
          nullable: true
          type: array
      required:
      - balance_gross
      - balance_net
      - currency
      - name
      - type
      type: object
    InvestmentsPortfoliosPaginatedResponse:
      example:
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: previous
        count: 130
        results:
        - balance_net: 77370.69
          instruments:
          - open_date: 2021-08-10T00:00:00.000+00:00
            fees:
            - type: OPERATION_FEE
              value: 123.09
            - type: OPERATION_FEE
              value: 123.09
            interest_rates:
            - index: CDI
              type: yearly
              value: 11.31
            - index: CDI
              type: yearly
              value: 11.31
            quantity: 27.46
            type: DEPOSIT
            public_id:
            - type: isin
              value: 435-3354.3333
            - type: isin
              value: 435-3354.3333
            redemption_conditions:
            - type: due_date
              value: 12-02-2023
            - type: due_date
              value: 12-02-2023
            balance_net: 99.09
            subtype: CBD
            price: 10.41
            balance_gross: 100.09
            name: CBD DIGITAL ESPECIAL
            currency: USD
            id: 30cb4806-6e00-48a4-91c9-ca55968576c8
            profit: 3.08
            average_acquisition_price: 10.01
          - open_date: 2021-08-10T00:00:00.000+00:00
            fees:
            - type: OPERATION_FEE
              value: 123.09
            - type: OPERATION_FEE
              value: 123.09
            interest_rates:
            - index: CDI
              type: yearly
              value: 11.31
            - index: CDI
              type: yearly
              value: 11.31
            quantity: 27.46
            type: DEPOSIT
            public_id:
            - type: isin
              value: 435-3354.3333
            - type: isin
              value: 435-3354.3333
            redemption_conditions:
            - type: due_date
              value: 12-02-2023
            - type: due_date
              value: 12-02-2023
            balance_net: 99.09
            subtype: CBD
            price: 10.41
            balance_gross: 100.09
            name: CBD DIGITAL ESPECIAL
            currency: USD
            id: 30cb4806-6e00-48a4-91c9-ca55968576c8
            profit: 3.08
            average_acquisition_price: 10.01
          balance_gross: 76000
          name: Investimento
          balance_type: ASSET
          currency: BRL
          id: 30cb4806-6e00-48a4-91c9-ca55968576c8
          type: FIXED_INCOME
        - balance_net: 77370.69
          instruments:
          - open_date: 2021-08-10T00:00:00.000+00:00
            fees:
            - type: OPERATION_FEE
              value: 123.09
            - type: OPERATION_FEE
              value: 123.09
            interest_rates:
            - index: CDI
              type: yearly
              value: 11.31
            - index: CDI
              type: yearly
              value: 11.31
            quantity: 27.46
            type: DEPOSIT
            public_id:
            - type: isin
              value: 435-3354.3333
            - type: isin
              value: 435-3354.3333
            redemption_conditions:
            - type: due_date
              value: 12-02-2023
            - type: due_date
              value: 12-02-2023
            balance_net: 99.09
            subtype: CBD
            price: 10.41
            balance_gross: 100.09
            name: CBD DIGITAL ESPECIAL
            currency: USD
            id: 30cb4806-6e00-48a4-91c9-ca55968576c8
            profit: 3.08
            average_acquisition_price: 10.01
          - open_date: 2021-08-10T00:00:00.000+00:00
            fees:
            - type: OPERATION_FEE
              value: 123.09
            - type: OPERATION_FEE
              value: 123.09
            interest_rates:
            - index: CDI
              type: yearly
              value: 11.31
            - index: CDI
              type: yearly
              value: 11.31
            quantity: 27.46
            type: DEPOSIT
            public_id:
            - type: isin
              value: 435-3354.3333
            - type: isin
              value: 435-3354.3333
            redemption_conditions:
            - type: due_date
              value: 12-02-2023
            - type: due_date
              value: 12-02-2023
            balance_net: 99.09
            subtype: CBD
            price: 10.41
            balance_gross: 100.09
            name: CBD DIGITAL ESPECIAL
            currency: USD
            id: 30cb4806-6e00-48a4-91c9-ca55968576c8
            profit: 3.08
            average_acquisition_price: 10.01
          balance_gross: 76000
          name: Investimento
          balance_type: ASSET
          currency: BRL
          id: 30cb4806-6e00-48a4-91c9-ca55968576c8
          type: FIXED_INCOME
      properties:
        count:
          description: The total number of results in your Belvo account.
          example: 130
          format: int32
          type: integer
        next:
          description: |
            The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

            In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
          example: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
          nullable: true
          type: string
        previous:
          description: "The URL to the previous page of results. If there is no previous\
            \ page, the value is `null`."
          nullable: true
          type: string
          example: null
        results:
          description: Array of investment portfolio objects.
          items:
            $ref: '#/components/schemas/InvestmentsPortfolio'
          type: array
      type: object
    investmentTransactionFilters:
      additionalProperties: false
      properties:
        created_at__gt:
          type: string
        created_at__gte:
          type: string
        created_at__lt:
          type: string
        created_at__lte:
          type: string
        created_at__range:
          type: string
        link__in:
          type: string
        portfolio__in:
          type: string
      type: object
    InvestmentsInstrumentTransactionPortfolio:
      description: Basic information about the parent portfolio.
      example:
        name: Fundos de Investimento
        id: 30cb4806-6e00-48a4-91c9-ca55968576c8
        type: FIXED_INCOME
      properties:
        id:
          description: Belvo's unique ID used to reference the current portfolio.
          example: 30cb4806-6e00-48a4-91c9-ca55968576c8
          format: uuid
          type: string
        name:
          description: |
            The name of the portfolio, as given in the institution.
          example: Fundos de Investimento
          type: string
        type:
          description: |
            The portfolio type.

            We return one of the following enum values:

              - `FIXED_INCOME`
              - `OTHER`
              - `PENSION`
              - `VARIABLE_INCOME`
          enum:
          - FIXED_INCOME
          - OTHER
          - PENSION
          - VARIABLE_INCOME
          example: FIXED_INCOME
          type: string
      type: object
    InvestmentsInstrumentTransactionInstrument:
      description: Basic information about the parent instrument.
      example:
        name: Itau Açoes Estrategia S&P 500
        id: 30cb4806-6e00-48a4-91c9-ca55968576c8
        type: FUND
      properties:
        id:
          description: Belvo's unique ID used to reference the current instrument.
          example: 30cb4806-6e00-48a4-91c9-ca55968576c8
          format: uuid
          type: string
        name:
          description: "The name of the instrument, as given by the institution."
          example: Itau Açoes Estrategia S&P 500
          type: string
        type:
          description: |
            The instrument type. For more information about instruments, please see our [Investments DevPortal article](https://developers.belvo.com/docs/investments#instruments).

            We return one of the following enum values:

              - `BOND`
              - `DEPOSIT`
              - `ETF`
              - `FUND`
              - `OTHER`
              - `PENSION`
              - `STOCK`
          enum:
          - BOND
          - DEPOSIT
          - ETF
          - FUND
          - OTHER
          - PENSION
          - STOCK
          example: FUND
          type: string
      type: object
    InvestmentsInstrumentTransaction:
      example:
        amount: 18000.25
        fees: 184.5
        settlement_date: 2021-08-13T00:00:00.000+00:00
        quantity: 18.2556
        link: f3cd25ba-d109-4ddf-8d29-624c26cbee3f
        created_at: 2022-02-09T08:45:50.406032Z
        operation_date: 2021-08-07T00:00:00.000+00:00
        description: Stock acquisition
        instrument:
          name: Itau Açoes Estrategia S&P 500
          id: 30cb4806-6e00-48a4-91c9-ca55968576c8
          type: FUND
        type: BUY
        collected_at: 2022-02-09T08:45:50.406032Z
        portfolio:
          name: Fundos de Investimento
          id: 30cb4806-6e00-48a4-91c9-ca55968576c8
          type: FIXED_INCOME
        price: 1000
        currency: BRL
        id: f3cd25ba-d109-4ddf-8d29-624c26cbee3f
      properties:
        id:
          description: Belvo's unique identifier used to reference the current instrument
            transaction.
          example: f3cd25ba-d109-4ddf-8d29-624c26cbee3f
          format: uuid
          type: string
        link:
          description: The `link.id` the transaction belongs to.
          example: f3cd25ba-d109-4ddf-8d29-624c26cbee3f
          format: uuid
          type: string
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          example: 2022-02-09T08:45:50.406032Z
          format: date-time
          nullable: true
          type: string
        created_at:
          description: The ISO-8601 timestamp of when the data point was last updated
            in Belvo's database.
          example: 2022-02-09T08:45:50.406032Z
          format: date-time
          type: string
        portfolio:
          $ref: '#/components/schemas/InvestmentsInstrumentTransactionPortfolio'
        instrument:
          $ref: '#/components/schemas/InvestmentsInstrumentTransactionInstrument'
        settlement_date:
          description: Date when the transaction was processed by the bank.
          example: 2021-08-13
          format: date
          type: string
        operation_date:
          description: Date when the transaction was initiated by the user.
          example: 2021-08-07
          format: date
          nullable: true
          type: string
        description:
          description: Additional description for the transaction.
          example: Stock acquisition
          type: string
        type:
          description: |
            The type of transaction.

            We return one of the following enum values:

              - `BUY`
              - `SELL`
              - `CANCEL`
              - `CASH`
              - `FEE`
              - `TRANSFER`
              - `DIVIDEND`
          enum:
          - BUY
          - SELL
          - CANCEL
          - CASH
          - FEE
          - TRANSFER
          - DIVIDEND
          example: BUY
          type: string
        quantity:
          description: Number of shares purchased in this transaction.
          example: 18.2556
          format: float
          nullable: true
          type: number
        amount:
          description: |
            The total amount of the transaction.

            ℹ️ **Note:** Does not include the transaction fees.
          example: 18000.25
          format: float
          nullable: true
          type: number
        price:
          description: The market price for one share at the time of the transaction.
          example: 1000
          format: float
          nullable: true
          type: number
        currency:
          description: |
            The currency of the transaction. For example:
            - 🇧🇷 BRL (Brazilian Real)
            - 🇨🇴 COP (Colombian Peso)
            - 🇲🇽 MXN (Mexican Peso)


            Please note that other currencies other than in the list above may be returned.
          example: BRL
          type: string
        fees:
          description: The total fees paid to conduct the transaction.
          example: 184.5
          format: float
          nullable: true
          type: number
      required:
      - amount
      - collected_at
      - currency
      - description
      - fees
      - instrument
      - operation_date
      - portfolio
      - price
      - quantity
      - settlement_date
      - type
      type: object
    InvestmentsTransactionsPaginatedResponse:
      example:
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: previous
        count: 130
        results:
        - amount: 18000.25
          fees: 184.5
          settlement_date: 2021-08-13T00:00:00.000+00:00
          quantity: 18.2556
          link: f3cd25ba-d109-4ddf-8d29-624c26cbee3f
          created_at: 2022-02-09T08:45:50.406032Z
          operation_date: 2021-08-07T00:00:00.000+00:00
          description: Stock acquisition
          instrument:
            name: Itau Açoes Estrategia S&P 500
            id: 30cb4806-6e00-48a4-91c9-ca55968576c8
            type: FUND
          type: BUY
          collected_at: 2022-02-09T08:45:50.406032Z
          portfolio:
            name: Fundos de Investimento
            id: 30cb4806-6e00-48a4-91c9-ca55968576c8
            type: FIXED_INCOME
          price: 1000
          currency: BRL
          id: f3cd25ba-d109-4ddf-8d29-624c26cbee3f
        - amount: 18000.25
          fees: 184.5
          settlement_date: 2021-08-13T00:00:00.000+00:00
          quantity: 18.2556
          link: f3cd25ba-d109-4ddf-8d29-624c26cbee3f
          created_at: 2022-02-09T08:45:50.406032Z
          operation_date: 2021-08-07T00:00:00.000+00:00
          description: Stock acquisition
          instrument:
            name: Itau Açoes Estrategia S&P 500
            id: 30cb4806-6e00-48a4-91c9-ca55968576c8
            type: FUND
          type: BUY
          collected_at: 2022-02-09T08:45:50.406032Z
          portfolio:
            name: Fundos de Investimento
            id: 30cb4806-6e00-48a4-91c9-ca55968576c8
            type: FIXED_INCOME
          price: 1000
          currency: BRL
          id: f3cd25ba-d109-4ddf-8d29-624c26cbee3f
      properties:
        count:
          description: The total number of results in your Belvo account.
          example: 130
          format: int32
          type: integer
        next:
          description: |
            The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

            In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
          example: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
          nullable: true
          type: string
        previous:
          description: "The URL to the previous page of results. If there is no previous\
            \ page, the value is `null`."
          nullable: true
          type: string
          example: null
        results:
          description: Array of link objects.
          items:
            $ref: '#/components/schemas/InvestmentsInstrumentTransaction'
          type: array
      type: object
    InstrumentTransactionRequest:
      example:
        link: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
        date_to: 2020-10-05
        save_data: true
        date_from: 2020-08-05
        token: 1234ab
      properties:
        link:
          description: The `link.id` that you want to get information for.
          example: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
          format: uuid
          type: string
        date_from:
          description: |-
            The date from which you want to start getting transactions for, in `YYYY-MM-DD` format.

            ⚠️ The value of `date_from` cannot be greater than `date_to`.
          example: 2020-08-05
          pattern: "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          type: string
        date_to:
          description: |-
            The date you want to stop getting transactions for, in `YYYY-MM-DD` format.

            ⚠️ The value of `date_to` cannot be greater than today's date (in other words, no future dates).
          example: 2020-10-05
          pattern: "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          type: string
        token:
          description: The OTP token generated by the bank.
          example: 1234ab
          type: string
        save_data:
          default: true
          description: "Indicates whether or not to persist the data in Belvo. When\
            \ set to `false`, the data won't be persisted."
          type: boolean
      required:
      - date_from
      - date_to
      - link
      type: object
    receivableTransactionFilters:
      additionalProperties: false
      properties:
        account__in:
          type: string
        created_at:
          type: string
        created_at__lt:
          type: string
        created_at__lte:
          type: string
        created_at__gt:
          type: string
        created_at__gte:
          type: string
        created_at__range:
          type: string
        link__in:
          type: string
        value_date:
          type: string
        value_date__gt:
          type: string
        value_date__lt:
          type: string
        value_date__gte:
          type: string
        value_date__lte:
          type: string
        value_date__range:
          type: string
      type: object
    ReceivablesTransactionAccount:
      description: Basic information about the account associated with the transaction.
      example:
        institution:
          name: erebor_mx_retail
          type: bank
        id: a7a3104c-5a3c-4536-81e1-14523097f645
      properties:
        id:
          description: Belvo's unique ID used to reference the account associated
            with the transaction.
          example: a7a3104c-5a3c-4536-81e1-14523097f645
          format: uuid
          type: string
        institution:
          $ref: '#/components/schemas/InstitutionAccount'
      required:
      - id
      - institution
      type: object
    RecevablesTransactionFees:
      description: Details regarding the fees applied to the transaction.
      example:
        type: TRANSACTION_FEE
        value: 2.21
      properties:
        type:
          description: |-
            The type of fee applied to the transaction. Can be one of the following values:

             - `TRANSACTION_FEE`
          enum:
          - TRANSACTION_FEE
          nullable: true
          type: string
        value:
          description: The value of `fees.type`.
          example: 2.21
          format: float
          type: number
      required:
      - type
      - value
      type: object
    ReceivablesTransactionNumberOfInstallments:
      description: "Details regarding the number of installments for the transaction,\
        \ if applicable."
      example:
        total: 2
        paid: 1
      nullable: true
      properties:
        paid:
          description: The number of payments already made to pay the cost of the
            transaction.
          example: 1
          format: int32
          nullable: true
          type: integer
        total:
          description: The number of payments required to pay the cost of the transaction.
          example: 2
          format: int32
          nullable: true
          type: integer
      required:
      - paid
      - total
      type: object
    ReceivablesTransaction:
      example:
        fees:
        - type: TRANSACTION_FEE
          value: 2.21
        - type: TRANSACTION_FEE
          value: 2.21
        created_at: 2020-04-23T21:30:20.336854Z
        number_of_installments:
          total: 2
          paid: 1
        gross_amount: 106.7
        type: MASTERCARD_CREDIT
        collected_at: 2020-04-23T21:32:55.336854Z
        institution_transaction_id: "134532345"
        value_hour: 19:47
        currency: BRL
        id: 30cb4806-6e00-48a4-91c9-ca55968576c8
        net_amount: 104.58
        account:
          institution:
            name: erebor_mx_retail
            type: bank
          id: a7a3104c-5a3c-4536-81e1-14523097f645
        value_date: 2022-01-16T00:00:00.000+00:00
        status: APPROVED
      properties:
        id:
          description: Belvo's unique ID used to reference the current receivable
            transaction.
          example: 30cb4806-6e00-48a4-91c9-ca55968576c8
          format: uuid
          readOnly: true
          type: string
        account:
          $ref: '#/components/schemas/ReceivablesTransactionAccount'
        created_at:
          description: The ISO timestamp of when the data point was last updated in
            Belvo's database.
          example: 2020-04-23T21:30:20.336854Z
          format: date-time
          type: string
        collected_at:
          description: The ISO timestamp when the data point was collected.
          example: 2020-04-23T21:32:55.336854Z
          format: date-time
          type: string
        value_hour:
          description: "The time that the transaction occurred, according to the institution,\
            \ in `HH:MM` format."
          example: 19:47
          type: string
        value_date:
          description: "The date that the transactions occurred, according to the\
            \ institution, in `YYYY-MM-DD` format."
          example: 2022-01-16
          format: date
          type: string
        institution_transaction_id:
          description: |-
            Internal identification number that the acquirer uses to identify the transaction.
            ℹ️ **Note**: For Brazil, this number is the NSU.
          example: "134532345"
          type: string
        currency:
          description: |-
            The currency of the transaction. For example:
            - 🇧🇷 BRL (Brazilian Real)
            - 🇨🇴 COP (Colombian Peso)
            - 🇲🇽 MXN (Mexican Peso)

             Please note that currencies other than those listed above may be returned.
          example: BRL
          type: string
        type:
          description: "The type of transaction. For example, whether the transaction\
            \ was a `VISA_DEBIT` or a `MASTERCARD_CREDIT`."
          enum:
          - VISA_CREDIT
          - VISA_DEBIT
          - MASTERCARD_CREDIT
          - MASTERCARD_DEBIT
          - ELO_CREDIT
          - ELO_DEBIT
          example: MASTERCARD_CREDIT
          nullable: true
          type: string
        gross_amount:
          description: The total gross amount of the transaction.
          example: 106.7
          format: float
          nullable: true
          type: number
        net_amount:
          description: The net amount of the transaction.
          example: 104.58
          format: float
          nullable: true
          type: number
        fees:
          items:
            $ref: '#/components/schemas/RecevablesTransactionFees'
          type: array
        status:
          description: |-
            The status of the transaction. Can be either:

              - `APPROVED`
              - `CANCELLED`
              - `REVERTED`
              - `UNCATEGORIZED`
          enum:
          - APPROVED
          - CANCELLED
          - REVERTED
          - UNCATEGORIZED
          example: APPROVED
          nullable: true
          type: string
        number_of_installments:
          $ref: '#/components/schemas/ReceivablesTransactionNumberOfInstallments'
      required:
      - account
      - collected_at
      - created_at
      - currency
      - fees
      - gross_amount
      - id
      - institution_transaction_id
      - net_amount
      - number_of_installments
      - status
      - type
      - value_date
      - value_hour
      type: object
    ReceivablesTransactionsPaginatedResponse:
      example:
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: previous
        count: 130
        results:
        - fees:
          - type: TRANSACTION_FEE
            value: 2.21
          - type: TRANSACTION_FEE
            value: 2.21
          created_at: 2020-04-23T21:30:20.336854Z
          number_of_installments:
            total: 2
            paid: 1
          gross_amount: 106.7
          type: MASTERCARD_CREDIT
          collected_at: 2020-04-23T21:32:55.336854Z
          institution_transaction_id: "134532345"
          value_hour: 19:47
          currency: BRL
          id: 30cb4806-6e00-48a4-91c9-ca55968576c8
          net_amount: 104.58
          account:
            institution:
              name: erebor_mx_retail
              type: bank
            id: a7a3104c-5a3c-4536-81e1-14523097f645
          value_date: 2022-01-16T00:00:00.000+00:00
          status: APPROVED
        - fees:
          - type: TRANSACTION_FEE
            value: 2.21
          - type: TRANSACTION_FEE
            value: 2.21
          created_at: 2020-04-23T21:30:20.336854Z
          number_of_installments:
            total: 2
            paid: 1
          gross_amount: 106.7
          type: MASTERCARD_CREDIT
          collected_at: 2020-04-23T21:32:55.336854Z
          institution_transaction_id: "134532345"
          value_hour: 19:47
          currency: BRL
          id: 30cb4806-6e00-48a4-91c9-ca55968576c8
          net_amount: 104.58
          account:
            institution:
              name: erebor_mx_retail
              type: bank
            id: a7a3104c-5a3c-4536-81e1-14523097f645
          value_date: 2022-01-16T00:00:00.000+00:00
          status: APPROVED
      properties:
        count:
          description: The total number of results in your Belvo account.
          example: 130
          format: int32
          type: integer
        next:
          description: |
            The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

            In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
          example: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
          nullable: true
          type: string
        previous:
          description: "The URL to the previous page of results. If there is no previous\
            \ page, the value is `null`."
          nullable: true
          type: string
          example: null
        results:
          description: Array of receivables objects.
          items:
            $ref: '#/components/schemas/ReceivablesTransaction'
          type: array
      type: object
    ReceivableTransactionRequest:
      example:
        link: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
        date_to: 2020-10-05
        save_data: true
        date_from: 2020-08-05
        token: 1234ab
      properties:
        link:
          description: The `link.id` that you want to get information for.
          example: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
          format: uuid
          type: string
        date_from:
          description: |-
            The date from which you want to start getting transactions for, in `YYYY-MM-DD` format.

            ⚠️ The value of `date_from` cannot be greater than `date_to`.
          example: 2020-08-05
          pattern: "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          type: string
        date_to:
          description: |-
            The date you want to stop getting transactions for, in `YYYY-MM-DD` format.

            ⚠️ The value of `date_to` cannot be greater than today's date (in other words, no future dates).
          example: 2020-10-05
          pattern: "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          type: string
        token:
          description: The OTP token generated by the bank.
          example: 1234ab
          type: string
        save_data:
          default: true
          description: |-
            Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
            When set to `false`, the data won't be persisted and we return a 200 OK response.
          type: boolean
      required:
      - date_from
      - date_to
      - link
      type: object
    riskInsightFilters:
      additionalProperties: false
      properties:
        id:
          type: string
        id__in:
          type: string
        link__in:
          type: string
      type: object
    RiskInsightsTransactionMetrics:
      description: "Aggregated metrics calculated band on the user's transactions\
        \ from checking, savings, credit card, and loan accounts."
      example:
        mean_incoming_amount_1w: 3030
        max_outgoing_amount_1m: 3027.44
        max_outgoing_amount_3m: 3027.44
        num_incoming_transactions_1w: 20
        mean_incoming_amount_1m: 3030
        num_outgoing_transactions_1w: 19
        mean_incoming_amount_3m: 3030
        num_outgoing_transactions_3m: 19
        num_outgoing_transactions_1m: 19
        sum_incoming_amount_1w: 10022.01
        max_outgoing_amount_1w: 3027.44
        num_incoming_transactions_3m: 20
        num_incoming_transactions_1m: 20
        num_transactions_1m: 39
        max_incoming_amount_1w: 3030
        mean_outgoing_amount_3m: 3027.44
        num_transactions_3m: 39
        mean_outgoing_amount_1m: 3027.44
        max_incoming_amount_1m: 3030
        sum_incoming_amount_3m: 10022.01
        max_incoming_amount_3m: 3030
        sum_incoming_amount_1m: 10022.01
        sum_outgoing_amount_3m: 10237.03
        sum_outgoing_amount_1m: 10237.03
        mean_outgoing_amount_1w: 3027.44
        num_transactions_1w: 39
        sum_outgoing_amount_1w: 10237.03
      nullable: true
      properties:
        num_transactions_1w:
          default: 0
          description: |
            The total number of transactions analyzed to determine the risk insights for the last week (incoming and outgoing).
          example: 39
          format: int32
          type: integer
        num_transactions_1m:
          default: 0
          description: |
            The total number of transactions analyzed to determine the risk insights for the last month (incoming and outgoing).
          example: 39
          format: int32
          type: integer
        num_transactions_3m:
          default: 0
          description: |
            The total number of transactions analyzed to determine the risk insights for the last three months (incoming and outgoing).
          example: 39
          format: int32
          type: integer
        num_incoming_transactions_1w:
          default: 0
          description: |
            The total number of inflow transactions for the last week.

            ℹ️ **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is `0`.

            If the account has not been open long enough to have the transaction data for a given period, we return `null`. For example, if the account has only been open for five days, we return values for `_1w` and `_1m`, however, the value for `_3m` will be `null`.
          example: 20
          format: int32
          type: integer
        num_incoming_transactions_1m:
          default: 0
          description: |
            The total number of inflow transactions for the last month.

            ℹ️ **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is `0`.

            If the account has not been open long enough to have the transaction data for a given period, we return `null`. For example, if the account has only been open for five days, we return values for `_1w` and `_1m`, however, the value for `_3m` will be `null`.
          example: 20
          format: int32
          type: integer
        num_incoming_transactions_3m:
          default: 0
          description: |
            The total number of inflow transactions for the last three months.

            ℹ️ **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is `0`.

            If the account has not been open long enough to have the transaction data for a given period, we return `null`. For example, if the account has only been open for five days, we return values for `_1w` and `_1m`, however, the value for `_3m` will be `null`.
          example: 20
          format: int32
          type: integer
        num_outgoing_transactions_1w:
          default: 0
          description: |
            To total number of outflow transactions in the last week.

            ℹ️ **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is `0`.

            If the account has not been open long enough to have the transaction data for a given period, we return `null`. For example, if the account has only been open for five days, we return values for `_1w` and `_1m`, however, the value for `_3m` will be `null`.
          example: 19
          format: int32
          type: integer
        num_outgoing_transactions_1m:
          default: 0
          description: |
            To total number of outflow transactions in the last month.

            ℹ️ **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is `0`.

            If the account has not been open long enough to have the transaction data for a given period, we return `null`. For example, if the account has only been open for five days, we return values for `_1w` and `_1m`, however, the value for `_3m` will be `null`.
          example: 19
          format: int32
          type: integer
        num_outgoing_transactions_3m:
          default: 0
          description: |
            To total number of outflow transactions in the last three months.

            ℹ️ **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is `0`.

            If the account has not been open long enough to have the transaction data for a given period, we return `null`. For example, if the account has only been open for five days, we return values for `_1w` and `_1m`, however, the value for `_3m` will be `null`.
          example: 19
          format: int32
          type: integer
        sum_incoming_amount_1w:
          description: |
            The total sum of all inflow transactions for the last week.
          example: 10022.01
          format: float
          nullable: true
          type: number
        sum_incoming_amount_1m:
          description: |
            The total sum of all inflow transactions for the last month.
          example: 10022.01
          format: float
          nullable: true
          type: number
        sum_incoming_amount_3m:
          description: |
            The total sum of all inflow transactions for the last three months.
          example: 10022.01
          format: float
          nullable: true
          type: number
        sum_outgoing_amount_1w:
          description: |
            The total sum of all outflow transactions for the last week.
          example: 10237.03
          format: float
          nullable: true
          type: number
        sum_outgoing_amount_1m:
          description: |
            The total sum of all outflow transactions for the last month.
          example: 10237.03
          format: float
          nullable: true
          type: number
        sum_outgoing_amount_3m:
          description: |
            The total sum of all outflow transactions for the last three months.
          example: 10237.03
          format: float
          nullable: true
          type: number
        max_incoming_amount_1w:
          description: |
            The highest value inflow transaction in the last week.
          example: 3030
          format: float
          nullable: true
          type: number
        max_incoming_amount_1m:
          description: |
            The highest value inflow transaction in the last month.
          example: 3030
          format: float
          nullable: true
          type: number
        max_incoming_amount_3m:
          description: |
            The highest value inflow transaction in the last three months.
          example: 3030
          format: float
          nullable: true
          type: number
        max_outgoing_amount_1w:
          description: |
            The highest value outflow transaction in the last week.
          example: 3027.44
          format: float
          nullable: true
          type: number
        max_outgoing_amount_1m:
          description: |
            The highest value outflow transaction in the last month.
          example: 3027.44
          format: float
          nullable: true
          type: number
        max_outgoing_amount_3m:
          description: |
            The highest value outflow transaction in the last three months.
          example: 3027.44
          format: float
          nullable: true
          type: number
        mean_incoming_amount_1w:
          description: |
            The mean incoming value of all transactions in the last week.
          example: 3030
          format: float
          nullable: true
          type: number
        mean_incoming_amount_1m:
          description: |
            The mean incoming value of all transactions in the last month.
          example: 3030
          format: float
          nullable: true
          type: number
        mean_incoming_amount_3m:
          description: |
            The mean incoming value of all transactions in the last three months.
          example: 3030
          format: float
          nullable: true
          type: number
        mean_outgoing_amount_1w:
          description: |
            The mean outgoing value of all transaction in the last week.
          example: 3027.44
          format: float
          nullable: true
          type: number
        mean_outgoing_amount_1m:
          description: |
            The mean outgoing value of all transaction in the last month.
          example: 3027.44
          format: float
          nullable: true
          type: number
        mean_outgoing_amount_3m:
          description: |
            The mean outgoing value of all transaction in the last three months.
          example: 3027.44
          format: float
          nullable: true
          type: number
      required:
      - max_incoming_amount_1m
      - max_incoming_amount_1w
      - max_incoming_amount_3m
      - max_outgoing_amount_1m
      - max_outgoing_amount_1w
      - max_outgoing_amount_3m
      - mean_incoming_amount_1m
      - mean_incoming_amount_1w
      - mean_incoming_amount_3m
      - mean_outgoing_amount_1m
      - mean_outgoing_amount_1w
      - mean_outgoing_amount_3m
      - num_incoming_transactions_1m
      - num_incoming_transactions_1w
      - num_incoming_transactions_3m
      - num_outgoing_transactions_1m
      - num_outgoing_transactions_1w
      - num_outgoing_transactions_3m
      - num_transactions_1m
      - num_transactions_1w
      - num_transactions_3m
      - sum_incoming_amount_1m
      - sum_incoming_amount_1w
      - sum_incoming_amount_3m
      - sum_outgoing_amount_1m
      - sum_outgoing_amount_1w
      - sum_outgoing_amount_3m
      type: object
    RiskInsightsBalanceMetrics:
      description: Balance metrics calculated based on the user's balances from checking
        and savings accounts.
      example:
        days_balance_below_x_1w: 3
        days_balance_below_0_1m: 0
        days_balance_below_0_3m: 0
        min_balance_1w: 0.51
        days_balance_below_0_1w: 0
        max_balance_1m: 3062.11
        max_balance_3m: 3062.11
        min_balance_1m: 0.51
        max_balance_1w: 3062.11
        balance_threshold_x: 267
        min_balance_3m: 0.51
        closing_balance: 24.19
        days_balance_below_x_1m: 3
        days_balance_below_x_3m: 3
      nullable: true
      properties:
        min_balance_1w:
          description: |
            The minimum balance in the period (one week).
          example: 0.51
          format: float
          nullable: true
          type: number
        min_balance_1m:
          description: |
            The minimum balance in the period (one month).
          example: 0.51
          format: float
          nullable: true
          type: number
        min_balance_3m:
          description: |
            The minimum balance in the period (three months).
          example: 0.51
          format: float
          nullable: true
          type: number
        max_balance_1w:
          description: |
            The maximum balance in the period (one week).
          example: 3062.11
          format: float
          nullable: true
          type: number
        max_balance_1m:
          description: |
            The maximum balance in the period (one month).
          example: 3062.11
          format: float
          nullable: true
          type: number
        max_balance_3m:
          description: |
            The maximum balance in the period (three months).
          example: 3062.11
          format: float
          nullable: true
          type: number
        closing_balance:
          description: |
            The balance of all the accounts at the `collected_at` time.
          example: 24.19
          format: float
          nullable: true
          type: number
        days_balance_below_0_1w:
          description: |
            The number of days that the total balance of the account is less than or equal to 0 in the last week.
          example: 0
          format: int32
          nullable: true
          type: integer
        days_balance_below_0_1m:
          description: |
            The number of days that the total balance of the account is less than or equal to 0 in the last month.
          example: 0
          format: int32
          nullable: true
          type: integer
        days_balance_below_0_3m:
          description: |
            The number of days that the total balance of the account is less than or equal to 0 in the last three months.
          example: 0
          format: int32
          nullable: true
          type: integer
        days_balance_below_x_1w:
          description: |
            The number of days that the total balance of the account is less than or equal to the amount specified in `balance_threshold_x` in the last week.
          example: 3
          format: int32
          nullable: true
          type: integer
        days_balance_below_x_1m:
          description: |
            The number of days that the total balance of the account is less than or equal to the amount specified in `balance_threshold_x` in the last month.
          example: 3
          format: int32
          nullable: true
          type: integer
        days_balance_below_x_3m:
          description: |
            The number of days that the total balance of the account is less than or equal to the amount specified in `balance_threshold_x` in the last three months.
          example: 3
          format: int32
          nullable: true
          type: integer
        balance_threshold_x:
          description: |
            The threshold used to compute `days_balance_below_x_period`. Please note, this is value is country specific (both in terms of the amount and the currency).
          example: 267
          format: float
          type: number
      required:
      - balance_threshold_x
      - closing_balance
      - days_balance_below_0_1m
      - days_balance_below_0_1w
      - days_balance_below_0_3m
      - days_balance_below_x_1m
      - days_balance_below_x_1w
      - days_balance_below_x_3m
      - max_balance_1m
      - max_balance_1w
      - max_balance_3m
      - min_balance_1m
      - min_balance_1w
      - min_balance_3m
      type: object
    RiskInsightsCashflowMetrics:
      description: |
        Aggregated metrics calculated based on the user's transactions from checking, savings, credit, and loan accounts.

        However, internal transfers (transfers between accounts belonging to the same link) are not used in the calculation.
      example:
        positive_to_negative_ratio_1w: 0.98
        sum_negative_1w: 10237.03
        sum_negative_1m: 10237.03
        sum_positive_1w: 10022.01
        positive_to_negative_ratio_1m: 0.98
        sum_negative_3m: 10237.03
        sum_positive_3m: 10022.01
        sum_positive_1m: 10022.01
        positive_to_negative_ratio_3m: 0.98
      nullable: true
      properties:
        sum_positive_1w:
          description: |
            Sum total of all transactions leading to a positive cashflow in the last week (counted from the time of the request).
          example: 10022.01
          format: float
          nullable: true
          type: number
        sum_positive_1m:
          description: |
            Sum total of all transactions leading to a positive cashflow in the last month (counted from the time of the request).
          example: 10022.01
          format: float
          nullable: true
          type: number
        sum_positive_3m:
          description: |
            Sum total of all transactions leading to a positive cashflow in the last three months (counted from the time of the request).
          example: 10022.01
          format: float
          nullable: true
          type: number
        sum_negative_1w:
          description: |
            Sum total of all transactions leading to a negative cashflow in the last week (counted from the time of the request).
          example: 10237.03
          format: float
          nullable: true
          type: number
        sum_negative_1m:
          description: |
            Sum total of all transactions leading to a negative cashflow in the last month (counted from the time of the request).
          example: 10237.03
          format: float
          nullable: true
          type: number
        sum_negative_3m:
          description: |
            Sum total of all transactions leading to a negative cashflow in the last three months (counted from the time of the request).
          example: 10237.03
          format: float
          nullable: true
          type: number
        positive_to_negative_ratio_1w:
          description: |
            The ratio between sum_positive / sum_negative  in the last week (counted from the time of the request).

            ℹ️ If the ratio is greater than `1`, it means that the user has more income than outgoing, indicating that they spend less than they earn.

            **Note**: In the case that there have been no outgoing transactions, the value will be `null`.
          example: 0.98
          format: float
          nullable: true
          type: number
        positive_to_negative_ratio_1m:
          description: |
            The ratio between sum_positive / sum_negative  in the last month (counted from the time of the request).

            ℹ️ If the ratio is greater than `1`, it means that the user has more income than outgoing, indicating that they spend less than they earn.
          example: 0.98
          format: float
          nullable: true
          type: number
        positive_to_negative_ratio_3m:
          description: |
            The ratio between sum_positive / sum_negative  in the last three months (counted from the time of the request).

            ℹ️ If the ratio is greater than `1`, it means that the user has more income than outgoing, indicating that they spend less than they earn.
          example: 0.98
          format: float
          nullable: true
          type: number
      required:
      - positive_to_negative_ratio_1m
      - positive_to_negative_ratio_1w
      - positive_to_negative_ratio_3m
      - sum_negative_1m
      - sum_negative_1w
      - sum_negative_3m
      - sum_positive_1m
      - sum_positive_1w
      - sum_positive_3m
      type: object
    RiskInsightsCreditCardMetrics:
      description: Aggregated metrics calculated based on the link's credit card accounts.
      example:
        sum_credit_limit: 600.5
        num_accounts: 2
        sum_credit_used: 200.5
      nullable: true
      properties:
        num_accounts:
          description: |
            Number of credit cards accounts associated to the link.
          example: 2
          format: int32
          minimum: 0
          type: integer
        sum_credit_limit:
          description: |
            Sum total of all credit cards' limits.
          example: 600.5
          format: float
          nullable: true
          type: number
        sum_credit_used:
          description: |
            Sum total of all credit used.
          example: 200.5
          format: float
          nullable: true
          type: number
      required:
      - num_accounts
      - sum_credit_limit
      - sum_credit_used
      type: object
    RiskInsightsLoansMetrics:
      description: Aggregated metrics calculated based on the user's loan accounts.
      example:
        sum_loans_monthly_payment: 400
        sum_loans_principal: 5000
        sum_loans_outstanding_principal: 2000
        num_accounts: 5
      nullable: true
      properties:
        num_accounts:
          description: |
            Number of loan accounts associated with the link.
          example: 5
          format: int32
          type: integer
        sum_loans_principal:
          description: |
            Sum total of the principal for all of the link's loan accounts.
          example: 5000
          format: float
          nullable: true
          type: number
        sum_loans_outstanding_principal:
          description: |
            Sum total of the outstanding principal for all the link's loan accounts.
          example: 2000
          format: float
          nullable: true
          type: number
        sum_loans_monthly_payment:
          description: |
            Sum total of the monthly payments for all the link's loan accounts.
          example: 400
          format: float
          nullable: true
          type: number
      required:
      - num_accounts
      - sum_loans_monthly_payment
      - sum_loans_outstanding_principal
      - sum_loans_principal
      type: object
    RiskInsights:
      example:
        credit_cards_metrics:
          sum_credit_limit: 600.5
          num_accounts: 2
          sum_credit_used: 200.5
        link: 30cb4806-6e00-48a4-91c9-ca55968576c8
        transactions_metrics:
          mean_incoming_amount_1w: 3030
          max_outgoing_amount_1m: 3027.44
          max_outgoing_amount_3m: 3027.44
          num_incoming_transactions_1w: 20
          mean_incoming_amount_1m: 3030
          num_outgoing_transactions_1w: 19
          mean_incoming_amount_3m: 3030
          num_outgoing_transactions_3m: 19
          num_outgoing_transactions_1m: 19
          sum_incoming_amount_1w: 10022.01
          max_outgoing_amount_1w: 3027.44
          num_incoming_transactions_3m: 20
          num_incoming_transactions_1m: 20
          num_transactions_1m: 39
          max_incoming_amount_1w: 3030
          mean_outgoing_amount_3m: 3027.44
          num_transactions_3m: 39
          mean_outgoing_amount_1m: 3027.44
          max_incoming_amount_1m: 3030
          sum_incoming_amount_3m: 10022.01
          max_incoming_amount_3m: 3030
          sum_incoming_amount_1m: 10022.01
          sum_outgoing_amount_3m: 10237.03
          sum_outgoing_amount_1m: 10237.03
          mean_outgoing_amount_1w: 3027.44
          num_transactions_1w: 39
          sum_outgoing_amount_1w: 10237.03
        created_at: 2022-02-01T20:25:47.307911Z
        id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
        accounts:
        - 0d3ffb69-f83b-456e-ad8e-208d0998d71d
        - 00293c8e-1152-440b-9892-3c071fb88672
        - cf638fba-ef45-4c10-bc6f-adecc4b2bf4e
        balances_metrics:
          days_balance_below_x_1w: 3
          days_balance_below_0_1m: 0
          days_balance_below_0_3m: 0
          min_balance_1w: 0.51
          days_balance_below_0_1w: 0
          max_balance_1m: 3062.11
          max_balance_3m: 3062.11
          min_balance_1m: 0.51
          max_balance_1w: 3062.11
          balance_threshold_x: 267
          min_balance_3m: 0.51
          closing_balance: 24.19
          days_balance_below_x_1m: 3
          days_balance_below_x_3m: 3
        loans_metrics:
          sum_loans_monthly_payment: 400
          sum_loans_principal: 5000
          sum_loans_outstanding_principal: 2000
          num_accounts: 5
        cashflow_metrics:
          positive_to_negative_ratio_1w: 0.98
          sum_negative_1w: 10237.03
          sum_negative_1m: 10237.03
          sum_positive_1w: 10022.01
          positive_to_negative_ratio_1m: 0.98
          sum_negative_3m: 10237.03
          sum_positive_3m: 10022.01
          sum_positive_1m: 10022.01
          positive_to_negative_ratio_3m: 0.98
      properties:
        id:
          description: Belvo's unique ID for the risk insights request.
          example: 076c66e5-90f5-4e01-99c7-50e32f65ae42
          format: uuid
          type: string
        link:
          description: The `link.id` the risk insights analysis belongs to.
          example: 30cb4806-6e00-48a4-91c9-ca55968576c8
          format: uuid
          type: string
        accounts:
          description: "An array of Belvo-generated account numbers (UUIDs) that were\
            \ used during the risk insights analysis. If no accounts were found, we\
            \ return an empty array."
          example:
          - 0d3ffb69-f83b-456e-ad8e-208d0998d71d
          - 00293c8e-1152-440b-9892-3c071fb88672
          - cf638fba-ef45-4c10-bc6f-adecc4b2bf4e
          items:
            description: The Belvo-generated ID for the account.
            example: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
            format: uuid
            type: string
          nullable: true
          type: array
        created_at:
          description: The ISO-8601 timestamp of when the data point was last updated
            in Belvo's database.
          example: 2022-02-01T20:25:47.307911Z
          format: date-time
          type: string
        transactions_metrics:
          $ref: '#/components/schemas/RiskInsightsTransactionMetrics'
        balances_metrics:
          $ref: '#/components/schemas/RiskInsightsBalanceMetrics'
        cashflow_metrics:
          $ref: '#/components/schemas/RiskInsightsCashflowMetrics'
        credit_cards_metrics:
          $ref: '#/components/schemas/RiskInsightsCreditCardMetrics'
        loans_metrics:
          $ref: '#/components/schemas/RiskInsightsLoansMetrics'
      required:
      - accounts
      - balances_metrics
      - cashflow_metrics
      - created_at
      - credit_cards_metrics
      - id
      - link
      - loans_metrics
      - transactions_metrics
      type: object
    RiskInsightsPaginatedResponse:
      example:
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: previous
        count: 130
        results:
        - credit_cards_metrics:
            sum_credit_limit: 600.5
            num_accounts: 2
            sum_credit_used: 200.5
          link: 30cb4806-6e00-48a4-91c9-ca55968576c8
          transactions_metrics:
            mean_incoming_amount_1w: 3030
            max_outgoing_amount_1m: 3027.44
            max_outgoing_amount_3m: 3027.44
            num_incoming_transactions_1w: 20
            mean_incoming_amount_1m: 3030
            num_outgoing_transactions_1w: 19
            mean_incoming_amount_3m: 3030
            num_outgoing_transactions_3m: 19
            num_outgoing_transactions_1m: 19
            sum_incoming_amount_1w: 10022.01
            max_outgoing_amount_1w: 3027.44
            num_incoming_transactions_3m: 20
            num_incoming_transactions_1m: 20
            num_transactions_1m: 39
            max_incoming_amount_1w: 3030
            mean_outgoing_amount_3m: 3027.44
            num_transactions_3m: 39
            mean_outgoing_amount_1m: 3027.44
            max_incoming_amount_1m: 3030
            sum_incoming_amount_3m: 10022.01
            max_incoming_amount_3m: 3030
            sum_incoming_amount_1m: 10022.01
            sum_outgoing_amount_3m: 10237.03
            sum_outgoing_amount_1m: 10237.03
            mean_outgoing_amount_1w: 3027.44
            num_transactions_1w: 39
            sum_outgoing_amount_1w: 10237.03
          created_at: 2022-02-01T20:25:47.307911Z
          id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
          accounts:
          - 0d3ffb69-f83b-456e-ad8e-208d0998d71d
          - 00293c8e-1152-440b-9892-3c071fb88672
          - cf638fba-ef45-4c10-bc6f-adecc4b2bf4e
          balances_metrics:
            days_balance_below_x_1w: 3
            days_balance_below_0_1m: 0
            days_balance_below_0_3m: 0
            min_balance_1w: 0.51
            days_balance_below_0_1w: 0
            max_balance_1m: 3062.11
            max_balance_3m: 3062.11
            min_balance_1m: 0.51
            max_balance_1w: 3062.11
            balance_threshold_x: 267
            min_balance_3m: 0.51
            closing_balance: 24.19
            days_balance_below_x_1m: 3
            days_balance_below_x_3m: 3
          loans_metrics:
            sum_loans_monthly_payment: 400
            sum_loans_principal: 5000
            sum_loans_outstanding_principal: 2000
            num_accounts: 5
          cashflow_metrics:
            positive_to_negative_ratio_1w: 0.98
            sum_negative_1w: 10237.03
            sum_negative_1m: 10237.03
            sum_positive_1w: 10022.01
            positive_to_negative_ratio_1m: 0.98
            sum_negative_3m: 10237.03
            sum_positive_3m: 10022.01
            sum_positive_1m: 10022.01
            positive_to_negative_ratio_3m: 0.98
        - credit_cards_metrics:
            sum_credit_limit: 600.5
            num_accounts: 2
            sum_credit_used: 200.5
          link: 30cb4806-6e00-48a4-91c9-ca55968576c8
          transactions_metrics:
            mean_incoming_amount_1w: 3030
            max_outgoing_amount_1m: 3027.44
            max_outgoing_amount_3m: 3027.44
            num_incoming_transactions_1w: 20
            mean_incoming_amount_1m: 3030
            num_outgoing_transactions_1w: 19
            mean_incoming_amount_3m: 3030
            num_outgoing_transactions_3m: 19
            num_outgoing_transactions_1m: 19
            sum_incoming_amount_1w: 10022.01
            max_outgoing_amount_1w: 3027.44
            num_incoming_transactions_3m: 20
            num_incoming_transactions_1m: 20
            num_transactions_1m: 39
            max_incoming_amount_1w: 3030
            mean_outgoing_amount_3m: 3027.44
            num_transactions_3m: 39
            mean_outgoing_amount_1m: 3027.44
            max_incoming_amount_1m: 3030
            sum_incoming_amount_3m: 10022.01
            max_incoming_amount_3m: 3030
            sum_incoming_amount_1m: 10022.01
            sum_outgoing_amount_3m: 10237.03
            sum_outgoing_amount_1m: 10237.03
            mean_outgoing_amount_1w: 3027.44
            num_transactions_1w: 39
            sum_outgoing_amount_1w: 10237.03
          created_at: 2022-02-01T20:25:47.307911Z
          id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
          accounts:
          - 0d3ffb69-f83b-456e-ad8e-208d0998d71d
          - 00293c8e-1152-440b-9892-3c071fb88672
          - cf638fba-ef45-4c10-bc6f-adecc4b2bf4e
          balances_metrics:
            days_balance_below_x_1w: 3
            days_balance_below_0_1m: 0
            days_balance_below_0_3m: 0
            min_balance_1w: 0.51
            days_balance_below_0_1w: 0
            max_balance_1m: 3062.11
            max_balance_3m: 3062.11
            min_balance_1m: 0.51
            max_balance_1w: 3062.11
            balance_threshold_x: 267
            min_balance_3m: 0.51
            closing_balance: 24.19
            days_balance_below_x_1m: 3
            days_balance_below_x_3m: 3
          loans_metrics:
            sum_loans_monthly_payment: 400
            sum_loans_principal: 5000
            sum_loans_outstanding_principal: 2000
            num_accounts: 5
          cashflow_metrics:
            positive_to_negative_ratio_1w: 0.98
            sum_negative_1w: 10237.03
            sum_negative_1m: 10237.03
            sum_positive_1w: 10022.01
            positive_to_negative_ratio_1m: 0.98
            sum_negative_3m: 10237.03
            sum_positive_3m: 10022.01
            sum_positive_1m: 10022.01
            positive_to_negative_ratio_3m: 0.98
      properties:
        count:
          description: The total number of results in your Belvo account.
          example: 130
          format: int32
          type: integer
        next:
          description: |
            The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

            In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
          example: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
          nullable: true
          type: string
        previous:
          description: "The URL to the previous page of results. If there is no previous\
            \ page, the value is `null`."
          nullable: true
          type: string
          example: null
        results:
          description: Array of risk insights objects.
          items:
            $ref: '#/components/schemas/RiskInsights'
          type: array
      type: object
    RetentionBreakdown:
      description: A breakdown of the retained taxes
      example:
        retained_amount: 0
        tax_type: "01"
        payment_status: PAID
        base_amount: 0.03
      properties:
        base_amount:
          description: |
            The base amount that was used to calculate the tax retention.
          example: 0.03
          format: float
          nullable: true
          type: number
        tax_type:
          description: |
            Optional attribute to indicate the type of tax withheld for the period or year according to the [SAT catalog](https://developers.belvo.com/docs/sat-catalogs#retention-code).
          example: "01"
          nullable: true
          type: string
        retained_amount:
          description: |
            The amount retained.
          example: 0
          format: float
          nullable: true
          type: number
        payment_status:
          description: |
            Indicates whether or not the tax has been paid or not. Can be either:
              - `PAID`
              - `PROVISIONED`
          example: PAID
          format: enum
          nullable: true
          type: string
      required:
      - base_amount
      - payment_status
      - retained_amount
      - tax_type
      type: object
    TaxRetentions:
      example:
        cancelled_at: 2000-01-23T04:56:07.000+00:00
        code: 25
        receiver_id: GYGK3207809L1
        link: 19697249-01b8-443e-a451-76bfc5fbeebf
        created_at: 2022-02-09T08:46:20.406032Z
        invoice_identification: def404af-5eef-4112-aa99-d1ec8493b89a
        sender_name: Roberto Nunez Batman
        retention_breakdown:
        - retained_amount: 0
          tax_type: "01"
          payment_status: PAID
          base_amount: 0.03
        - retained_amount: 0
          tax_type: "01"
          payment_status: PAID
          base_amount: 0.03
        version: "1.0"
        issued_at: 2019-01-03T21:10:40Z
        certified_at: 2019-01-03T21:10:41Z
        sender_id: JKUF980404P0
        collected_at: 2022-02-09T08:45:50.406032Z
        total_invoice_amount: 53249.8
        receiver_nationality: NATIONAL
        total_exempt_amount: 1000.8
        xml: =XML-STRING=
        receiver_name: ACME LTD
        total_retained_amount: 1550.7
        id: c749315b-eec2-435d-a458-06912878564f
        total_taxable_amount: 43249
      properties:
        id:
          description: Belvo's unique identifier used to reference the current tax
            retention statement.
          example: c749315b-eec2-435d-a458-06912878564f
          format: uuid
          type: string
        link:
          description: The `link.id` the tax retention belongs to.
          example: 19697249-01b8-443e-a451-76bfc5fbeebf
          format: uuid
          type: string
        collected_at:
          description: |
            The ISO-8601 timestamp of when the data point was collected.
          example: 2022-02-09T08:45:50.406032Z
          format: date-time
          nullable: true
          type: string
        created_at:
          description: |
            The ISO-8601 timestamp of when the data point was last updated in Belvo's database.
          example: 2022-02-09T08:46:20.406032Z
          format: date-time
          type: string
        invoice_identification:
          description: |
            The fiscal institution's unique ID for the invoice that the tax retention relates to.
          example: def404af-5eef-4112-aa99-d1ec8493b89a
          format: uuid
          nullable: true
          type: string
        version:
          description: |
            The CFDI version of the tax retentions.
          example: "1.0"
          nullable: true
          type: string
        code:
          description: |
            The tax retention code. For more information, see our [SAT Catalogs DevPortal article](https://developers.belvo.com/docs/sat-catalogs#retention-code).
          example: 25
          format: int32
          nullable: true
          type: integer
        issued_at:
          description: |
            The ISO-8601 timestamp of when the tax retention was issued.
          example: 2019-01-03T21:10:40Z
          format: date-time
          nullable: true
          type: string
        certified_at:
          description: |
            The ISO-8601 timestamp of when the tax retention was certified.
          example: 2019-01-03T21:10:41Z
          format: date-time
          nullable: true
          type: string
        cancelled_at:
          description: |
            The ISO-8601 timestamp of when the tax retention was canceled (if applicable).
          format: date-time
          nullable: true
          type: string
          example: null
        sender_id:
          description: |
            The fiscal ID of the invoice sender.
          example: JKUF980404P0
          nullable: true
          type: string
        sender_name:
          description: |
            The name of the invoice sender.
          example: Roberto Nunez Batman
          nullable: true
          type: string
        receiver_nationality:
          description: |
            Whether the invoice receiver is a Mexican national or not. If the receiver is not considered a Mexican national, the retained taxes can be calculated differently. Possible values:
              - `NATIONAL`
              - `FOREIGN`
          example: NATIONAL
          format: enum
          nullable: true
          type: string
        receiver_id:
          description: |
            The fiscal ID of the invoice receiver.
          example: GYGK3207809L1
          nullable: true
          type: string
        receiver_name:
          description: |
            The name of the invoice receiver.
          example: ACME LTD
          nullable: true
          type: string
        total_invoice_amount:
          description: |
            The total amount of the invoice that the tax retention relates to.
          example: 53249.8
          format: float
          nullable: true
          type: number
        total_exempt_amount:
          description: |
            Total amount that is exempt from taxation.
          example: 1000.8
          format: float
          nullable: true
          type: number
        total_retained_amount:
          description: |
            Total tax retained.
          example: 1550.7
          format: float
          nullable: true
          type: number
        total_taxable_amount:
          description: |
            The total amount that can be taxed. Calculated as `total_invoice_amount` - `total_exempt_amount`.
          example: 43249
          format: float
          nullable: true
          type: number
        retention_breakdown:
          description: A breakdown of the retained taxes.
          items:
            $ref: '#/components/schemas/RetentionBreakdown'
          nullable: true
          type: array
        xml:
          description: |
            The tax retention document in XML form.
          example: =XML-STRING=
          format: xml
          nullable: true
          type: string
      required:
      - cancelled_at
      - certified_at
      - code
      - collected_at
      - invoice_identification
      - issued_at
      - receiver_id
      - receiver_name
      - receiver_nationality
      - retention_breakdown
      - sender_id
      - sender_name
      - total_exempt_amount
      - total_invoice_amount
      - total_retained_amount
      - total_taxable_amount
      - version
      - xml
      type: object
    TaxRetentionsPaginatedResponse:
      example:
        next: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
        previous: previous
        count: 130
        results:
        - cancelled_at: 2000-01-23T04:56:07.000+00:00
          code: 25
          receiver_id: GYGK3207809L1
          link: 19697249-01b8-443e-a451-76bfc5fbeebf
          created_at: 2022-02-09T08:46:20.406032Z
          invoice_identification: def404af-5eef-4112-aa99-d1ec8493b89a
          sender_name: Roberto Nunez Batman
          retention_breakdown:
          - retained_amount: 0
            tax_type: "01"
            payment_status: PAID
            base_amount: 0.03
          - retained_amount: 0
            tax_type: "01"
            payment_status: PAID
            base_amount: 0.03
          version: "1.0"
          issued_at: 2019-01-03T21:10:40Z
          certified_at: 2019-01-03T21:10:41Z
          sender_id: JKUF980404P0
          collected_at: 2022-02-09T08:45:50.406032Z
          total_invoice_amount: 53249.8
          receiver_nationality: NATIONAL
          total_exempt_amount: 1000.8
          xml: =XML-STRING=
          receiver_name: ACME LTD
          total_retained_amount: 1550.7
          id: c749315b-eec2-435d-a458-06912878564f
          total_taxable_amount: 43249
        - cancelled_at: 2000-01-23T04:56:07.000+00:00
          code: 25
          receiver_id: GYGK3207809L1
          link: 19697249-01b8-443e-a451-76bfc5fbeebf
          created_at: 2022-02-09T08:46:20.406032Z
          invoice_identification: def404af-5eef-4112-aa99-d1ec8493b89a
          sender_name: Roberto Nunez Batman
          retention_breakdown:
          - retained_amount: 0
            tax_type: "01"
            payment_status: PAID
            base_amount: 0.03
          - retained_amount: 0
            tax_type: "01"
            payment_status: PAID
            base_amount: 0.03
          version: "1.0"
          issued_at: 2019-01-03T21:10:40Z
          certified_at: 2019-01-03T21:10:41Z
          sender_id: JKUF980404P0
          collected_at: 2022-02-09T08:45:50.406032Z
          total_invoice_amount: 53249.8
          receiver_nationality: NATIONAL
          total_exempt_amount: 1000.8
          xml: =XML-STRING=
          receiver_name: ACME LTD
          total_retained_amount: 1550.7
          id: c749315b-eec2-435d-a458-06912878564f
          total_taxable_amount: 43249
      properties:
        count:
          description: The total number of results in your Belvo account.
          example: 130
          format: int32
          type: integer
        next:
          description: |
            The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

            In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
          example: "https://sandbox.belvo.com/api/{endpoint}/?page=2"
          nullable: true
          type: string
        previous:
          description: "The URL to the previous page of results. If there is no previous\
            \ page, the value is `null`."
          nullable: true
          type: string
          example: null
        results:
          description: Array of tax retentions objects.
          items:
            $ref: '#/components/schemas/TaxRetentions'
          type: array
      type: object
    TaxRetentionsRequest:
      example:
        link: 9e432f18-36ca-4bd6-a3f3-1971e58dc1e8
        date_to: 2020-02-01
        type: OUTFLOW
        attach_xml: true
        save_data: true
        date_from: 2020-01-01
      properties:
        link:
          description: |
            The `link.id` that you want to get information for.
          example: 9e432f18-36ca-4bd6-a3f3-1971e58dc1e8
          format: uuid
          type: string
        date_from:
          description: |
            The date from which you want to start getting tax retentions for, in `YYYY-MM-DD` format.

            ⚠️ The value of `date_from` cannot be greater than `date_to`.
          example: 2020-01-01
          pattern: "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          type: string
        date_to:
          description: |
            The date you want to stop getting tax retentions for, in `YYYY-MM-DD` format.

            ⚠️ The number of days between `date_from` and `date_to` cannot be over 365.
          example: 2020-02-01
          pattern: "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          type: string
        type:
          description: |
            The type of tax retention in relation to the invoice (from the perspective of the Link owner).

            - `OUTFLOW` relates to a tax retention for a sent invoice.
            - `INFLOW` related to a tax retention for a received invoice.
          enum:
          - OUTFLOW
          - INFLOW
          type: string
        attach_xml:
          default: true
          description: "When set to `true`, you will receive the XML tax retention\
            \ in the response."
          type: boolean
        save_data:
          default: true
          description: |-
            Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
            When set to `false`, the data won't be persisted and we return a 200 OK response.
          type: boolean
      required:
      - date_from
      - date_to
      - link
      - type
      type: object
    RegisterLink_400_response_inner:
      anyOf:
      - $ref: '#/components/schemas/TooManySessionsError'
      - $ref: '#/components/schemas/SessionExpiredError'
      - $ref: '#/components/schemas/ValidationError'
      - $ref: '#/components/schemas/InstitutionDownError'
      - $ref: '#/components/schemas/InstitutionUnavailableError'
      - $ref: '#/components/schemas/InstitutionInactiveError'
      - $ref: '#/components/schemas/UnsupportedOperationError'
      - $ref: '#/components/schemas/InvalidLinkError'
      - $ref: '#/components/schemas/UnconfirmedLinkError'
    ListTaxReturns_200_response:
      oneOf:
      - $ref: '#/components/schemas/TaxReturnsPersonalPaginated'
      - $ref: '#/components/schemas/TaxReturnsPersonalMonthlyPaginated'
      - $ref: '#/components/schemas/TaxReturnsBusinessPaginated'
      - $ref: '#/components/schemas/TaxReturnsBusinessMonthlyPaginated'
    RetrieveTaxReturns_request:
      oneOf:
      - $ref: '#/components/schemas/TaxReturnsMonthlyRequest'
      - $ref: '#/components/schemas/TaxReturnsYearlyRequest'
    RetrieveTaxReturns_200_response_inner:
      oneOf:
      - $ref: '#/components/schemas/TaxReturnPersonal'
      - $ref: '#/components/schemas/TaxReturnPersonalMonthly'
      - $ref: '#/components/schemas/TaxReturnBusiness'
      - $ref: '#/components/schemas/TaxReturnBusinessMonthly'
    RetrieveIncome_400_response_inner:
      anyOf:
      - $ref: '#/components/schemas/TooManySessionsError'
      - $ref: '#/components/schemas/SessionExpiredError'
      - $ref: '#/components/schemas/ValidationError'
      - $ref: '#/components/schemas/InstitutionDownError'
      - $ref: '#/components/schemas/InstitutionUnavailableError'
      - $ref: '#/components/schemas/InstitutionInactiveError'
      - $ref: '#/components/schemas/UnsupportedOperationError'
      - $ref: '#/components/schemas/InvalidLinkError'
      - $ref: '#/components/schemas/UnconfirmedLinkError'
      - $ref: '#/components/schemas/InvalidPeriodError'
    Institution_form_fields:
      anyOf:
      - items:
          $ref: '#/components/schemas/InstitutionsFormField'
        title: Array of objects
        type: array
      - $ref: '#/components/schemas/InstitutionsFormField'
      description: The form fields on the institution's website that require user
        credentials.
  securitySchemes:
    basicAuth:
      description: |
        # Using Basic Authentication

        Basic authentication is done using your secret keys. Just use your SecretID as the `username` and SecretPassword as the `password`. For example:

        ```curl
        curl \
            -u =BASE64-SECRET_ID=:=BASE64-SECRET_PASSWORD=
            https://sandbox.belvo.com/api/
        ```


        For information on how to get your secret keys, read our [Getting started guide](https://developers.belvo.com/docs/get-started-in-5-minutes).
      scheme: basic
      type: http
x-readme:
  explorer-enabled: true
  proxy-enabled: true
  samples-enabled: true
  samples-languages:
  - curl
  - node
  - ruby
  - python

